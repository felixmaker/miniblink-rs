/* automatically generated by rust-bindgen 0.71.1 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type LPBYTE = *mut BYTE;
pub type UINT = ::std::os::raw::c_uint;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type UINT_PTR = ::std::os::raw::c_uint;
pub type LONG_PTR = ::std::os::raw::c_long;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type LPWSTR = *mut WCHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HINSTANCE = *mut HINSTANCE__;
pub type HMODULE = HINSTANCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HDC = *mut HDC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
pub type RECT = tagRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOW {
    pub cb: DWORD,
    pub lpReserved: LPWSTR,
    pub lpDesktop: LPWSTR,
    pub lpTitle: LPWSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
pub type STARTUPINFOW = _STARTUPINFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbRect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
pub type mbRect = _mbRect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPoint {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
pub type mbPoint = _mbPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbSize {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
pub type mbSize = _mbSize;
pub const MB_LBUTTON: mbMouseFlags = 1;
pub const MB_RBUTTON: mbMouseFlags = 2;
pub const MB_SHIFT: mbMouseFlags = 4;
pub const MB_CONTROL: mbMouseFlags = 8;
pub const MB_MBUTTON: mbMouseFlags = 16;
pub type mbMouseFlags = ::std::os::raw::c_int;
pub const MB_EXTENDED: mbKeyFlags = 256;
pub const MB_REPEAT: mbKeyFlags = 16384;
pub type mbKeyFlags = ::std::os::raw::c_int;
pub const MB_MSG_MOUSEMOVE: mbMouseMsg = 512;
pub const MB_MSG_LBUTTONDOWN: mbMouseMsg = 513;
pub const MB_MSG_LBUTTONUP: mbMouseMsg = 514;
pub const MB_MSG_LBUTTONDBLCLK: mbMouseMsg = 515;
pub const MB_MSG_RBUTTONDOWN: mbMouseMsg = 516;
pub const MB_MSG_RBUTTONUP: mbMouseMsg = 517;
pub const MB_MSG_RBUTTONDBLCLK: mbMouseMsg = 518;
pub const MB_MSG_MBUTTONDOWN: mbMouseMsg = 519;
pub const MB_MSG_MBUTTONUP: mbMouseMsg = 520;
pub const MB_MSG_MBUTTONDBLCLK: mbMouseMsg = 521;
pub const MB_MSG_MOUSEWHEEL: mbMouseMsg = 522;
pub type mbMouseMsg = ::std::os::raw::c_int;
pub type utf8 = ::std::os::raw::c_char;
pub const MB_PROXY_NONE: mbProxyType = 0;
pub const MB_PROXY_HTTP: mbProxyType = 1;
pub const MB_PROXY_SOCKS4: mbProxyType = 2;
pub const MB_PROXY_SOCKS4A: mbProxyType = 3;
pub const MB_PROXY_SOCKS5: mbProxyType = 4;
pub const MB_PROXY_SOCKS5HOSTNAME: mbProxyType = 5;
pub type mbProxyType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbProxy {
    pub type_: mbProxyType,
    pub hostname: [::std::os::raw::c_char; 100usize],
    pub port: ::std::os::raw::c_ushort,
    pub username: [::std::os::raw::c_char; 50usize],
    pub password: [::std::os::raw::c_char; 50usize],
}
pub type mbProxy = _mbProxy;
pub const MB_SETTING_PROXY: _mbSettingMask = 1;
pub const MB_ENABLE_NODEJS: _mbSettingMask = 8;
pub const MB_ENABLE_DISABLE_H5VIDEO: _mbSettingMask = 16;
pub const MB_ENABLE_DISABLE_PDFVIEW: _mbSettingMask = 32;
pub const MB_ENABLE_DISABLE_CC: _mbSettingMask = 64;
pub const MB_ENABLE_ENABLE_EGLGLES2: _mbSettingMask = 128;
pub const MB_ENABLE_ENABLE_SWIFTSHAER: _mbSettingMask = 256;
pub type _mbSettingMask = ::std::os::raw::c_int;
pub use self::_mbSettingMask as mbSettingMask;
pub type mbOnBlinkThreadInitCallback =
    ::std::option::Option<unsafe extern "stdcall" fn(param: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbSettings {
    pub proxy: mbProxy,
    pub mask: ::std::os::raw::c_uint,
    pub blinkThreadInitCallback: mbOnBlinkThreadInitCallback,
    pub blinkThreadInitCallbackParam: *mut ::std::os::raw::c_void,
    pub version: isize,
    pub mainDllPath: *const WCHAR,
    pub mainDllHandle: HMODULE,
    pub config: *const ::std::os::raw::c_char,
}
pub type mbSettings = _mbSettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbViewSettings {
    pub size: ::std::os::raw::c_int,
    pub bgColor: ::std::os::raw::c_uint,
}
pub type mbViewSettings = _mbViewSettings;
pub type mbWebFrameHandle = *mut ::std::os::raw::c_void;
pub type mbNetJob = *mut ::std::os::raw::c_void;
pub type mbWebView = isize;
pub type mbCookieVisitor = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        secure: ::std::os::raw::c_int,
        httpOnly: ::std::os::raw::c_int,
        expires: *mut ::std::os::raw::c_int,
    ) -> BOOL,
>;
pub const mbCookieCommandClearAllCookies: _mbCookieCommand = 0;
pub const mbCookieCommandClearSessionCookies: _mbCookieCommand = 1;
pub const mbCookieCommandFlushCookiesToFile: _mbCookieCommand = 2;
pub const mbCookieCommandReloadCookiesFromFile: _mbCookieCommand = 3;
pub type _mbCookieCommand = ::std::os::raw::c_int;
pub use self::_mbCookieCommand as mbCookieCommand;
pub const MB_NAVIGATION_TYPE_LINKCLICK: _mbNavigationType = 0;
pub const MB_NAVIGATION_TYPE_FORMSUBMITTE: _mbNavigationType = 1;
pub const MB_NAVIGATION_TYPE_BACKFORWARD: _mbNavigationType = 2;
pub const MB_NAVIGATION_TYPE_RELOAD: _mbNavigationType = 3;
pub const MB_NAVIGATION_TYPE_FORMRESUBMITT: _mbNavigationType = 4;
pub const MB_NAVIGATION_TYPE_OTHER: _mbNavigationType = 5;
pub type _mbNavigationType = ::std::os::raw::c_int;
pub use self::_mbNavigationType as mbNavigationType;
pub const kMbCursorInfoPointer: _mbCursorInfoType = 0;
pub const kMbCursorInfoCross: _mbCursorInfoType = 1;
pub const kMbCursorInfoHand: _mbCursorInfoType = 2;
pub const kMbCursorInfoIBeam: _mbCursorInfoType = 3;
pub const kMbCursorInfoWait: _mbCursorInfoType = 4;
pub const kMbCursorInfoHelp: _mbCursorInfoType = 5;
pub const kMbCursorInfoEastResize: _mbCursorInfoType = 6;
pub const kMbCursorInfoNorthResize: _mbCursorInfoType = 7;
pub const kMbCursorInfoNorthEastResize: _mbCursorInfoType = 8;
pub const kMbCursorInfoNorthWestResize: _mbCursorInfoType = 9;
pub const kMbCursorInfoSouthResize: _mbCursorInfoType = 10;
pub const kMbCursorInfoSouthEastResize: _mbCursorInfoType = 11;
pub const kMbCursorInfoSouthWestResize: _mbCursorInfoType = 12;
pub const kMbCursorInfoWestResize: _mbCursorInfoType = 13;
pub const kMbCursorInfoNorthSouthResize: _mbCursorInfoType = 14;
pub const kMbCursorInfoEastWestResize: _mbCursorInfoType = 15;
pub const kMbCursorInfoNorthEastSouthWestResize: _mbCursorInfoType = 16;
pub const kMbCursorInfoNorthWestSouthEastResize: _mbCursorInfoType = 17;
pub const kMbCursorInfoColumnResize: _mbCursorInfoType = 18;
pub const kMbCursorInfoRowResize: _mbCursorInfoType = 19;
pub const kMbCursorInfoMiddlePanning: _mbCursorInfoType = 20;
pub const kMbCursorInfoEastPanning: _mbCursorInfoType = 21;
pub const kMbCursorInfoNorthPanning: _mbCursorInfoType = 22;
pub const kMbCursorInfoNorthEastPanning: _mbCursorInfoType = 23;
pub const kMbCursorInfoNorthWestPanning: _mbCursorInfoType = 24;
pub const kMbCursorInfoSouthPanning: _mbCursorInfoType = 25;
pub const kMbCursorInfoSouthEastPanning: _mbCursorInfoType = 26;
pub const kMbCursorInfoSouthWestPanning: _mbCursorInfoType = 27;
pub const kMbCursorInfoWestPanning: _mbCursorInfoType = 28;
pub const kMbCursorInfoMove: _mbCursorInfoType = 29;
pub const kMbCursorInfoVerticalText: _mbCursorInfoType = 30;
pub const kMbCursorInfoCell: _mbCursorInfoType = 31;
pub const kMbCursorInfoContextMenu: _mbCursorInfoType = 32;
pub const kMbCursorInfoAlias: _mbCursorInfoType = 33;
pub const kMbCursorInfoProgress: _mbCursorInfoType = 34;
pub const kMbCursorInfoNoDrop: _mbCursorInfoType = 35;
pub const kMbCursorInfoCopy: _mbCursorInfoType = 36;
pub const kMbCursorInfoNone: _mbCursorInfoType = 37;
pub const kMbCursorInfoNotAllowed: _mbCursorInfoType = 38;
pub const kMbCursorInfoZoomIn: _mbCursorInfoType = 39;
pub const kMbCursorInfoZoomOut: _mbCursorInfoType = 40;
pub const kMbCursorInfoGrab: _mbCursorInfoType = 41;
pub const kMbCursorInfoGrabbing: _mbCursorInfoType = 42;
pub const kMbCursorInfoCustom: _mbCursorInfoType = 43;
pub type _mbCursorInfoType = ::std::os::raw::c_int;
pub use self::_mbCursorInfoType as mbCursorInfoType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbWindowFeatures {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub menuBarVisible: BOOL,
    pub statusBarVisible: BOOL,
    pub toolBarVisible: BOOL,
    pub locationBarVisible: BOOL,
    pub scrollbarsVisible: BOOL,
    pub resizable: BOOL,
    pub fullscreen: BOOL,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPrintSettings {
    pub structSize: ::std::os::raw::c_int,
    pub dpi: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub marginTop: ::std::os::raw::c_int,
    pub marginBottom: ::std::os::raw::c_int,
    pub marginLeft: ::std::os::raw::c_int,
    pub marginRight: ::std::os::raw::c_int,
    pub isPrintPageHeadAndFooter: BOOL,
    pub isPrintBackgroud: BOOL,
    pub isLandscape: BOOL,
    pub isPrintToMultiPage: BOOL,
}
pub type mbPrintSettings = _mbPrintSettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbString {
    _unused: [u8; 0],
}
pub type mbStringPtr = *mut mbString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbMemBuf {
    pub unuse: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub length: usize,
}
pub type mbMemBuf = _mbMemBuf;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct mbWebDragData {
    pub __bindgen_padding_0: [u32; 12usize],
    pub m_itemList: *mut mbWebDragData_Item,
    pub m_itemListLength: ::std::os::raw::c_int,
    pub m_modifierKeyState: ::std::os::raw::c_int,
    pub m_filesystemId: *mut mbMemBuf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbWebDragData_Item {
    pub storageType: mbWebDragData_Item_mbStorageType,
    pub stringType: *mut mbMemBuf,
    pub stringData: *mut mbMemBuf,
    pub filenameData: *mut mbMemBuf,
    pub displayNameData: *mut mbMemBuf,
    pub binaryData: *mut mbMemBuf,
    pub title: *mut mbMemBuf,
    pub fileSystemURL: *mut mbMemBuf,
    pub fileSystemFileSize: ::std::os::raw::c_longlong,
    pub baseURL: *mut mbMemBuf,
}
pub const StorageTypeString: mbWebDragData_Item_mbStorageType = 0;
pub const StorageTypeFilename: mbWebDragData_Item_mbStorageType = 1;
pub const StorageTypeBinaryData: mbWebDragData_Item_mbStorageType = 2;
pub const StorageTypeFileSystemFile: mbWebDragData_Item_mbStorageType = 3;
pub type mbWebDragData_Item_mbStorageType = ::std::os::raw::c_int;
pub const mbWebDragOperationNone: mbWebDragOperation = 0;
pub const mbWebDragOperationCopy: mbWebDragOperation = 1;
pub const mbWebDragOperationLink: mbWebDragOperation = 2;
pub const mbWebDragOperationGeneric: mbWebDragOperation = 4;
pub const mbWebDragOperationPrivate: mbWebDragOperation = 8;
pub const mbWebDragOperationMove: mbWebDragOperation = 16;
pub const mbWebDragOperationDelete: mbWebDragOperation = 32;
pub const mbWebDragOperationEvery: mbWebDragOperation = -1;
pub type mbWebDragOperation = ::std::os::raw::c_int;
pub use self::mbWebDragOperation as mbWebDragOperationsMask;
pub const MB_RESOURCE_TYPE_MAIN_FRAME: mbResourceType = 0;
pub const MB_RESOURCE_TYPE_SUB_FRAME: mbResourceType = 1;
pub const MB_RESOURCE_TYPE_STYLESHEET: mbResourceType = 2;
pub const MB_RESOURCE_TYPE_SCRIPT: mbResourceType = 3;
pub const MB_RESOURCE_TYPE_IMAGE: mbResourceType = 4;
pub const MB_RESOURCE_TYPE_FONT_RESOURCE: mbResourceType = 5;
pub const MB_RESOURCE_TYPE_SUB_RESOURCE: mbResourceType = 6;
pub const MB_RESOURCE_TYPE_OBJECT: mbResourceType = 7;
pub const MB_RESOURCE_TYPE_MEDIA: mbResourceType = 8;
pub const MB_RESOURCE_TYPE_WORKER: mbResourceType = 9;
pub const MB_RESOURCE_TYPE_SHARED_WORKER: mbResourceType = 10;
pub const MB_RESOURCE_TYPE_PREFETCH: mbResourceType = 11;
pub const MB_RESOURCE_TYPE_FAVICON: mbResourceType = 12;
pub const MB_RESOURCE_TYPE_XHR: mbResourceType = 13;
pub const MB_RESOURCE_TYPE_PING: mbResourceType = 14;
pub const MB_RESOURCE_TYPE_SERVICE_WORKER: mbResourceType = 15;
pub const MB_RESOURCE_TYPE_LAST_TYPE: mbResourceType = 16;
pub type mbResourceType = ::std::os::raw::c_int;
pub const kMbRequestTypeInvalidation: _mbRequestType = 0;
pub const kMbRequestTypeGet: _mbRequestType = 1;
pub const kMbRequestTypePost: _mbRequestType = 2;
pub const kMbRequestTypePut: _mbRequestType = 3;
pub type _mbRequestType = ::std::os::raw::c_int;
pub use self::_mbRequestType as mbRequestType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbSlist {
    pub data: *mut ::std::os::raw::c_char,
    pub next: *mut _mbSlist,
}
pub type mbSlist = _mbSlist;
pub const kMbMenuSelectedAllId: _mbMenuItemId = 2;
pub const kMbMenuSelectedTextId: _mbMenuItemId = 4;
pub const kMbMenuUndoId: _mbMenuItemId = 8;
pub const kMbMenuCopyImageId: _mbMenuItemId = 16;
pub const kMbMenuInspectElementAtId: _mbMenuItemId = 32;
pub const kMbMenuCutId: _mbMenuItemId = 64;
pub const kMbMenuPasteId: _mbMenuItemId = 128;
pub const kMbMenuPrintId: _mbMenuItemId = 256;
pub const kMbMenuGoForwardId: _mbMenuItemId = 512;
pub const kMbMenuGoBackId: _mbMenuItemId = 1024;
pub const kMbMenuReloadId: _mbMenuItemId = 2048;
pub const kMbMenuSaveImageId: _mbMenuItemId = 4096;
pub type _mbMenuItemId = ::std::os::raw::c_int;
pub use self::_mbMenuItemId as mbMenuItemId;
pub type mbWebSocketChannel = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbWebsocketHookCallbacks {
    pub onWillConnect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            param: *mut ::std::os::raw::c_void,
            channel: mbWebSocketChannel,
            url: *const utf8,
            needHook: *mut BOOL,
        ) -> mbStringPtr,
    >,
    pub onConnected: ::std::option::Option<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            param: *mut ::std::os::raw::c_void,
            channel: mbWebSocketChannel,
        ) -> BOOL,
    >,
    pub onReceive: ::std::option::Option<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            param: *mut ::std::os::raw::c_void,
            channel: mbWebSocketChannel,
            opCode: ::std::os::raw::c_int,
            buf: *const ::std::os::raw::c_char,
            len: usize,
            isContinue: *mut BOOL,
        ) -> mbStringPtr,
    >,
    pub onSend: ::std::option::Option<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            param: *mut ::std::os::raw::c_void,
            channel: mbWebSocketChannel,
            opCode: ::std::os::raw::c_int,
            buf: *const ::std::os::raw::c_char,
            len: usize,
            isContinue: *mut BOOL,
        ) -> mbStringPtr,
    >,
    pub onError: ::std::option::Option<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            param: *mut ::std::os::raw::c_void,
            channel: mbWebSocketChannel,
        ),
    >,
}
pub type mbWebsocketHookCallbacks = _mbWebsocketHookCallbacks;
pub const kMbJsTypeNumber: _mbJsType = 0;
pub const kMbJsTypeString: _mbJsType = 1;
pub const kMbJsTypeBool: _mbJsType = 2;
pub const kMbJsTypeUndefined: _mbJsType = 5;
pub const kMbJsTypeNull: _mbJsType = 7;
pub const kMbJsTypeV8Value: _mbJsType = 8;
pub const kMbJsTypeFrame: _mbJsType = 9;
pub type _mbJsType = ::std::os::raw::c_int;
pub use self::_mbJsType as mbJsType;
pub const kMbImageFormatPng: _mbImageFormat = 0;
pub const kMbImageFormatJpg: _mbImageFormat = 1;
pub const kMbImageFormatBmp: _mbImageFormat = 2;
pub type _mbImageFormat = ::std::os::raw::c_int;
pub use self::_mbImageFormat as mbImageFormat;
pub type mbJsValue = ::std::os::raw::c_longlong;
pub type mbJsExecState = *mut ::std::os::raw::c_void;
pub type mbOnGetPdfPageDataCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ),
>;
pub type mbRunJsCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        es: mbJsExecState,
        v: mbJsValue,
    ),
>;
pub type mbJsQueryCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        es: mbJsExecState,
        queryId: i64,
        customMsg: ::std::os::raw::c_int,
        request: *const utf8,
    ),
>;
pub type mbJsQueryExCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        es: mbJsExecState,
        val: *const mbJsValue,
        count: ::std::os::raw::c_int,
    ),
>;
pub type mbTitleChangedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        title: *const utf8,
    ),
>;
pub type mbMouseOverUrlChangedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
    ),
>;
pub type mbURLChangedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        canGoBack: BOOL,
        canGoForward: BOOL,
    ),
>;
pub type mbURLChangedCallback2 = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
        url: *const utf8,
    ),
>;
pub type mbPaintUpdatedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ),
>;
pub type mbAcceleratedPaintCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        dirytRects: *const mbRect,
        dirytRectsSize: usize,
        sharedHandle: *mut ::std::os::raw::c_void,
    ),
>;
pub type mbPaintBitUpdatedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        r: *const mbRect,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type mbAlertBoxCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        msg: *const utf8,
    ),
>;
pub type mbConfirmBoxCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        msg: *const utf8,
    ) -> BOOL,
>;
pub type mbPromptBoxCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        msg: *const utf8,
        defaultResult: *const utf8,
        result: *mut BOOL,
    ) -> mbStringPtr,
>;
pub type mbNavigationCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        navigationType: mbNavigationType,
        url: *const utf8,
    ) -> BOOL,
>;
pub type mbCreateViewCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        navigationType: mbNavigationType,
        url: *const utf8,
        windowFeatures: *const mbWindowFeatures,
    ) -> mbWebView,
>;
pub type mbDocumentReadyCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
    ),
>;
pub type mbLoadUrlFinishCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: mbNetJob,
        len: ::std::os::raw::c_int,
    ),
>;
pub type mbLoadUrlHeadersReceivedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
        job: mbNetJob,
    ),
>;
pub type mbCloseCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        unuse: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type mbDestroyCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        unuse: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type mbOnShowDevtoolsCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(webView: mbWebView, param: *mut ::std::os::raw::c_void),
>;
pub type mbDidCreateScriptContextCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
        context: *mut ::std::os::raw::c_void,
        extensionGroup: ::std::os::raw::c_int,
        worldId: ::std::os::raw::c_int,
    ),
>;
pub type mbGetPluginListCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        refresh: BOOL,
        pluginListBuilder: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type mbNetResponseCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: mbNetJob,
    ) -> BOOL,
>;
pub type mbThreadCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ),
>;
pub type mbNodeOnCreateProcessCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        applicationPath: *const WCHAR,
        arguments: *const WCHAR,
        startup: *mut STARTUPINFOW,
    ),
>;
pub const MB_LOADING_SUCCEEDED: mbLoadingResult = 0;
pub const MB_LOADING_FAILED: mbLoadingResult = 1;
pub const MB_LOADING_CANCELED: mbLoadingResult = 2;
pub type mbLoadingResult = ::std::os::raw::c_int;
pub type mbLoadingFinishCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
        url: *const utf8,
        result: mbLoadingResult,
        failedReason: *const utf8,
    ),
>;
pub type mbDownloadCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
        url: *const ::std::os::raw::c_char,
        downloadJob: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub const mbLevelDebug: mbConsoleLevel = 4;
pub const mbLevelLog: mbConsoleLevel = 1;
pub const mbLevelInfo: mbConsoleLevel = 5;
pub const mbLevelWarning: mbConsoleLevel = 2;
pub const mbLevelError: mbConsoleLevel = 3;
pub const mbLevelRevokedError: mbConsoleLevel = 6;
pub const mbLevelLast: mbConsoleLevel = 6;
pub type mbConsoleLevel = ::std::os::raw::c_int;
pub type mbConsoleCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        level: mbConsoleLevel,
        message: *const utf8,
        sourceName: *const utf8,
        sourceLine: ::std::os::raw::c_uint,
        stackTrace: *const utf8,
    ),
>;
pub type mbOnCallUiThread = ::std::option::Option<
    unsafe extern "stdcall" fn(webView: mbWebView, paramOnInThread: *mut ::std::os::raw::c_void),
>;
pub type mbCallUiThread = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        func: mbOnCallUiThread,
        param: *mut ::std::os::raw::c_void,
    ),
>;
pub type mbLoadUrlBeginCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
        job: *mut ::std::os::raw::c_void,
    ) -> BOOL,
>;
pub type mbLoadUrlEndCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
        job: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ),
>;
pub type mbLoadUrlFailCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
        job: *mut ::std::os::raw::c_void,
    ),
>;
pub type mbWillReleaseScriptContextCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
        context: *mut ::std::os::raw::c_void,
        worldId: ::std::os::raw::c_int,
    ),
>;
pub type mbNetGetFaviconCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        buf: *mut mbMemBuf,
    ),
>;
pub const kMbAsynRequestStateOk: _MbAsynRequestState = 0;
pub const kMbAsynRequestStateFail: _MbAsynRequestState = 1;
pub type _MbAsynRequestState = ::std::os::raw::c_int;
pub use self::_MbAsynRequestState as MbAsynRequestState;
pub type mbCanGoBackForwardCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        state: MbAsynRequestState,
        b: BOOL,
    ),
>;
pub type mbGetCookieCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        state: MbAsynRequestState,
        cookie: *const utf8,
    ),
>;
pub type v8ContextPtr = *mut ::std::os::raw::c_void;
pub type v8Isolate = *mut ::std::os::raw::c_void;
pub type mbGetSourceCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        mhtml: *const utf8,
    ),
>;
pub type mbGetContentAsMarkupCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        content: *const utf8,
        size: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbWebUrlRequest {
    _unused: [u8; 0],
}
pub type mbWebUrlRequestPtr = *mut mbWebUrlRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbWebUrlResponse {
    _unused: [u8; 0],
}
pub type mbWebUrlResponsePtr = *mut mbWebUrlResponse;
pub type mbOnUrlRequestWillRedirectCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        oldRequest: mbWebUrlRequestPtr,
        request: mbWebUrlRequestPtr,
        redirectResponse: mbWebUrlResponsePtr,
    ),
>;
pub type mbOnUrlRequestDidReceiveResponseCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        request: mbWebUrlRequestPtr,
        response: mbWebUrlResponsePtr,
    ),
>;
pub type mbOnUrlRequestDidReceiveDataCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        request: mbWebUrlRequestPtr,
        data: *const ::std::os::raw::c_char,
        dataLength: ::std::os::raw::c_int,
    ),
>;
pub type mbOnUrlRequestDidFailCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        request: mbWebUrlRequestPtr,
        error: *const utf8,
    ),
>;
pub type mbOnUrlRequestDidFinishLoadingCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        request: mbWebUrlRequestPtr,
        finishTime: f64,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbUrlRequestCallbacks {
    pub willRedirectCallback: mbOnUrlRequestWillRedirectCallback,
    pub didReceiveResponseCallback: mbOnUrlRequestDidReceiveResponseCallback,
    pub didReceiveDataCallback: mbOnUrlRequestDidReceiveDataCallback,
    pub didFailCallback: mbOnUrlRequestDidFailCallback,
    pub didFinishLoadingCallback: mbOnUrlRequestDidFinishLoadingCallback,
}
pub type mbUrlRequestCallbacks = _mbUrlRequestCallbacks;
pub const kMbDownloadOptCancel: _mbDownloadOpt = 0;
pub const kMbDownloadOptCacheData: _mbDownloadOpt = 1;
pub type _mbDownloadOpt = ::std::os::raw::c_int;
pub use self::_mbDownloadOpt as mbDownloadOpt;
pub type mbNetJobDataRecvCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        ptr: *mut ::std::os::raw::c_void,
        job: mbNetJob,
        data: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ),
>;
pub type mbNetJobDataFinishCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        ptr: *mut ::std::os::raw::c_void,
        job: mbNetJob,
        result: mbLoadingResult,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbNetJobDataBind {
    pub param: *mut ::std::os::raw::c_void,
    pub recvCallback: mbNetJobDataRecvCallback,
    pub finishCallback: mbNetJobDataFinishCallback,
}
pub type mbNetJobDataBind = _mbNetJobDataBind;
pub type mbPopupDialogSaveNameCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(ptr: *mut ::std::os::raw::c_void, filePath: *const WCHAR),
>;
pub type mbNetBeginSaveCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        ptr: *mut ::std::os::raw::c_void,
        filePath: *const ::std::os::raw::c_char,
        isPathExists: bool,
    ) -> mbStringPtr,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbDownloadBind {
    pub param: *mut ::std::os::raw::c_void,
    pub recvCallback: mbNetJobDataRecvCallback,
    pub finishCallback: mbNetJobDataFinishCallback,
    pub saveNameCallback: mbPopupDialogSaveNameCallback,
    pub beginSaveCallback: mbNetBeginSaveCallback,
}
pub type mbDownloadBind = _mbDownloadBind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbFileFilter {
    pub name: *const utf8,
    pub extensions: *const utf8,
}
pub type mbFileFilter = _mbFileFilter;
pub const kMbDialogPropertiesOpenFile: _mbDialogProperties = 2;
pub const kMbDialogPropertiesOpenDirectory: _mbDialogProperties = 4;
pub const kMbDialogPropertiesMultiSelections: _mbDialogProperties = 8;
pub const kMbDialogPropertiesShowHiddenFiles: _mbDialogProperties = 16;
pub const kMbDialogPropertiesCreateDirectory: _mbDialogProperties = 32;
pub const kMbDialogPropertiesPromptToCreate: _mbDialogProperties = 64;
pub const kMbDialogPropertiesNoResolveAliases: _mbDialogProperties = 128;
pub const kMbDialogPropertiesTreatPackageAsDirectory: _mbDialogProperties = 256;
pub const kMbDialogPropertiesDontAddToRecent: _mbDialogProperties = 512;
pub type _mbDialogProperties = ::std::os::raw::c_int;
pub use self::_mbDialogProperties as mbDialogProperties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbDialogOptions {
    pub magic: ::std::os::raw::c_int,
    pub title: *const utf8,
    pub defaultPath: *const utf8,
    pub buttonLabel: *const utf8,
    pub filters: *mut mbFileFilter,
    pub filtersCount: ::std::os::raw::c_int,
    pub prop: mbDialogProperties,
    pub message: *const utf8,
    pub securityScopedBookmarks: BOOL,
}
pub type mbDialogOptions = _mbDialogOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbDownloadOptions {
    pub magic: ::std::os::raw::c_int,
    pub saveAsPathAndName: BOOL,
}
pub type mbDownloadOptions = _mbDownloadOptions;
pub type mbDownloadInBlinkThreadCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: mbNetJob,
        dataBind: *mut mbNetJobDataBind,
    ) -> mbDownloadOpt,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPdfDatas {
    pub count: ::std::os::raw::c_int,
    pub sizes: *mut usize,
    pub datas: *mut *const ::std::os::raw::c_void,
}
pub type mbPdfDatas = _mbPdfDatas;
pub type mbPrintPdfDataCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webview: mbWebView,
        param: *mut ::std::os::raw::c_void,
        datas: *const mbPdfDatas,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbScreenshotSettings {
    pub structSize: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type mbScreenshotSettings = _mbScreenshotSettings;
pub type mbPrintBitmapCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webview: mbWebView,
        param: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_char,
        size: usize,
    ),
>;
pub type mbOnScreenshot = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_char,
        size: usize,
    ),
>;
pub const mbHttBodyElementTypeData: _mbHttBodyElementType = 0;
pub const mbHttBodyElementTypeFile: _mbHttBodyElementType = 1;
pub type _mbHttBodyElementType = ::std::os::raw::c_int;
pub use self::_mbHttBodyElementType as mbHttBodyElementType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPostBodyElement {
    pub size: ::std::os::raw::c_int,
    pub type_: mbHttBodyElementType,
    pub data: *mut mbMemBuf,
    pub filePath: mbStringPtr,
    pub fileStart: ::std::os::raw::c_longlong,
    pub fileLength: ::std::os::raw::c_longlong,
}
pub type mbPostBodyElement = _mbPostBodyElement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPostBodyElements {
    pub size: ::std::os::raw::c_int,
    pub element: *mut *mut mbPostBodyElement,
    pub elementSize: usize,
    pub isDirty: bool,
}
pub type mbPostBodyElements = _mbPostBodyElements;
pub const MB_WINDOW_TYPE_POPUP: _mbWindowType = 0;
pub const MB_WINDOW_TYPE_TRANSPARENT: _mbWindowType = 1;
pub const MB_WINDOW_TYPE_CONTROL: _mbWindowType = 2;
pub type _mbWindowType = ::std::os::raw::c_int;
pub use self::_mbWindowType as mbWindowType;
pub const MB_WINDOW_INFO_SHARTD_TEXTURE_ENABLE: _mbWindowInfo = 65536;
pub type _mbWindowInfo = ::std::os::raw::c_int;
pub use self::_mbWindowInfo as mbWindowInfo;
pub type mbWindowClosingCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(webview: mbWebView, param: *mut ::std::os::raw::c_void) -> BOOL,
>;
pub type mbWindowDestroyCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(webview: mbWebView, param: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbDraggableRegion {
    pub bounds: RECT,
    pub draggable: BOOL,
}
pub type mbDraggableRegion = _mbDraggableRegion;
pub type mbDraggableRegionsChangedCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webview: mbWebView,
        param: *mut ::std::os::raw::c_void,
        rects: *const mbDraggableRegion,
        rectCount: ::std::os::raw::c_int,
    ),
>;
pub const kPrintintStepStart: _mbPrintintStep = 0;
pub const kPrintintStepPreview: _mbPrintintStep = 1;
pub const kPrintintStepPrinting: _mbPrintintStep = 2;
pub type _mbPrintintStep = ::std::os::raw::c_int;
pub use self::_mbPrintintStep as mbPrintintStep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbPrintintSettings {
    pub dpi: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub scale: f32,
}
pub type mbPrintintSettings = _mbPrintintSettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbDefaultPrinterSettings {
    pub structSize: ::std::os::raw::c_int,
    pub isLandscape: BOOL,
    pub isPrintHeadFooter: BOOL,
    pub isPrintBackgroud: BOOL,
    pub edgeDistanceLeft: ::std::os::raw::c_int,
    pub edgeDistanceTop: ::std::os::raw::c_int,
    pub edgeDistanceRight: ::std::os::raw::c_int,
    pub edgeDistanceBottom: ::std::os::raw::c_int,
    pub copies: ::std::os::raw::c_int,
    pub paperType: ::std::os::raw::c_int,
}
pub type mbDefaultPrinterSettings = _mbDefaultPrinterSettings;
pub type mbPrintingCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webview: mbWebView,
        param: *mut ::std::os::raw::c_void,
        step: mbPrintintStep,
        hDC: HDC,
        settings: *const mbPrintintSettings,
        pageCount: ::std::os::raw::c_int,
    ) -> BOOL,
>;
pub type mbImageBufferToDataURLCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_char,
        size: usize,
    ) -> mbStringPtr,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbWillSendRequestInfo {
    pub url: mbStringPtr,
    pub newUrl: mbStringPtr,
    pub resourceType: mbResourceType,
    pub httpResponseCode: ::std::os::raw::c_int,
    pub method: mbStringPtr,
    pub referrer: mbStringPtr,
    pub headers: *mut ::std::os::raw::c_void,
}
pub type mbWillSendRequestInfo = _mbWillSendRequestInfo;
pub const MB_DID_START_LOADING: _mbViewLoadType = 0;
pub const MB_DID_STOP_LOADING: _mbViewLoadType = 1;
pub const MB_DID_NAVIGATE: _mbViewLoadType = 2;
pub const MB_DID_NAVIGATE_IN_PAGE: _mbViewLoadType = 3;
pub const MB_DID_GET_RESPONSE_DETAILS: _mbViewLoadType = 4;
pub const MB_DID_GET_REDIRECT_REQUEST: _mbViewLoadType = 5;
pub const MB_DID_POST_REQUEST: _mbViewLoadType = 6;
pub type _mbViewLoadType = ::std::os::raw::c_int;
pub use self::_mbViewLoadType as mbViewLoadType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mbViewLoadCallbackInfo {
    pub size: ::std::os::raw::c_int,
    pub frame: mbWebFrameHandle,
    pub willSendRequestInfo: *mut mbWillSendRequestInfo,
    pub url: *const ::std::os::raw::c_char,
    pub postBody: *mut mbPostBodyElements,
    pub job: mbNetJob,
}
pub type mbViewLoadCallbackInfo = _mbViewLoadCallbackInfo;
pub type mbNetViewLoadInfoCallback = ::std::option::Option<
    unsafe extern "stdcall" fn(
        webView: mbWebView,
        param: *mut ::std::os::raw::c_void,
        type_: mbViewLoadType,
        info: *mut mbViewLoadCallbackInfo,
    ),
>;
pub struct Library {
    __library: ::libloading::Library,
    pub mblen: Result<
        unsafe extern "C" fn(
            _Ch: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            _DstCh: *mut wchar_t,
            _SrcCh: *const ::std::os::raw::c_char,
            _SrcSizeInBytes: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs_s: Result<
        unsafe extern "C" fn(
            _PtNumOfCharConverted: *mut usize,
            _DstBuf: *mut wchar_t,
            _SizeInWords: usize,
            _SrcBuf: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> errno_t,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            _Dest: *mut wchar_t,
            _Source: *const ::std::os::raw::c_char,
            _MaxCount: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub mbInit:
        Result<unsafe extern "stdcall" fn(settings: *const mbSettings), ::libloading::Error>,
    pub mbUninit: Result<unsafe extern "stdcall" fn(), ::libloading::Error>,
    pub mbCreateInitSettings:
        Result<unsafe extern "stdcall" fn() -> *mut mbSettings, ::libloading::Error>,
    pub mbSetInitSettings: Result<
        unsafe extern "stdcall" fn(
            settings: *mut mbSettings,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mbCreateWebView: Result<unsafe extern "stdcall" fn() -> mbWebView, ::libloading::Error>,
    pub mbCreateWebViewBindGtkWindow: Result<
        unsafe extern "stdcall" fn(
            rootWindow: *mut ::std::os::raw::c_void,
            drawingArea: *mut ::std::os::raw::c_void,
            type_: *const ::std::os::raw::c_char,
            style: DWORD,
            styleEx: DWORD,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> mbWebView,
        ::libloading::Error,
    >,
    pub mbDestroyWebView: Result<unsafe extern "stdcall" fn(arg1: mbWebView), ::libloading::Error>,
    pub mbCreateWebWindow: Result<
        unsafe extern "stdcall" fn(
            type_: mbWindowType,
            parent: HWND,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> mbWebView,
        ::libloading::Error,
    >,
    pub mbCreateWebWindowEx: Result<
        unsafe extern "stdcall" fn(
            type_: mbWindowType,
            parent: HWND,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            settings: *const mbViewSettings,
        ) -> mbWebView,
        ::libloading::Error,
    >,
    pub mbCreateWebCustomWindow: Result<
        unsafe extern "stdcall" fn(
            parent: HWND,
            style: DWORD,
            styleEx: DWORD,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> mbWebView,
        ::libloading::Error,
    >,
    pub mbMoveWindow: Result<
        unsafe extern "stdcall" fn(
            webview: mbWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mbMoveToCenter: Result<unsafe extern "stdcall" fn(webview: mbWebView), ::libloading::Error>,
    pub mbSetAutoDrawToHwnd:
        Result<unsafe extern "stdcall" fn(webview: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbGetCaretRect: Result<
        unsafe extern "stdcall" fn(webviewHandle: mbWebView, r: *mut mbRect),
        ::libloading::Error,
    >,
    pub mbSetAudioMuted:
        Result<unsafe extern "stdcall" fn(webview: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbIsAudioMuted:
        Result<unsafe extern "stdcall" fn(webview: mbWebView) -> BOOL, ::libloading::Error>,
    pub mbCreateString: Result<
        unsafe extern "stdcall" fn(str_: *const utf8, length: usize) -> mbStringPtr,
        ::libloading::Error,
    >,
    pub mbCreateStringWithCopy: Result<
        unsafe extern "stdcall" fn(str_: *const utf8, length: usize) -> mbStringPtr,
        ::libloading::Error,
    >,
    pub mbCreateStringWithoutNullTermination: Result<
        unsafe extern "stdcall" fn(str_: *const utf8, length: usize) -> mbStringPtr,
        ::libloading::Error,
    >,
    pub mbDeleteString: Result<unsafe extern "stdcall" fn(str_: mbStringPtr), ::libloading::Error>,
    pub mbGetStringLen:
        Result<unsafe extern "stdcall" fn(str_: mbStringPtr) -> usize, ::libloading::Error>,
    pub mbGetString:
        Result<unsafe extern "stdcall" fn(str_: mbStringPtr) -> *const utf8, ::libloading::Error>,
    pub mbSetProxy: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, proxy: *const mbProxy),
        ::libloading::Error,
    >,
    pub mbSetDebugConfig: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            debugString: *const ::std::os::raw::c_char,
            param: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mbNetSetData: Result<
        unsafe extern "stdcall" fn(
            jobPtr: mbNetJob,
            buf: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mbNetHookRequest: Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob), ::libloading::Error>,
    pub mbNetChangeRequestUrl: Result<
        unsafe extern "stdcall" fn(jobPtr: mbNetJob, url: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mbNetContinueJob: Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob), ::libloading::Error>,
    pub mbNetGetRawHttpHeadInBlinkThread:
        Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> *const mbSlist, ::libloading::Error>,
    pub mbNetGetRawResponseHeadInBlinkThread:
        Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> *const mbSlist, ::libloading::Error>,
    pub mbNetHoldJobToAsynCommit:
        Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob), ::libloading::Error>,
    pub mbNetCancelRequest:
        Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob), ::libloading::Error>,
    pub mbNetOnResponse: Result<
        unsafe extern "stdcall" fn(
            webviewHandle: mbWebView,
            callback: mbNetResponseCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbNetSetWebsocketCallback: Result<
        unsafe extern "stdcall" fn(
            webview: mbWebView,
            callbacks: *const mbWebsocketHookCallbacks,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbNetSendWsText: Result<
        unsafe extern "stdcall" fn(
            channel: mbWebSocketChannel,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ),
        ::libloading::Error,
    >,
    pub mbNetSendWsBlob: Result<
        unsafe extern "stdcall" fn(
            channel: mbWebSocketChannel,
            buf: *const ::std::os::raw::c_char,
            len: usize,
        ),
        ::libloading::Error,
    >,
    pub mbNetEnableResPacket: Result<
        unsafe extern "stdcall" fn(webviewHandle: mbWebView, pathName: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbNetGetPostBody: Result<
        unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> *mut mbPostBodyElements,
        ::libloading::Error,
    >,
    pub mbNetCreatePostBodyElements: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, length: usize) -> *mut mbPostBodyElements,
        ::libloading::Error,
    >,
    pub mbNetFreePostBodyElements:
        Result<unsafe extern "stdcall" fn(elements: *mut mbPostBodyElements), ::libloading::Error>,
    pub mbNetCreatePostBodyElement: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> *mut mbPostBodyElement,
        ::libloading::Error,
    >,
    pub mbNetFreePostBodyElement:
        Result<unsafe extern "stdcall" fn(element: *mut mbPostBodyElement), ::libloading::Error>,
    pub mbNetCreateWebUrlRequest: Result<
        unsafe extern "stdcall" fn(
            url: *const utf8,
            method: *const utf8,
            mime: *const utf8,
        ) -> mbWebUrlRequestPtr,
        ::libloading::Error,
    >,
    pub mbNetAddHTTPHeaderFieldToUrlRequest: Result<
        unsafe extern "stdcall" fn(
            request: mbWebUrlRequestPtr,
            name: *const utf8,
            value: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbNetStartUrlRequest: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            request: mbWebUrlRequestPtr,
            param: *mut ::std::os::raw::c_void,
            callbacks: *const mbUrlRequestCallbacks,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbNetGetHttpStatusCode: Result<
        unsafe extern "stdcall" fn(response: mbWebUrlResponsePtr) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbNetGetRequestMethod:
        Result<unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> mbRequestType, ::libloading::Error>,
    pub mbNetGetExpectedContentLength: Result<
        unsafe extern "stdcall" fn(response: mbWebUrlResponsePtr) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub mbNetGetResponseUrl: Result<
        unsafe extern "stdcall" fn(response: mbWebUrlResponsePtr) -> *const utf8,
        ::libloading::Error,
    >,
    pub mbNetCancelWebUrlRequest:
        Result<unsafe extern "stdcall" fn(requestId: ::std::os::raw::c_int), ::libloading::Error>,
    pub mbSetViewProxy: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, proxy: *const mbProxy),
        ::libloading::Error,
    >,
    pub mbNetSetMIMEType: Result<
        unsafe extern "stdcall" fn(jobPtr: mbNetJob, type_: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mbNetGetMIMEType: Result<
        unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mbNetGetHTTPHeaderField: Result<
        unsafe extern "stdcall" fn(
            job: mbNetJob,
            key: *const ::std::os::raw::c_char,
            fromRequestOrResponse: BOOL,
        ) -> *const utf8,
        ::libloading::Error,
    >,
    pub mbNetSetHTTPHeaderField: Result<
        unsafe extern "stdcall" fn(
            jobPtr: mbNetJob,
            key: *const WCHAR,
            value: *const WCHAR,
            response: BOOL,
        ),
        ::libloading::Error,
    >,
    pub mbNetSetHTTPHeaderFieldUtf8: Result<
        unsafe extern "stdcall" fn(
            jobPtr: mbNetJob,
            key: *const utf8,
            value: *const utf8,
            response: BOOL,
        ),
        ::libloading::Error,
    >,
    pub mbSetMouseEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetTouchEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetSystemTouchEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetContextMenuEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetNavigationToNewWindowEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetHeadlessEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetDragDropEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetDragEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetContextMenuItemShow: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, item: mbMenuItemId, isShow: BOOL),
        ::libloading::Error,
    >,
    pub mbSetHandle:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, wnd: HWND), ::libloading::Error>,
    pub mbSetHandleOffset: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mbGetPlatformWindowHandle: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub mbGetHostHWND:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> HWND, ::libloading::Error>,
    pub mbSetTransparent: Result<
        unsafe extern "stdcall" fn(webviewHandle: mbWebView, transparent: BOOL),
        ::libloading::Error,
    >,
    pub mbSetViewSettings: Result<
        unsafe extern "stdcall" fn(webviewHandle: mbWebView, settings: *const mbViewSettings),
        ::libloading::Error,
    >,
    pub mbSetCspCheckEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetNpapiPluginsEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetMemoryCacheEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetCookie: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, url: *const utf8, cookie: *const utf8),
        ::libloading::Error,
    >,
    pub mbSetCookieEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, enable: BOOL), ::libloading::Error>,
    pub mbSetCookieJarPath: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, path: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbSetCookieJarFullPath: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, path: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbSetLocalStorageFullPath: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, path: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbGetTitle:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> *const utf8, ::libloading::Error>,
    pub mbSetWindowTitle: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, title: *const utf8),
        ::libloading::Error,
    >,
    pub mbSetWindowTitleW: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, title: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbGetUrl:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> *const utf8, ::libloading::Error>,
    pub mbGetCursorInfoType: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbAddPluginDirectory: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, path: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbSetUserAgent: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, userAgent: *const utf8),
        ::libloading::Error,
    >,
    pub mbSetZoomFactor:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, factor: f32), ::libloading::Error>,
    pub mbGetZoomFactor:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> f32, ::libloading::Error>,
    pub mbSetDiskCacheEnabled:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, enable: BOOL), ::libloading::Error>,
    pub mbSetDiskCachePath: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, path: *const WCHAR),
        ::libloading::Error,
    >,
    pub mbSetDiskCacheLimit:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, limit: usize), ::libloading::Error>,
    pub mbSetDiskCacheLimitDisk:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, limit: usize), ::libloading::Error>,
    pub mbSetDiskCacheLevel: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, Level: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbSetResourceGc: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, intervalSec: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbIsLoading:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> BOOL, ::libloading::Error>,
    pub mbCanGoBackOrForward: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, isGoBack: BOOL) -> BOOL,
        ::libloading::Error,
    >,
    pub mbCanGoBack: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbCanGoBackForwardCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCanGoForward: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbCanGoBackForwardCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGetCookie: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbGetCookieCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGetCookieOnBlinkThread:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> *const utf8, ::libloading::Error>,
    pub mbClearCookie: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbResize: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mbGetSize: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, rc: *mut mbRect),
        ::libloading::Error,
    >,
    pub mbGetWindowRect: Result<
        unsafe extern "stdcall" fn(webview: mbWebView, rc: *mut mbRect) -> BOOL,
        ::libloading::Error,
    >,
    pub mbOnNavigation: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbNavigationCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnNavigationSync: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbNavigationCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnCreateView: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbCreateViewCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnDocumentReady: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDocumentReadyCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnPaintUpdated: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbPaintUpdatedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnPaintBitUpdated: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbPaintBitUpdatedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnAcceleratedPaint: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbAcceleratedPaintCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnLoadUrlBegin: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadUrlBeginCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnLoadUrlEnd: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadUrlEndCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnLoadUrlFail: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadUrlFailCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnTitleChanged: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbTitleChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnURLChanged: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbURLChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnLoadingFinish: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadingFinishCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnDownload: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDownloadCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnDownloadInBlinkThread: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDownloadInBlinkThreadCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnAlertBox: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbAlertBoxCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnConfirmBox: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbConfirmBoxCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnPromptBox: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbPromptBoxCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnNetGetFavicon: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbNetGetFaviconCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnConsole: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbConsoleCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnClose: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbCloseCallback,
            param: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbOnDestroy: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDestroyCallback,
            param: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbOnPrinting: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbPrintingCallback,
            param: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbOnDidCreateScriptContext: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDidCreateScriptContextCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnWillReleaseScriptContext: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbWillReleaseScriptContextCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnPluginList: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbGetPluginListCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnImageBufferToDataURL: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbImageBufferToDataURLCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGoBack: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbGoForward: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbNavigateAtIndex: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, index: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbGetNavigateIndex: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbStopLoading: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbReload: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbPerformCookieCommand: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, command: mbCookieCommand),
        ::libloading::Error,
    >,
    pub mbEditorSelectAll:
        Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorCopy: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorCut: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorPaste: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorDelete: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorUndo: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbFireMouseEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            message: ::std::os::raw::c_uint,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireContextMenuEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireMouseWheelEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            delta: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireKeyUpEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: BOOL,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireKeyDownEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: BOOL,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireKeyPressEvent: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            charCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: BOOL,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbFireWindowsMessage: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            hWnd: HWND,
            message: UINT,
            wParam: WPARAM,
            lParam: LPARAM,
            result: *mut LRESULT,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbSetFocus: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbKillFocus: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbShowWindow: Result<
        unsafe extern "stdcall" fn(webview: mbWebView, show: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbLoadURL: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, url: *const utf8),
        ::libloading::Error,
    >,
    pub mbLoadHtmlWithBaseUrl: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, html: *const utf8, baseUrl: *const utf8),
        ::libloading::Error,
    >,
    pub mbPostURL: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            url: *const utf8,
            postData: *const ::std::os::raw::c_char,
            postLen: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mbGetLockedViewDC:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> HDC, ::libloading::Error>,
    pub mbUnlockViewDC: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbWake: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbJsToDouble: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> f64,
        ::libloading::Error,
    >,
    pub mbJsToBoolean: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> BOOL,
        ::libloading::Error,
    >,
    pub mbJsToString: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> *const utf8,
        ::libloading::Error,
    >,
    pub mbJsToWebFrameHandle: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> mbWebFrameHandle,
        ::libloading::Error,
    >,
    pub mbGetParentWebFrameHandle: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, frame: mbWebFrameHandle) -> mbWebFrameHandle,
        ::libloading::Error,
    >,
    pub mbGetJsValueType: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> mbJsType,
        ::libloading::Error,
    >,
    pub mbJsValueAddRef:
        Result<unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue), ::libloading::Error>,
    pub mbJsValueDeref:
        Result<unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue), ::libloading::Error>,
    pub mbOnJsQuery: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbJsQueryCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnJsQueryEx: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbJsQueryExCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbResponseQuery: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            queryId: i64,
            customMsg: ::std::os::raw::c_int,
            response: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbRunJs: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            script: *const utf8,
            isInClosure: BOOL,
            callback: mbRunJsCallback,
            param: *mut ::std::os::raw::c_void,
            unuse: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbRunJsSync: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            script: *const utf8,
            isInClosure: BOOL,
        ) -> mbJsValue,
        ::libloading::Error,
    >,
    pub mbWebFrameGetMainFrame: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> mbWebFrameHandle,
        ::libloading::Error,
    >,
    pub mbIsMainFrame: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, frameId: mbWebFrameHandle) -> BOOL,
        ::libloading::Error,
    >,
    pub mbSetNodeJsEnable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, b: BOOL), ::libloading::Error>,
    pub mbSetDeviceParameter: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            device: *const ::std::os::raw::c_char,
            paramStr: *const ::std::os::raw::c_char,
            paramInt: ::std::os::raw::c_int,
            paramFloat: f32,
        ),
        ::libloading::Error,
    >,
    pub mbGetContentAsMarkup: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            calback: mbGetContentAsMarkupCallback,
            param: *mut ::std::os::raw::c_void,
            frameId: mbWebFrameHandle,
        ),
        ::libloading::Error,
    >,
    pub mbGetSource: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            calback: mbGetSourceCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGetWindowScreenshotSync: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, format: mbImageFormat) -> *mut mbMemBuf,
        ::libloading::Error,
    >,
    pub mbGetSourceSync:
        Result<unsafe extern "stdcall" fn(webView: mbWebView) -> mbStringPtr, ::libloading::Error>,
    pub mbUtilSerializeToMHTML: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            calback: mbGetSourceCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbUtilCreateRequestCode: Result<
        unsafe extern "stdcall" fn(
            registerInfo: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mbUtilIsRegistered:
        Result<unsafe extern "stdcall" fn(defaultPath: *const WCHAR) -> BOOL, ::libloading::Error>,
    pub mbUtilPrint: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            printParams: *const mbPrintSettings,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbUtilBase64Encode:
        Result<unsafe extern "stdcall" fn(str_: *const utf8) -> *const utf8, ::libloading::Error>,
    pub mbUtilBase64EncodeBuffer: Result<
        unsafe extern "stdcall" fn(
            str_: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ) -> *mut mbMemBuf,
        ::libloading::Error,
    >,
    pub mbUtilBase64Decode:
        Result<unsafe extern "stdcall" fn(str_: *const utf8) -> *const utf8, ::libloading::Error>,
    pub mbUtilDecodeURLEscape:
        Result<unsafe extern "stdcall" fn(url: *const utf8) -> *const utf8, ::libloading::Error>,
    pub mbUtilEncodeURLEscape:
        Result<unsafe extern "stdcall" fn(url: *const utf8) -> *const utf8, ::libloading::Error>,
    pub mbUtilCreateV8Snapshot: Result<
        unsafe extern "stdcall" fn(str_: *const utf8) -> *const mbMemBuf,
        ::libloading::Error,
    >,
    pub mbUtilPrintToPdf: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            settings: *const mbPrintSettings,
            callback: mbPrintPdfDataCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbUtilPrintToBitmap: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            settings: *const mbScreenshotSettings,
            callback: mbPrintBitmapCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbUtilScreenshot: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            settings: *const mbScreenshotSettings,
            callback: mbOnScreenshot,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbUtilsSilentPrint: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            settings: *const ::std::os::raw::c_char,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbPopupDownloadMgr: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            url: *const ::std::os::raw::c_char,
            downloadJob: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbPopupDialogAndDownload: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            dialogOpt: *const mbDialogOptions,
            contentLength: usize,
            url: *const ::std::os::raw::c_char,
            mime: *const ::std::os::raw::c_char,
            disposition: *const ::std::os::raw::c_char,
            job: mbNetJob,
            dataBind: *mut mbNetJobDataBind,
            callbackBind: *mut mbDownloadBind,
        ) -> mbDownloadOpt,
        ::libloading::Error,
    >,
    pub mbDownloadByPath: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            downloadOptions: *const mbDownloadOptions,
            path: *const WCHAR,
            expectedContentLength: usize,
            url: *const ::std::os::raw::c_char,
            mime: *const ::std::os::raw::c_char,
            disposition: *const ::std::os::raw::c_char,
            job: mbNetJob,
            dataBind: *mut mbNetJobDataBind,
            callbackBind: *mut mbDownloadBind,
        ) -> mbDownloadOpt,
        ::libloading::Error,
    >,
    pub mbDownloadByUtf8Path: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            downloadOptions: *const mbDownloadOptions,
            path: *const ::std::os::raw::c_char,
            expectedContentLength: usize,
            url: *const ::std::os::raw::c_char,
            mime: *const ::std::os::raw::c_char,
            disposition: *const ::std::os::raw::c_char,
            job: mbNetJob,
            dataBind: *mut mbNetJobDataBind,
            callbackBind: *mut mbDownloadBind,
        ) -> mbDownloadOpt,
        ::libloading::Error,
    >,
    pub mbGetPdfPageData: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbOnGetPdfPageDataCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCreateMemBuf: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            buf: *mut ::std::os::raw::c_void,
            length: usize,
        ) -> *mut mbMemBuf,
        ::libloading::Error,
    >,
    pub mbFreeMemBuf: Result<unsafe extern "stdcall" fn(buf: *mut mbMemBuf), ::libloading::Error>,
    pub mbPluginListBuilderAddPlugin: Result<
        unsafe extern "stdcall" fn(
            builder: *mut ::std::os::raw::c_void,
            name: *const utf8,
            description: *const utf8,
            fileName: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbPluginListBuilderAddMediaTypeToLastPlugin: Result<
        unsafe extern "stdcall" fn(
            builder: *mut ::std::os::raw::c_void,
            name: *const utf8,
            description: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbPluginListBuilderAddFileExtensionToLastMediaType: Result<
        unsafe extern "stdcall" fn(
            builder: *mut ::std::os::raw::c_void,
            fileExtension: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbEnableHighDPISupport: Result<unsafe extern "stdcall" fn(), ::libloading::Error>,
    pub mbRunMessageLoop: Result<unsafe extern "stdcall" fn(), ::libloading::Error>,
    pub mbExitMessageLoop: Result<unsafe extern "stdcall" fn(), ::libloading::Error>,
    pub mbOnLoadUrlFinish: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadUrlFinishCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnLoadUrlHeadersReceived: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbLoadUrlHeadersReceivedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnDocumentReadyInBlinkThread: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            callback: mbDocumentReadyCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbUtilSetDefaultPrinterSettings: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, setting: *const mbDefaultPrinterSettings),
        ::libloading::Error,
    >,
    pub mbGetContentWidth: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbGetContentHeight: Result<
        unsafe extern "stdcall" fn(webView: mbWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbGetWebViewForCurrentContext:
        Result<unsafe extern "stdcall" fn() -> mbWebView, ::libloading::Error>,
    pub mbRegisterEmbedderCustomElement: Result<
        unsafe extern "stdcall" fn(
            webviewHandle: mbWebView,
            frameId: mbWebFrameHandle,
            name: *const ::std::os::raw::c_char,
            options: *mut ::std::os::raw::c_void,
            outResult: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub mbOnNodeCreateProcess: Result<
        unsafe extern "stdcall" fn(
            webviewHandle: mbWebView,
            callback: mbNodeOnCreateProcessCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGetGlobalExecByFrame: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, frameId: mbWebFrameHandle) -> mbJsExecState,
        ::libloading::Error,
    >,
    pub mbJsToV8Value: Result<
        unsafe extern "stdcall" fn(es: mbJsExecState, v: mbJsValue) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub mbOnThreadIdle: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbOnBlinkThreadInit: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCallBlinkThreadAsync: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCallBlinkThreadSync: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCallUiThreadSync: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbCallUiThreadAsync: Result<
        unsafe extern "stdcall" fn(
            callback: mbThreadCallback,
            param1: *mut ::std::os::raw::c_void,
            param2: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbSetUserKeyValue: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mbGetUserKeyValue: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            key: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub mbGoToOffset: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, offset: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbGoToIndex: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, index: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mbEditorRedo: Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbEditorUnSelect:
        Result<unsafe extern "stdcall" fn(webView: mbWebView), ::libloading::Error>,
    pub mbGetBlinkMainThreadIsolate:
        Result<unsafe extern "stdcall" fn() -> v8Isolate, ::libloading::Error>,
    pub mbInsertCSSByFrame: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            cssText: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub mbWebFrameGetMainWorldScriptContext: Result<
        unsafe extern "stdcall" fn(
            webView: mbWebView,
            frameId: mbWebFrameHandle,
            contextOut: v8ContextPtr,
        ),
        ::libloading::Error,
    >,
    pub mbNetGetReferrer: Result<
        unsafe extern "stdcall" fn(jobPtr: mbNetJob) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mbPostToUiThread: Result<
        unsafe extern "stdcall" fn(callback: mbOnCallUiThread, param: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub mbPostToUiThreadDelay: Result<
        unsafe extern "stdcall" fn(
            callback: mbOnCallUiThread,
            param: *mut ::std::os::raw::c_void,
            millisecond: usize,
        ),
        ::libloading::Error,
    >,
    pub mbSetEditable:
        Result<unsafe extern "stdcall" fn(webView: mbWebView, editable: bool), ::libloading::Error>,
    pub mbSetLanguage: Result<
        unsafe extern "stdcall" fn(webView: mbWebView, language: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mbQueryState: Result<
        unsafe extern "stdcall" fn(
            webviewHandle: mbWebView,
            type_: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbGetProcAddr: Result<
        unsafe extern "stdcall" fn(
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
}
impl Library {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let mbstowcs_s = __library.get(b"mbstowcs_s\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let mbInit = __library.get(b"mbInit\0").map(|sym| *sym);
        let mbUninit = __library.get(b"mbUninit\0").map(|sym| *sym);
        let mbCreateInitSettings = __library.get(b"mbCreateInitSettings\0").map(|sym| *sym);
        let mbSetInitSettings = __library.get(b"mbSetInitSettings\0").map(|sym| *sym);
        let mbCreateWebView = __library.get(b"mbCreateWebView\0").map(|sym| *sym);
        let mbCreateWebViewBindGtkWindow = __library
            .get(b"mbCreateWebViewBindGtkWindow\0")
            .map(|sym| *sym);
        let mbDestroyWebView = __library.get(b"mbDestroyWebView\0").map(|sym| *sym);
        let mbCreateWebWindow = __library.get(b"mbCreateWebWindow\0").map(|sym| *sym);
        let mbCreateWebWindowEx = __library.get(b"mbCreateWebWindowEx\0").map(|sym| *sym);
        let mbCreateWebCustomWindow = __library.get(b"mbCreateWebCustomWindow\0").map(|sym| *sym);
        let mbMoveWindow = __library.get(b"mbMoveWindow\0").map(|sym| *sym);
        let mbMoveToCenter = __library.get(b"mbMoveToCenter\0").map(|sym| *sym);
        let mbSetAutoDrawToHwnd = __library.get(b"mbSetAutoDrawToHwnd\0").map(|sym| *sym);
        let mbGetCaretRect = __library.get(b"mbGetCaretRect\0").map(|sym| *sym);
        let mbSetAudioMuted = __library.get(b"mbSetAudioMuted\0").map(|sym| *sym);
        let mbIsAudioMuted = __library.get(b"mbIsAudioMuted\0").map(|sym| *sym);
        let mbCreateString = __library.get(b"mbCreateString\0").map(|sym| *sym);
        let mbCreateStringWithCopy = __library.get(b"mbCreateStringWithCopy\0").map(|sym| *sym);
        let mbCreateStringWithoutNullTermination = __library
            .get(b"mbCreateStringWithoutNullTermination\0")
            .map(|sym| *sym);
        let mbDeleteString = __library.get(b"mbDeleteString\0").map(|sym| *sym);
        let mbGetStringLen = __library.get(b"mbGetStringLen\0").map(|sym| *sym);
        let mbGetString = __library.get(b"mbGetString\0").map(|sym| *sym);
        let mbSetProxy = __library.get(b"mbSetProxy\0").map(|sym| *sym);
        let mbSetDebugConfig = __library.get(b"mbSetDebugConfig\0").map(|sym| *sym);
        let mbNetSetData = __library.get(b"mbNetSetData\0").map(|sym| *sym);
        let mbNetHookRequest = __library.get(b"mbNetHookRequest\0").map(|sym| *sym);
        let mbNetChangeRequestUrl = __library.get(b"mbNetChangeRequestUrl\0").map(|sym| *sym);
        let mbNetContinueJob = __library.get(b"mbNetContinueJob\0").map(|sym| *sym);
        let mbNetGetRawHttpHeadInBlinkThread = __library
            .get(b"mbNetGetRawHttpHeadInBlinkThread\0")
            .map(|sym| *sym);
        let mbNetGetRawResponseHeadInBlinkThread = __library
            .get(b"mbNetGetRawResponseHeadInBlinkThread\0")
            .map(|sym| *sym);
        let mbNetHoldJobToAsynCommit = __library.get(b"mbNetHoldJobToAsynCommit\0").map(|sym| *sym);
        let mbNetCancelRequest = __library.get(b"mbNetCancelRequest\0").map(|sym| *sym);
        let mbNetOnResponse = __library.get(b"mbNetOnResponse\0").map(|sym| *sym);
        let mbNetSetWebsocketCallback = __library
            .get(b"mbNetSetWebsocketCallback\0")
            .map(|sym| *sym);
        let mbNetSendWsText = __library.get(b"mbNetSendWsText\0").map(|sym| *sym);
        let mbNetSendWsBlob = __library.get(b"mbNetSendWsBlob\0").map(|sym| *sym);
        let mbNetEnableResPacket = __library.get(b"mbNetEnableResPacket\0").map(|sym| *sym);
        let mbNetGetPostBody = __library.get(b"mbNetGetPostBody\0").map(|sym| *sym);
        let mbNetCreatePostBodyElements = __library
            .get(b"mbNetCreatePostBodyElements\0")
            .map(|sym| *sym);
        let mbNetFreePostBodyElements = __library
            .get(b"mbNetFreePostBodyElements\0")
            .map(|sym| *sym);
        let mbNetCreatePostBodyElement = __library
            .get(b"mbNetCreatePostBodyElement\0")
            .map(|sym| *sym);
        let mbNetFreePostBodyElement = __library.get(b"mbNetFreePostBodyElement\0").map(|sym| *sym);
        let mbNetCreateWebUrlRequest = __library.get(b"mbNetCreateWebUrlRequest\0").map(|sym| *sym);
        let mbNetAddHTTPHeaderFieldToUrlRequest = __library
            .get(b"mbNetAddHTTPHeaderFieldToUrlRequest\0")
            .map(|sym| *sym);
        let mbNetStartUrlRequest = __library.get(b"mbNetStartUrlRequest\0").map(|sym| *sym);
        let mbNetGetHttpStatusCode = __library.get(b"mbNetGetHttpStatusCode\0").map(|sym| *sym);
        let mbNetGetRequestMethod = __library.get(b"mbNetGetRequestMethod\0").map(|sym| *sym);
        let mbNetGetExpectedContentLength = __library
            .get(b"mbNetGetExpectedContentLength\0")
            .map(|sym| *sym);
        let mbNetGetResponseUrl = __library.get(b"mbNetGetResponseUrl\0").map(|sym| *sym);
        let mbNetCancelWebUrlRequest = __library.get(b"mbNetCancelWebUrlRequest\0").map(|sym| *sym);
        let mbSetViewProxy = __library.get(b"mbSetViewProxy\0").map(|sym| *sym);
        let mbNetSetMIMEType = __library.get(b"mbNetSetMIMEType\0").map(|sym| *sym);
        let mbNetGetMIMEType = __library.get(b"mbNetGetMIMEType\0").map(|sym| *sym);
        let mbNetGetHTTPHeaderField = __library.get(b"mbNetGetHTTPHeaderField\0").map(|sym| *sym);
        let mbNetSetHTTPHeaderField = __library.get(b"mbNetSetHTTPHeaderField\0").map(|sym| *sym);
        let mbNetSetHTTPHeaderFieldUtf8 = __library
            .get(b"mbNetSetHTTPHeaderFieldUtf8\0")
            .map(|sym| *sym);
        let mbSetMouseEnabled = __library.get(b"mbSetMouseEnabled\0").map(|sym| *sym);
        let mbSetTouchEnabled = __library.get(b"mbSetTouchEnabled\0").map(|sym| *sym);
        let mbSetSystemTouchEnabled = __library.get(b"mbSetSystemTouchEnabled\0").map(|sym| *sym);
        let mbSetContextMenuEnabled = __library.get(b"mbSetContextMenuEnabled\0").map(|sym| *sym);
        let mbSetNavigationToNewWindowEnable = __library
            .get(b"mbSetNavigationToNewWindowEnable\0")
            .map(|sym| *sym);
        let mbSetHeadlessEnabled = __library.get(b"mbSetHeadlessEnabled\0").map(|sym| *sym);
        let mbSetDragDropEnable = __library.get(b"mbSetDragDropEnable\0").map(|sym| *sym);
        let mbSetDragEnable = __library.get(b"mbSetDragEnable\0").map(|sym| *sym);
        let mbSetContextMenuItemShow = __library.get(b"mbSetContextMenuItemShow\0").map(|sym| *sym);
        let mbSetHandle = __library.get(b"mbSetHandle\0").map(|sym| *sym);
        let mbSetHandleOffset = __library.get(b"mbSetHandleOffset\0").map(|sym| *sym);
        let mbGetPlatformWindowHandle = __library
            .get(b"mbGetPlatformWindowHandle\0")
            .map(|sym| *sym);
        let mbGetHostHWND = __library.get(b"mbGetHostHWND\0").map(|sym| *sym);
        let mbSetTransparent = __library.get(b"mbSetTransparent\0").map(|sym| *sym);
        let mbSetViewSettings = __library.get(b"mbSetViewSettings\0").map(|sym| *sym);
        let mbSetCspCheckEnable = __library.get(b"mbSetCspCheckEnable\0").map(|sym| *sym);
        let mbSetNpapiPluginsEnabled = __library.get(b"mbSetNpapiPluginsEnabled\0").map(|sym| *sym);
        let mbSetMemoryCacheEnable = __library.get(b"mbSetMemoryCacheEnable\0").map(|sym| *sym);
        let mbSetCookie = __library.get(b"mbSetCookie\0").map(|sym| *sym);
        let mbSetCookieEnabled = __library.get(b"mbSetCookieEnabled\0").map(|sym| *sym);
        let mbSetCookieJarPath = __library.get(b"mbSetCookieJarPath\0").map(|sym| *sym);
        let mbSetCookieJarFullPath = __library.get(b"mbSetCookieJarFullPath\0").map(|sym| *sym);
        let mbSetLocalStorageFullPath = __library
            .get(b"mbSetLocalStorageFullPath\0")
            .map(|sym| *sym);
        let mbGetTitle = __library.get(b"mbGetTitle\0").map(|sym| *sym);
        let mbSetWindowTitle = __library.get(b"mbSetWindowTitle\0").map(|sym| *sym);
        let mbSetWindowTitleW = __library.get(b"mbSetWindowTitleW\0").map(|sym| *sym);
        let mbGetUrl = __library.get(b"mbGetUrl\0").map(|sym| *sym);
        let mbGetCursorInfoType = __library.get(b"mbGetCursorInfoType\0").map(|sym| *sym);
        let mbAddPluginDirectory = __library.get(b"mbAddPluginDirectory\0").map(|sym| *sym);
        let mbSetUserAgent = __library.get(b"mbSetUserAgent\0").map(|sym| *sym);
        let mbSetZoomFactor = __library.get(b"mbSetZoomFactor\0").map(|sym| *sym);
        let mbGetZoomFactor = __library.get(b"mbGetZoomFactor\0").map(|sym| *sym);
        let mbSetDiskCacheEnabled = __library.get(b"mbSetDiskCacheEnabled\0").map(|sym| *sym);
        let mbSetDiskCachePath = __library.get(b"mbSetDiskCachePath\0").map(|sym| *sym);
        let mbSetDiskCacheLimit = __library.get(b"mbSetDiskCacheLimit\0").map(|sym| *sym);
        let mbSetDiskCacheLimitDisk = __library.get(b"mbSetDiskCacheLimitDisk\0").map(|sym| *sym);
        let mbSetDiskCacheLevel = __library.get(b"mbSetDiskCacheLevel\0").map(|sym| *sym);
        let mbSetResourceGc = __library.get(b"mbSetResourceGc\0").map(|sym| *sym);
        let mbIsLoading = __library.get(b"mbIsLoading\0").map(|sym| *sym);
        let mbCanGoBackOrForward = __library.get(b"mbCanGoBackOrForward\0").map(|sym| *sym);
        let mbCanGoBack = __library.get(b"mbCanGoBack\0").map(|sym| *sym);
        let mbCanGoForward = __library.get(b"mbCanGoForward\0").map(|sym| *sym);
        let mbGetCookie = __library.get(b"mbGetCookie\0").map(|sym| *sym);
        let mbGetCookieOnBlinkThread = __library.get(b"mbGetCookieOnBlinkThread\0").map(|sym| *sym);
        let mbClearCookie = __library.get(b"mbClearCookie\0").map(|sym| *sym);
        let mbResize = __library.get(b"mbResize\0").map(|sym| *sym);
        let mbGetSize = __library.get(b"mbGetSize\0").map(|sym| *sym);
        let mbGetWindowRect = __library.get(b"mbGetWindowRect\0").map(|sym| *sym);
        let mbOnNavigation = __library.get(b"mbOnNavigation\0").map(|sym| *sym);
        let mbOnNavigationSync = __library.get(b"mbOnNavigationSync\0").map(|sym| *sym);
        let mbOnCreateView = __library.get(b"mbOnCreateView\0").map(|sym| *sym);
        let mbOnDocumentReady = __library.get(b"mbOnDocumentReady\0").map(|sym| *sym);
        let mbOnPaintUpdated = __library.get(b"mbOnPaintUpdated\0").map(|sym| *sym);
        let mbOnPaintBitUpdated = __library.get(b"mbOnPaintBitUpdated\0").map(|sym| *sym);
        let mbOnAcceleratedPaint = __library.get(b"mbOnAcceleratedPaint\0").map(|sym| *sym);
        let mbOnLoadUrlBegin = __library.get(b"mbOnLoadUrlBegin\0").map(|sym| *sym);
        let mbOnLoadUrlEnd = __library.get(b"mbOnLoadUrlEnd\0").map(|sym| *sym);
        let mbOnLoadUrlFail = __library.get(b"mbOnLoadUrlFail\0").map(|sym| *sym);
        let mbOnTitleChanged = __library.get(b"mbOnTitleChanged\0").map(|sym| *sym);
        let mbOnURLChanged = __library.get(b"mbOnURLChanged\0").map(|sym| *sym);
        let mbOnLoadingFinish = __library.get(b"mbOnLoadingFinish\0").map(|sym| *sym);
        let mbOnDownload = __library.get(b"mbOnDownload\0").map(|sym| *sym);
        let mbOnDownloadInBlinkThread = __library
            .get(b"mbOnDownloadInBlinkThread\0")
            .map(|sym| *sym);
        let mbOnAlertBox = __library.get(b"mbOnAlertBox\0").map(|sym| *sym);
        let mbOnConfirmBox = __library.get(b"mbOnConfirmBox\0").map(|sym| *sym);
        let mbOnPromptBox = __library.get(b"mbOnPromptBox\0").map(|sym| *sym);
        let mbOnNetGetFavicon = __library.get(b"mbOnNetGetFavicon\0").map(|sym| *sym);
        let mbOnConsole = __library.get(b"mbOnConsole\0").map(|sym| *sym);
        let mbOnClose = __library.get(b"mbOnClose\0").map(|sym| *sym);
        let mbOnDestroy = __library.get(b"mbOnDestroy\0").map(|sym| *sym);
        let mbOnPrinting = __library.get(b"mbOnPrinting\0").map(|sym| *sym);
        let mbOnDidCreateScriptContext = __library
            .get(b"mbOnDidCreateScriptContext\0")
            .map(|sym| *sym);
        let mbOnWillReleaseScriptContext = __library
            .get(b"mbOnWillReleaseScriptContext\0")
            .map(|sym| *sym);
        let mbOnPluginList = __library.get(b"mbOnPluginList\0").map(|sym| *sym);
        let mbOnImageBufferToDataURL = __library.get(b"mbOnImageBufferToDataURL\0").map(|sym| *sym);
        let mbGoBack = __library.get(b"mbGoBack\0").map(|sym| *sym);
        let mbGoForward = __library.get(b"mbGoForward\0").map(|sym| *sym);
        let mbNavigateAtIndex = __library.get(b"mbNavigateAtIndex\0").map(|sym| *sym);
        let mbGetNavigateIndex = __library.get(b"mbGetNavigateIndex\0").map(|sym| *sym);
        let mbStopLoading = __library.get(b"mbStopLoading\0").map(|sym| *sym);
        let mbReload = __library.get(b"mbReload\0").map(|sym| *sym);
        let mbPerformCookieCommand = __library.get(b"mbPerformCookieCommand\0").map(|sym| *sym);
        let mbEditorSelectAll = __library.get(b"mbEditorSelectAll\0").map(|sym| *sym);
        let mbEditorCopy = __library.get(b"mbEditorCopy\0").map(|sym| *sym);
        let mbEditorCut = __library.get(b"mbEditorCut\0").map(|sym| *sym);
        let mbEditorPaste = __library.get(b"mbEditorPaste\0").map(|sym| *sym);
        let mbEditorDelete = __library.get(b"mbEditorDelete\0").map(|sym| *sym);
        let mbEditorUndo = __library.get(b"mbEditorUndo\0").map(|sym| *sym);
        let mbFireMouseEvent = __library.get(b"mbFireMouseEvent\0").map(|sym| *sym);
        let mbFireContextMenuEvent = __library.get(b"mbFireContextMenuEvent\0").map(|sym| *sym);
        let mbFireMouseWheelEvent = __library.get(b"mbFireMouseWheelEvent\0").map(|sym| *sym);
        let mbFireKeyUpEvent = __library.get(b"mbFireKeyUpEvent\0").map(|sym| *sym);
        let mbFireKeyDownEvent = __library.get(b"mbFireKeyDownEvent\0").map(|sym| *sym);
        let mbFireKeyPressEvent = __library.get(b"mbFireKeyPressEvent\0").map(|sym| *sym);
        let mbFireWindowsMessage = __library.get(b"mbFireWindowsMessage\0").map(|sym| *sym);
        let mbSetFocus = __library.get(b"mbSetFocus\0").map(|sym| *sym);
        let mbKillFocus = __library.get(b"mbKillFocus\0").map(|sym| *sym);
        let mbShowWindow = __library.get(b"mbShowWindow\0").map(|sym| *sym);
        let mbLoadURL = __library.get(b"mbLoadURL\0").map(|sym| *sym);
        let mbLoadHtmlWithBaseUrl = __library.get(b"mbLoadHtmlWithBaseUrl\0").map(|sym| *sym);
        let mbPostURL = __library.get(b"mbPostURL\0").map(|sym| *sym);
        let mbGetLockedViewDC = __library.get(b"mbGetLockedViewDC\0").map(|sym| *sym);
        let mbUnlockViewDC = __library.get(b"mbUnlockViewDC\0").map(|sym| *sym);
        let mbWake = __library.get(b"mbWake\0").map(|sym| *sym);
        let mbJsToDouble = __library.get(b"mbJsToDouble\0").map(|sym| *sym);
        let mbJsToBoolean = __library.get(b"mbJsToBoolean\0").map(|sym| *sym);
        let mbJsToString = __library.get(b"mbJsToString\0").map(|sym| *sym);
        let mbJsToWebFrameHandle = __library.get(b"mbJsToWebFrameHandle\0").map(|sym| *sym);
        let mbGetParentWebFrameHandle = __library
            .get(b"mbGetParentWebFrameHandle\0")
            .map(|sym| *sym);
        let mbGetJsValueType = __library.get(b"mbGetJsValueType\0").map(|sym| *sym);
        let mbJsValueAddRef = __library.get(b"mbJsValueAddRef\0").map(|sym| *sym);
        let mbJsValueDeref = __library.get(b"mbJsValueDeref\0").map(|sym| *sym);
        let mbOnJsQuery = __library.get(b"mbOnJsQuery\0").map(|sym| *sym);
        let mbOnJsQueryEx = __library.get(b"mbOnJsQueryEx\0").map(|sym| *sym);
        let mbResponseQuery = __library.get(b"mbResponseQuery\0").map(|sym| *sym);
        let mbRunJs = __library.get(b"mbRunJs\0").map(|sym| *sym);
        let mbRunJsSync = __library.get(b"mbRunJsSync\0").map(|sym| *sym);
        let mbWebFrameGetMainFrame = __library.get(b"mbWebFrameGetMainFrame\0").map(|sym| *sym);
        let mbIsMainFrame = __library.get(b"mbIsMainFrame\0").map(|sym| *sym);
        let mbSetNodeJsEnable = __library.get(b"mbSetNodeJsEnable\0").map(|sym| *sym);
        let mbSetDeviceParameter = __library.get(b"mbSetDeviceParameter\0").map(|sym| *sym);
        let mbGetContentAsMarkup = __library.get(b"mbGetContentAsMarkup\0").map(|sym| *sym);
        let mbGetSource = __library.get(b"mbGetSource\0").map(|sym| *sym);
        let mbGetWindowScreenshotSync = __library
            .get(b"mbGetWindowScreenshotSync\0")
            .map(|sym| *sym);
        let mbGetSourceSync = __library.get(b"mbGetSourceSync\0").map(|sym| *sym);
        let mbUtilSerializeToMHTML = __library.get(b"mbUtilSerializeToMHTML\0").map(|sym| *sym);
        let mbUtilCreateRequestCode = __library.get(b"mbUtilCreateRequestCode\0").map(|sym| *sym);
        let mbUtilIsRegistered = __library.get(b"mbUtilIsRegistered\0").map(|sym| *sym);
        let mbUtilPrint = __library.get(b"mbUtilPrint\0").map(|sym| *sym);
        let mbUtilBase64Encode = __library.get(b"mbUtilBase64Encode\0").map(|sym| *sym);
        let mbUtilBase64EncodeBuffer = __library.get(b"mbUtilBase64EncodeBuffer\0").map(|sym| *sym);
        let mbUtilBase64Decode = __library.get(b"mbUtilBase64Decode\0").map(|sym| *sym);
        let mbUtilDecodeURLEscape = __library.get(b"mbUtilDecodeURLEscape\0").map(|sym| *sym);
        let mbUtilEncodeURLEscape = __library.get(b"mbUtilEncodeURLEscape\0").map(|sym| *sym);
        let mbUtilCreateV8Snapshot = __library.get(b"mbUtilCreateV8Snapshot\0").map(|sym| *sym);
        let mbUtilPrintToPdf = __library.get(b"mbUtilPrintToPdf\0").map(|sym| *sym);
        let mbUtilPrintToBitmap = __library.get(b"mbUtilPrintToBitmap\0").map(|sym| *sym);
        let mbUtilScreenshot = __library.get(b"mbUtilScreenshot\0").map(|sym| *sym);
        let mbUtilsSilentPrint = __library.get(b"mbUtilsSilentPrint\0").map(|sym| *sym);
        let mbPopupDownloadMgr = __library.get(b"mbPopupDownloadMgr\0").map(|sym| *sym);
        let mbPopupDialogAndDownload = __library.get(b"mbPopupDialogAndDownload\0").map(|sym| *sym);
        let mbDownloadByPath = __library.get(b"mbDownloadByPath\0").map(|sym| *sym);
        let mbDownloadByUtf8Path = __library.get(b"mbDownloadByUtf8Path\0").map(|sym| *sym);
        let mbGetPdfPageData = __library.get(b"mbGetPdfPageData\0").map(|sym| *sym);
        let mbCreateMemBuf = __library.get(b"mbCreateMemBuf\0").map(|sym| *sym);
        let mbFreeMemBuf = __library.get(b"mbFreeMemBuf\0").map(|sym| *sym);
        let mbPluginListBuilderAddPlugin = __library
            .get(b"mbPluginListBuilderAddPlugin\0")
            .map(|sym| *sym);
        let mbPluginListBuilderAddMediaTypeToLastPlugin = __library
            .get(b"mbPluginListBuilderAddMediaTypeToLastPlugin\0")
            .map(|sym| *sym);
        let mbPluginListBuilderAddFileExtensionToLastMediaType = __library
            .get(b"mbPluginListBuilderAddFileExtensionToLastMediaType\0")
            .map(|sym| *sym);
        let mbEnableHighDPISupport = __library.get(b"mbEnableHighDPISupport\0").map(|sym| *sym);
        let mbRunMessageLoop = __library.get(b"mbRunMessageLoop\0").map(|sym| *sym);
        let mbExitMessageLoop = __library.get(b"mbExitMessageLoop\0").map(|sym| *sym);
        let mbOnLoadUrlFinish = __library.get(b"mbOnLoadUrlFinish\0").map(|sym| *sym);
        let mbOnLoadUrlHeadersReceived = __library
            .get(b"mbOnLoadUrlHeadersReceived\0")
            .map(|sym| *sym);
        let mbOnDocumentReadyInBlinkThread = __library
            .get(b"mbOnDocumentReadyInBlinkThread\0")
            .map(|sym| *sym);
        let mbUtilSetDefaultPrinterSettings = __library
            .get(b"mbUtilSetDefaultPrinterSettings\0")
            .map(|sym| *sym);
        let mbGetContentWidth = __library.get(b"mbGetContentWidth\0").map(|sym| *sym);
        let mbGetContentHeight = __library.get(b"mbGetContentHeight\0").map(|sym| *sym);
        let mbGetWebViewForCurrentContext = __library
            .get(b"mbGetWebViewForCurrentContext\0")
            .map(|sym| *sym);
        let mbRegisterEmbedderCustomElement = __library
            .get(b"mbRegisterEmbedderCustomElement\0")
            .map(|sym| *sym);
        let mbOnNodeCreateProcess = __library.get(b"mbOnNodeCreateProcess\0").map(|sym| *sym);
        let mbGetGlobalExecByFrame = __library.get(b"mbGetGlobalExecByFrame\0").map(|sym| *sym);
        let mbJsToV8Value = __library.get(b"mbJsToV8Value\0").map(|sym| *sym);
        let mbOnThreadIdle = __library.get(b"mbOnThreadIdle\0").map(|sym| *sym);
        let mbOnBlinkThreadInit = __library.get(b"mbOnBlinkThreadInit\0").map(|sym| *sym);
        let mbCallBlinkThreadAsync = __library.get(b"mbCallBlinkThreadAsync\0").map(|sym| *sym);
        let mbCallBlinkThreadSync = __library.get(b"mbCallBlinkThreadSync\0").map(|sym| *sym);
        let mbCallUiThreadSync = __library.get(b"mbCallUiThreadSync\0").map(|sym| *sym);
        let mbCallUiThreadAsync = __library.get(b"mbCallUiThreadAsync\0").map(|sym| *sym);
        let mbSetUserKeyValue = __library.get(b"mbSetUserKeyValue\0").map(|sym| *sym);
        let mbGetUserKeyValue = __library.get(b"mbGetUserKeyValue\0").map(|sym| *sym);
        let mbGoToOffset = __library.get(b"mbGoToOffset\0").map(|sym| *sym);
        let mbGoToIndex = __library.get(b"mbGoToIndex\0").map(|sym| *sym);
        let mbEditorRedo = __library.get(b"mbEditorRedo\0").map(|sym| *sym);
        let mbEditorUnSelect = __library.get(b"mbEditorUnSelect\0").map(|sym| *sym);
        let mbGetBlinkMainThreadIsolate = __library
            .get(b"mbGetBlinkMainThreadIsolate\0")
            .map(|sym| *sym);
        let mbInsertCSSByFrame = __library.get(b"mbInsertCSSByFrame\0").map(|sym| *sym);
        let mbWebFrameGetMainWorldScriptContext = __library
            .get(b"mbWebFrameGetMainWorldScriptContext\0")
            .map(|sym| *sym);
        let mbNetGetReferrer = __library.get(b"mbNetGetReferrer\0").map(|sym| *sym);
        let mbPostToUiThread = __library.get(b"mbPostToUiThread\0").map(|sym| *sym);
        let mbPostToUiThreadDelay = __library.get(b"mbPostToUiThreadDelay\0").map(|sym| *sym);
        let mbSetEditable = __library.get(b"mbSetEditable\0").map(|sym| *sym);
        let mbSetLanguage = __library.get(b"mbSetLanguage\0").map(|sym| *sym);
        let mbQueryState = __library.get(b"mbQueryState\0").map(|sym| *sym);
        let mbGetProcAddr = __library.get(b"mbGetProcAddr\0").map(|sym| *sym);
        Ok(Library {
            __library,
            mblen,
            mbtowc,
            mbstowcs_s,
            mbstowcs,
            mbInit,
            mbUninit,
            mbCreateInitSettings,
            mbSetInitSettings,
            mbCreateWebView,
            mbCreateWebViewBindGtkWindow,
            mbDestroyWebView,
            mbCreateWebWindow,
            mbCreateWebWindowEx,
            mbCreateWebCustomWindow,
            mbMoveWindow,
            mbMoveToCenter,
            mbSetAutoDrawToHwnd,
            mbGetCaretRect,
            mbSetAudioMuted,
            mbIsAudioMuted,
            mbCreateString,
            mbCreateStringWithCopy,
            mbCreateStringWithoutNullTermination,
            mbDeleteString,
            mbGetStringLen,
            mbGetString,
            mbSetProxy,
            mbSetDebugConfig,
            mbNetSetData,
            mbNetHookRequest,
            mbNetChangeRequestUrl,
            mbNetContinueJob,
            mbNetGetRawHttpHeadInBlinkThread,
            mbNetGetRawResponseHeadInBlinkThread,
            mbNetHoldJobToAsynCommit,
            mbNetCancelRequest,
            mbNetOnResponse,
            mbNetSetWebsocketCallback,
            mbNetSendWsText,
            mbNetSendWsBlob,
            mbNetEnableResPacket,
            mbNetGetPostBody,
            mbNetCreatePostBodyElements,
            mbNetFreePostBodyElements,
            mbNetCreatePostBodyElement,
            mbNetFreePostBodyElement,
            mbNetCreateWebUrlRequest,
            mbNetAddHTTPHeaderFieldToUrlRequest,
            mbNetStartUrlRequest,
            mbNetGetHttpStatusCode,
            mbNetGetRequestMethod,
            mbNetGetExpectedContentLength,
            mbNetGetResponseUrl,
            mbNetCancelWebUrlRequest,
            mbSetViewProxy,
            mbNetSetMIMEType,
            mbNetGetMIMEType,
            mbNetGetHTTPHeaderField,
            mbNetSetHTTPHeaderField,
            mbNetSetHTTPHeaderFieldUtf8,
            mbSetMouseEnabled,
            mbSetTouchEnabled,
            mbSetSystemTouchEnabled,
            mbSetContextMenuEnabled,
            mbSetNavigationToNewWindowEnable,
            mbSetHeadlessEnabled,
            mbSetDragDropEnable,
            mbSetDragEnable,
            mbSetContextMenuItemShow,
            mbSetHandle,
            mbSetHandleOffset,
            mbGetPlatformWindowHandle,
            mbGetHostHWND,
            mbSetTransparent,
            mbSetViewSettings,
            mbSetCspCheckEnable,
            mbSetNpapiPluginsEnabled,
            mbSetMemoryCacheEnable,
            mbSetCookie,
            mbSetCookieEnabled,
            mbSetCookieJarPath,
            mbSetCookieJarFullPath,
            mbSetLocalStorageFullPath,
            mbGetTitle,
            mbSetWindowTitle,
            mbSetWindowTitleW,
            mbGetUrl,
            mbGetCursorInfoType,
            mbAddPluginDirectory,
            mbSetUserAgent,
            mbSetZoomFactor,
            mbGetZoomFactor,
            mbSetDiskCacheEnabled,
            mbSetDiskCachePath,
            mbSetDiskCacheLimit,
            mbSetDiskCacheLimitDisk,
            mbSetDiskCacheLevel,
            mbSetResourceGc,
            mbIsLoading,
            mbCanGoBackOrForward,
            mbCanGoBack,
            mbCanGoForward,
            mbGetCookie,
            mbGetCookieOnBlinkThread,
            mbClearCookie,
            mbResize,
            mbGetSize,
            mbGetWindowRect,
            mbOnNavigation,
            mbOnNavigationSync,
            mbOnCreateView,
            mbOnDocumentReady,
            mbOnPaintUpdated,
            mbOnPaintBitUpdated,
            mbOnAcceleratedPaint,
            mbOnLoadUrlBegin,
            mbOnLoadUrlEnd,
            mbOnLoadUrlFail,
            mbOnTitleChanged,
            mbOnURLChanged,
            mbOnLoadingFinish,
            mbOnDownload,
            mbOnDownloadInBlinkThread,
            mbOnAlertBox,
            mbOnConfirmBox,
            mbOnPromptBox,
            mbOnNetGetFavicon,
            mbOnConsole,
            mbOnClose,
            mbOnDestroy,
            mbOnPrinting,
            mbOnDidCreateScriptContext,
            mbOnWillReleaseScriptContext,
            mbOnPluginList,
            mbOnImageBufferToDataURL,
            mbGoBack,
            mbGoForward,
            mbNavigateAtIndex,
            mbGetNavigateIndex,
            mbStopLoading,
            mbReload,
            mbPerformCookieCommand,
            mbEditorSelectAll,
            mbEditorCopy,
            mbEditorCut,
            mbEditorPaste,
            mbEditorDelete,
            mbEditorUndo,
            mbFireMouseEvent,
            mbFireContextMenuEvent,
            mbFireMouseWheelEvent,
            mbFireKeyUpEvent,
            mbFireKeyDownEvent,
            mbFireKeyPressEvent,
            mbFireWindowsMessage,
            mbSetFocus,
            mbKillFocus,
            mbShowWindow,
            mbLoadURL,
            mbLoadHtmlWithBaseUrl,
            mbPostURL,
            mbGetLockedViewDC,
            mbUnlockViewDC,
            mbWake,
            mbJsToDouble,
            mbJsToBoolean,
            mbJsToString,
            mbJsToWebFrameHandle,
            mbGetParentWebFrameHandle,
            mbGetJsValueType,
            mbJsValueAddRef,
            mbJsValueDeref,
            mbOnJsQuery,
            mbOnJsQueryEx,
            mbResponseQuery,
            mbRunJs,
            mbRunJsSync,
            mbWebFrameGetMainFrame,
            mbIsMainFrame,
            mbSetNodeJsEnable,
            mbSetDeviceParameter,
            mbGetContentAsMarkup,
            mbGetSource,
            mbGetWindowScreenshotSync,
            mbGetSourceSync,
            mbUtilSerializeToMHTML,
            mbUtilCreateRequestCode,
            mbUtilIsRegistered,
            mbUtilPrint,
            mbUtilBase64Encode,
            mbUtilBase64EncodeBuffer,
            mbUtilBase64Decode,
            mbUtilDecodeURLEscape,
            mbUtilEncodeURLEscape,
            mbUtilCreateV8Snapshot,
            mbUtilPrintToPdf,
            mbUtilPrintToBitmap,
            mbUtilScreenshot,
            mbUtilsSilentPrint,
            mbPopupDownloadMgr,
            mbPopupDialogAndDownload,
            mbDownloadByPath,
            mbDownloadByUtf8Path,
            mbGetPdfPageData,
            mbCreateMemBuf,
            mbFreeMemBuf,
            mbPluginListBuilderAddPlugin,
            mbPluginListBuilderAddMediaTypeToLastPlugin,
            mbPluginListBuilderAddFileExtensionToLastMediaType,
            mbEnableHighDPISupport,
            mbRunMessageLoop,
            mbExitMessageLoop,
            mbOnLoadUrlFinish,
            mbOnLoadUrlHeadersReceived,
            mbOnDocumentReadyInBlinkThread,
            mbUtilSetDefaultPrinterSettings,
            mbGetContentWidth,
            mbGetContentHeight,
            mbGetWebViewForCurrentContext,
            mbRegisterEmbedderCustomElement,
            mbOnNodeCreateProcess,
            mbGetGlobalExecByFrame,
            mbJsToV8Value,
            mbOnThreadIdle,
            mbOnBlinkThreadInit,
            mbCallBlinkThreadAsync,
            mbCallBlinkThreadSync,
            mbCallUiThreadSync,
            mbCallUiThreadAsync,
            mbSetUserKeyValue,
            mbGetUserKeyValue,
            mbGoToOffset,
            mbGoToIndex,
            mbEditorRedo,
            mbEditorUnSelect,
            mbGetBlinkMainThreadIsolate,
            mbInsertCSSByFrame,
            mbWebFrameGetMainWorldScriptContext,
            mbNetGetReferrer,
            mbPostToUiThread,
            mbPostToUiThreadDelay,
            mbSetEditable,
            mbSetLanguage,
            mbQueryState,
            mbGetProcAddr,
        })
    }
    pub unsafe fn mblen(
        &self,
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int {
        (self.mblen.as_ref().expect("Expected function, got error."))(_Ch, _MaxCount)
    }
    pub unsafe fn mbtowc(
        &self,
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int {
        (self.mbtowc.as_ref().expect("Expected function, got error."))(
            _DstCh,
            _SrcCh,
            _SrcSizeInBytes,
        )
    }
    pub unsafe fn mbstowcs_s(
        &self,
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t {
        (self
            .mbstowcs_s
            .as_ref()
            .expect("Expected function, got error."))(
            _PtNumOfCharConverted,
            _DstBuf,
            _SizeInWords,
            _SrcBuf,
            _MaxCount,
        )
    }
    pub unsafe fn mbstowcs(
        &self,
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize {
        (self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error."))(_Dest, _Source, _MaxCount)
    }
    pub unsafe fn mbInit(&self, settings: *const mbSettings) {
        (self.mbInit.as_ref().expect("Expected function, got error."))(settings)
    }
    pub unsafe fn mbUninit(&self) {
        (self
            .mbUninit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbCreateInitSettings(&self) -> *mut mbSettings {
        (self
            .mbCreateInitSettings
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbSetInitSettings(
        &self,
        settings: *mut mbSettings,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .mbSetInitSettings
            .as_ref()
            .expect("Expected function, got error."))(settings, name, value)
    }
    pub unsafe fn mbCreateWebView(&self) -> mbWebView {
        (self
            .mbCreateWebView
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbCreateWebViewBindGtkWindow(
        &self,
        rootWindow: *mut ::std::os::raw::c_void,
        drawingArea: *mut ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
        style: DWORD,
        styleEx: DWORD,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> mbWebView {
        (self
            .mbCreateWebViewBindGtkWindow
            .as_ref()
            .expect("Expected function, got error."))(
            rootWindow,
            drawingArea,
            type_,
            style,
            styleEx,
            width,
            height,
        )
    }
    pub unsafe fn mbDestroyWebView(&self, arg1: mbWebView) {
        (self
            .mbDestroyWebView
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mbCreateWebWindow(
        &self,
        type_: mbWindowType,
        parent: HWND,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> mbWebView {
        (self
            .mbCreateWebWindow
            .as_ref()
            .expect("Expected function, got error."))(type_, parent, x, y, width, height)
    }
    pub unsafe fn mbCreateWebWindowEx(
        &self,
        type_: mbWindowType,
        parent: HWND,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        settings: *const mbViewSettings,
    ) -> mbWebView {
        (self
            .mbCreateWebWindowEx
            .as_ref()
            .expect("Expected function, got error."))(
            type_, parent, x, y, width, height, settings
        )
    }
    pub unsafe fn mbCreateWebCustomWindow(
        &self,
        parent: HWND,
        style: DWORD,
        styleEx: DWORD,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> mbWebView {
        (self
            .mbCreateWebCustomWindow
            .as_ref()
            .expect("Expected function, got error."))(
            parent, style, styleEx, x, y, width, height
        )
    }
    pub unsafe fn mbMoveWindow(
        &self,
        webview: mbWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .mbMoveWindow
            .as_ref()
            .expect("Expected function, got error."))(webview, x, y, w, h)
    }
    pub unsafe fn mbMoveToCenter(&self, webview: mbWebView) {
        (self
            .mbMoveToCenter
            .as_ref()
            .expect("Expected function, got error."))(webview)
    }
    pub unsafe fn mbSetAutoDrawToHwnd(&self, webview: mbWebView, b: BOOL) {
        (self
            .mbSetAutoDrawToHwnd
            .as_ref()
            .expect("Expected function, got error."))(webview, b)
    }
    pub unsafe fn mbGetCaretRect(&self, webviewHandle: mbWebView, r: *mut mbRect) {
        (self
            .mbGetCaretRect
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, r)
    }
    pub unsafe fn mbSetAudioMuted(&self, webview: mbWebView, b: BOOL) {
        (self
            .mbSetAudioMuted
            .as_ref()
            .expect("Expected function, got error."))(webview, b)
    }
    pub unsafe fn mbIsAudioMuted(&self, webview: mbWebView) -> BOOL {
        (self
            .mbIsAudioMuted
            .as_ref()
            .expect("Expected function, got error."))(webview)
    }
    pub unsafe fn mbCreateString(&self, str_: *const utf8, length: usize) -> mbStringPtr {
        (self
            .mbCreateString
            .as_ref()
            .expect("Expected function, got error."))(str_, length)
    }
    pub unsafe fn mbCreateStringWithCopy(&self, str_: *const utf8, length: usize) -> mbStringPtr {
        (self
            .mbCreateStringWithCopy
            .as_ref()
            .expect("Expected function, got error."))(str_, length)
    }
    pub unsafe fn mbCreateStringWithoutNullTermination(
        &self,
        str_: *const utf8,
        length: usize,
    ) -> mbStringPtr {
        (self
            .mbCreateStringWithoutNullTermination
            .as_ref()
            .expect("Expected function, got error."))(str_, length)
    }
    pub unsafe fn mbDeleteString(&self, str_: mbStringPtr) {
        (self
            .mbDeleteString
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbGetStringLen(&self, str_: mbStringPtr) -> usize {
        (self
            .mbGetStringLen
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbGetString(&self, str_: mbStringPtr) -> *const utf8 {
        (self
            .mbGetString
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbSetProxy(&self, webView: mbWebView, proxy: *const mbProxy) {
        (self
            .mbSetProxy
            .as_ref()
            .expect("Expected function, got error."))(webView, proxy)
    }
    pub unsafe fn mbSetDebugConfig(
        &self,
        webView: mbWebView,
        debugString: *const ::std::os::raw::c_char,
        param: *const ::std::os::raw::c_char,
    ) {
        (self
            .mbSetDebugConfig
            .as_ref()
            .expect("Expected function, got error."))(webView, debugString, param)
    }
    pub unsafe fn mbNetSetData(
        &self,
        jobPtr: mbNetJob,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) {
        (self
            .mbNetSetData
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, buf, len)
    }
    pub unsafe fn mbNetHookRequest(&self, jobPtr: mbNetJob) {
        (self
            .mbNetHookRequest
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetChangeRequestUrl(
        &self,
        jobPtr: mbNetJob,
        url: *const ::std::os::raw::c_char,
    ) {
        (self
            .mbNetChangeRequestUrl
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, url)
    }
    pub unsafe fn mbNetContinueJob(&self, jobPtr: mbNetJob) {
        (self
            .mbNetContinueJob
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetGetRawHttpHeadInBlinkThread(&self, jobPtr: mbNetJob) -> *const mbSlist {
        (self
            .mbNetGetRawHttpHeadInBlinkThread
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetGetRawResponseHeadInBlinkThread(&self, jobPtr: mbNetJob) -> *const mbSlist {
        (self
            .mbNetGetRawResponseHeadInBlinkThread
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetHoldJobToAsynCommit(&self, jobPtr: mbNetJob) {
        (self
            .mbNetHoldJobToAsynCommit
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetCancelRequest(&self, jobPtr: mbNetJob) {
        (self
            .mbNetCancelRequest
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetOnResponse(
        &self,
        webviewHandle: mbWebView,
        callback: mbNetResponseCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbNetOnResponse
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, callback, param)
    }
    pub unsafe fn mbNetSetWebsocketCallback(
        &self,
        webview: mbWebView,
        callbacks: *const mbWebsocketHookCallbacks,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbNetSetWebsocketCallback
            .as_ref()
            .expect("Expected function, got error."))(webview, callbacks, param)
    }
    pub unsafe fn mbNetSendWsText(
        &self,
        channel: mbWebSocketChannel,
        buf: *const ::std::os::raw::c_char,
        len: usize,
    ) {
        (self
            .mbNetSendWsText
            .as_ref()
            .expect("Expected function, got error."))(channel, buf, len)
    }
    pub unsafe fn mbNetSendWsBlob(
        &self,
        channel: mbWebSocketChannel,
        buf: *const ::std::os::raw::c_char,
        len: usize,
    ) {
        (self
            .mbNetSendWsBlob
            .as_ref()
            .expect("Expected function, got error."))(channel, buf, len)
    }
    pub unsafe fn mbNetEnableResPacket(&self, webviewHandle: mbWebView, pathName: *const WCHAR) {
        (self
            .mbNetEnableResPacket
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, pathName)
    }
    pub unsafe fn mbNetGetPostBody(&self, jobPtr: mbNetJob) -> *mut mbPostBodyElements {
        (self
            .mbNetGetPostBody
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetCreatePostBodyElements(
        &self,
        webView: mbWebView,
        length: usize,
    ) -> *mut mbPostBodyElements {
        (self
            .mbNetCreatePostBodyElements
            .as_ref()
            .expect("Expected function, got error."))(webView, length)
    }
    pub unsafe fn mbNetFreePostBodyElements(&self, elements: *mut mbPostBodyElements) {
        (self
            .mbNetFreePostBodyElements
            .as_ref()
            .expect("Expected function, got error."))(elements)
    }
    pub unsafe fn mbNetCreatePostBodyElement(&self, webView: mbWebView) -> *mut mbPostBodyElement {
        (self
            .mbNetCreatePostBodyElement
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbNetFreePostBodyElement(&self, element: *mut mbPostBodyElement) {
        (self
            .mbNetFreePostBodyElement
            .as_ref()
            .expect("Expected function, got error."))(element)
    }
    pub unsafe fn mbNetCreateWebUrlRequest(
        &self,
        url: *const utf8,
        method: *const utf8,
        mime: *const utf8,
    ) -> mbWebUrlRequestPtr {
        (self
            .mbNetCreateWebUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(url, method, mime)
    }
    pub unsafe fn mbNetAddHTTPHeaderFieldToUrlRequest(
        &self,
        request: mbWebUrlRequestPtr,
        name: *const utf8,
        value: *const utf8,
    ) {
        (self
            .mbNetAddHTTPHeaderFieldToUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(request, name, value)
    }
    pub unsafe fn mbNetStartUrlRequest(
        &self,
        webView: mbWebView,
        request: mbWebUrlRequestPtr,
        param: *mut ::std::os::raw::c_void,
        callbacks: *const mbUrlRequestCallbacks,
    ) -> ::std::os::raw::c_int {
        (self
            .mbNetStartUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(webView, request, param, callbacks)
    }
    pub unsafe fn mbNetGetHttpStatusCode(
        &self,
        response: mbWebUrlResponsePtr,
    ) -> ::std::os::raw::c_int {
        (self
            .mbNetGetHttpStatusCode
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn mbNetGetRequestMethod(&self, jobPtr: mbNetJob) -> mbRequestType {
        (self
            .mbNetGetRequestMethod
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetGetExpectedContentLength(
        &self,
        response: mbWebUrlResponsePtr,
    ) -> ::std::os::raw::c_longlong {
        (self
            .mbNetGetExpectedContentLength
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn mbNetGetResponseUrl(&self, response: mbWebUrlResponsePtr) -> *const utf8 {
        (self
            .mbNetGetResponseUrl
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn mbNetCancelWebUrlRequest(&self, requestId: ::std::os::raw::c_int) {
        (self
            .mbNetCancelWebUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(requestId)
    }
    pub unsafe fn mbSetViewProxy(&self, webView: mbWebView, proxy: *const mbProxy) {
        (self
            .mbSetViewProxy
            .as_ref()
            .expect("Expected function, got error."))(webView, proxy)
    }
    pub unsafe fn mbNetSetMIMEType(&self, jobPtr: mbNetJob, type_: *const ::std::os::raw::c_char) {
        (self
            .mbNetSetMIMEType
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, type_)
    }
    pub unsafe fn mbNetGetMIMEType(&self, jobPtr: mbNetJob) -> *const ::std::os::raw::c_char {
        (self
            .mbNetGetMIMEType
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbNetGetHTTPHeaderField(
        &self,
        job: mbNetJob,
        key: *const ::std::os::raw::c_char,
        fromRequestOrResponse: BOOL,
    ) -> *const utf8 {
        (self
            .mbNetGetHTTPHeaderField
            .as_ref()
            .expect("Expected function, got error."))(job, key, fromRequestOrResponse)
    }
    pub unsafe fn mbNetSetHTTPHeaderField(
        &self,
        jobPtr: mbNetJob,
        key: *const WCHAR,
        value: *const WCHAR,
        response: BOOL,
    ) {
        (self
            .mbNetSetHTTPHeaderField
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, key, value, response)
    }
    pub unsafe fn mbNetSetHTTPHeaderFieldUtf8(
        &self,
        jobPtr: mbNetJob,
        key: *const utf8,
        value: *const utf8,
        response: BOOL,
    ) {
        (self
            .mbNetSetHTTPHeaderFieldUtf8
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, key, value, response)
    }
    pub unsafe fn mbSetMouseEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetMouseEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetTouchEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetTouchEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetSystemTouchEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetSystemTouchEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetContextMenuEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetContextMenuEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetNavigationToNewWindowEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetNavigationToNewWindowEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetHeadlessEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetHeadlessEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetDragDropEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetDragDropEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetDragEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetDragEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetContextMenuItemShow(
        &self,
        webView: mbWebView,
        item: mbMenuItemId,
        isShow: BOOL,
    ) {
        (self
            .mbSetContextMenuItemShow
            .as_ref()
            .expect("Expected function, got error."))(webView, item, isShow)
    }
    pub unsafe fn mbSetHandle(&self, webView: mbWebView, wnd: HWND) {
        (self
            .mbSetHandle
            .as_ref()
            .expect("Expected function, got error."))(webView, wnd)
    }
    pub unsafe fn mbSetHandleOffset(
        &self,
        webView: mbWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .mbSetHandleOffset
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y)
    }
    pub unsafe fn mbGetPlatformWindowHandle(
        &self,
        webView: mbWebView,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mbGetPlatformWindowHandle
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGetHostHWND(&self, webView: mbWebView) -> HWND {
        (self
            .mbGetHostHWND
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbSetTransparent(&self, webviewHandle: mbWebView, transparent: BOOL) {
        (self
            .mbSetTransparent
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, transparent)
    }
    pub unsafe fn mbSetViewSettings(
        &self,
        webviewHandle: mbWebView,
        settings: *const mbViewSettings,
    ) {
        (self
            .mbSetViewSettings
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, settings)
    }
    pub unsafe fn mbSetCspCheckEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetCspCheckEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetNpapiPluginsEnabled(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetNpapiPluginsEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetMemoryCacheEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetMemoryCacheEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetCookie(&self, webView: mbWebView, url: *const utf8, cookie: *const utf8) {
        (self
            .mbSetCookie
            .as_ref()
            .expect("Expected function, got error."))(webView, url, cookie)
    }
    pub unsafe fn mbSetCookieEnabled(&self, webView: mbWebView, enable: BOOL) {
        (self
            .mbSetCookieEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, enable)
    }
    pub unsafe fn mbSetCookieJarPath(&self, webView: mbWebView, path: *const WCHAR) {
        (self
            .mbSetCookieJarPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn mbSetCookieJarFullPath(&self, webView: mbWebView, path: *const WCHAR) {
        (self
            .mbSetCookieJarFullPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn mbSetLocalStorageFullPath(&self, webView: mbWebView, path: *const WCHAR) {
        (self
            .mbSetLocalStorageFullPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn mbGetTitle(&self, webView: mbWebView) -> *const utf8 {
        (self
            .mbGetTitle
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbSetWindowTitle(&self, webView: mbWebView, title: *const utf8) {
        (self
            .mbSetWindowTitle
            .as_ref()
            .expect("Expected function, got error."))(webView, title)
    }
    pub unsafe fn mbSetWindowTitleW(&self, webView: mbWebView, title: *const WCHAR) {
        (self
            .mbSetWindowTitleW
            .as_ref()
            .expect("Expected function, got error."))(webView, title)
    }
    pub unsafe fn mbGetUrl(&self, webView: mbWebView) -> *const utf8 {
        (self
            .mbGetUrl
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGetCursorInfoType(&self, webView: mbWebView) -> ::std::os::raw::c_int {
        (self
            .mbGetCursorInfoType
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbAddPluginDirectory(&self, webView: mbWebView, path: *const WCHAR) {
        (self
            .mbAddPluginDirectory
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn mbSetUserAgent(&self, webView: mbWebView, userAgent: *const utf8) {
        (self
            .mbSetUserAgent
            .as_ref()
            .expect("Expected function, got error."))(webView, userAgent)
    }
    pub unsafe fn mbSetZoomFactor(&self, webView: mbWebView, factor: f32) {
        (self
            .mbSetZoomFactor
            .as_ref()
            .expect("Expected function, got error."))(webView, factor)
    }
    pub unsafe fn mbGetZoomFactor(&self, webView: mbWebView) -> f32 {
        (self
            .mbGetZoomFactor
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbSetDiskCacheEnabled(&self, webView: mbWebView, enable: BOOL) {
        (self
            .mbSetDiskCacheEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, enable)
    }
    pub unsafe fn mbSetDiskCachePath(&self, webView: mbWebView, path: *const WCHAR) {
        (self
            .mbSetDiskCachePath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn mbSetDiskCacheLimit(&self, webView: mbWebView, limit: usize) {
        (self
            .mbSetDiskCacheLimit
            .as_ref()
            .expect("Expected function, got error."))(webView, limit)
    }
    pub unsafe fn mbSetDiskCacheLimitDisk(&self, webView: mbWebView, limit: usize) {
        (self
            .mbSetDiskCacheLimitDisk
            .as_ref()
            .expect("Expected function, got error."))(webView, limit)
    }
    pub unsafe fn mbSetDiskCacheLevel(&self, webView: mbWebView, Level: ::std::os::raw::c_int) {
        (self
            .mbSetDiskCacheLevel
            .as_ref()
            .expect("Expected function, got error."))(webView, Level)
    }
    pub unsafe fn mbSetResourceGc(&self, webView: mbWebView, intervalSec: ::std::os::raw::c_int) {
        (self
            .mbSetResourceGc
            .as_ref()
            .expect("Expected function, got error."))(webView, intervalSec)
    }
    pub unsafe fn mbIsLoading(&self, webView: mbWebView) -> BOOL {
        (self
            .mbIsLoading
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbCanGoBackOrForward(&self, webView: mbWebView, isGoBack: BOOL) -> BOOL {
        (self
            .mbCanGoBackOrForward
            .as_ref()
            .expect("Expected function, got error."))(webView, isGoBack)
    }
    pub unsafe fn mbCanGoBack(
        &self,
        webView: mbWebView,
        callback: mbCanGoBackForwardCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCanGoBack
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbCanGoForward(
        &self,
        webView: mbWebView,
        callback: mbCanGoBackForwardCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCanGoForward
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbGetCookie(
        &self,
        webView: mbWebView,
        callback: mbGetCookieCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbGetCookie
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbGetCookieOnBlinkThread(&self, webView: mbWebView) -> *const utf8 {
        (self
            .mbGetCookieOnBlinkThread
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbClearCookie(&self, webView: mbWebView) {
        (self
            .mbClearCookie
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbResize(
        &self,
        webView: mbWebView,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .mbResize
            .as_ref()
            .expect("Expected function, got error."))(webView, w, h)
    }
    pub unsafe fn mbGetSize(&self, webView: mbWebView, rc: *mut mbRect) {
        (self
            .mbGetSize
            .as_ref()
            .expect("Expected function, got error."))(webView, rc)
    }
    pub unsafe fn mbGetWindowRect(&self, webview: mbWebView, rc: *mut mbRect) -> BOOL {
        (self
            .mbGetWindowRect
            .as_ref()
            .expect("Expected function, got error."))(webview, rc)
    }
    pub unsafe fn mbOnNavigation(
        &self,
        webView: mbWebView,
        callback: mbNavigationCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnNavigation
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnNavigationSync(
        &self,
        webView: mbWebView,
        callback: mbNavigationCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnNavigationSync
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnCreateView(
        &self,
        webView: mbWebView,
        callback: mbCreateViewCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnCreateView
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnDocumentReady(
        &self,
        webView: mbWebView,
        callback: mbDocumentReadyCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnDocumentReady
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnPaintUpdated(
        &self,
        webView: mbWebView,
        callback: mbPaintUpdatedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnPaintUpdated
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnPaintBitUpdated(
        &self,
        webView: mbWebView,
        callback: mbPaintBitUpdatedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnPaintBitUpdated
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnAcceleratedPaint(
        &self,
        webView: mbWebView,
        callback: mbAcceleratedPaintCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnAcceleratedPaint
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnLoadUrlBegin(
        &self,
        webView: mbWebView,
        callback: mbLoadUrlBeginCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadUrlBegin
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnLoadUrlEnd(
        &self,
        webView: mbWebView,
        callback: mbLoadUrlEndCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadUrlEnd
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnLoadUrlFail(
        &self,
        webView: mbWebView,
        callback: mbLoadUrlFailCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadUrlFail
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnTitleChanged(
        &self,
        webView: mbWebView,
        callback: mbTitleChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnTitleChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnURLChanged(
        &self,
        webView: mbWebView,
        callback: mbURLChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnURLChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnLoadingFinish(
        &self,
        webView: mbWebView,
        callback: mbLoadingFinishCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadingFinish
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnDownload(
        &self,
        webView: mbWebView,
        callback: mbDownloadCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnDownload
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnDownloadInBlinkThread(
        &self,
        webView: mbWebView,
        callback: mbDownloadInBlinkThreadCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnDownloadInBlinkThread
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnAlertBox(
        &self,
        webView: mbWebView,
        callback: mbAlertBoxCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnAlertBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnConfirmBox(
        &self,
        webView: mbWebView,
        callback: mbConfirmBoxCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnConfirmBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnPromptBox(
        &self,
        webView: mbWebView,
        callback: mbPromptBoxCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnPromptBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnNetGetFavicon(
        &self,
        webView: mbWebView,
        callback: mbNetGetFaviconCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnNetGetFavicon
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnConsole(
        &self,
        webView: mbWebView,
        callback: mbConsoleCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnConsole
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnClose(
        &self,
        webView: mbWebView,
        callback: mbCloseCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .mbOnClose
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnDestroy(
        &self,
        webView: mbWebView,
        callback: mbDestroyCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .mbOnDestroy
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnPrinting(
        &self,
        webView: mbWebView,
        callback: mbPrintingCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .mbOnPrinting
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnDidCreateScriptContext(
        &self,
        webView: mbWebView,
        callback: mbDidCreateScriptContextCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnDidCreateScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnWillReleaseScriptContext(
        &self,
        webView: mbWebView,
        callback: mbWillReleaseScriptContextCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnWillReleaseScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnPluginList(
        &self,
        webView: mbWebView,
        callback: mbGetPluginListCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnPluginList
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnImageBufferToDataURL(
        &self,
        webView: mbWebView,
        callback: mbImageBufferToDataURLCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnImageBufferToDataURL
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbGoBack(&self, webView: mbWebView) {
        (self
            .mbGoBack
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGoForward(&self, webView: mbWebView) {
        (self
            .mbGoForward
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbNavigateAtIndex(&self, webView: mbWebView, index: ::std::os::raw::c_int) {
        (self
            .mbNavigateAtIndex
            .as_ref()
            .expect("Expected function, got error."))(webView, index)
    }
    pub unsafe fn mbGetNavigateIndex(&self, webView: mbWebView) -> ::std::os::raw::c_int {
        (self
            .mbGetNavigateIndex
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbStopLoading(&self, webView: mbWebView) {
        (self
            .mbStopLoading
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbReload(&self, webView: mbWebView) {
        (self
            .mbReload
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbPerformCookieCommand(&self, webView: mbWebView, command: mbCookieCommand) {
        (self
            .mbPerformCookieCommand
            .as_ref()
            .expect("Expected function, got error."))(webView, command)
    }
    pub unsafe fn mbEditorSelectAll(&self, webView: mbWebView) {
        (self
            .mbEditorSelectAll
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorCopy(&self, webView: mbWebView) {
        (self
            .mbEditorCopy
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorCut(&self, webView: mbWebView) {
        (self
            .mbEditorCut
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorPaste(&self, webView: mbWebView) {
        (self
            .mbEditorPaste
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorDelete(&self, webView: mbWebView) {
        (self
            .mbEditorDelete
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorUndo(&self, webView: mbWebView) {
        (self
            .mbEditorUndo
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbFireMouseEvent(
        &self,
        webView: mbWebView,
        message: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .mbFireMouseEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, message, x, y, flags)
    }
    pub unsafe fn mbFireContextMenuEvent(
        &self,
        webView: mbWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .mbFireContextMenuEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, flags)
    }
    pub unsafe fn mbFireMouseWheelEvent(
        &self,
        webView: mbWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .mbFireMouseWheelEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, delta, flags)
    }
    pub unsafe fn mbFireKeyUpEvent(
        &self,
        webView: mbWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: BOOL,
    ) -> BOOL {
        (self
            .mbFireKeyUpEvent
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn mbFireKeyDownEvent(
        &self,
        webView: mbWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: BOOL,
    ) -> BOOL {
        (self
            .mbFireKeyDownEvent
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn mbFireKeyPressEvent(
        &self,
        webView: mbWebView,
        charCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: BOOL,
    ) -> BOOL {
        (self
            .mbFireKeyPressEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, charCode, flags, systemKey)
    }
    pub unsafe fn mbFireWindowsMessage(
        &self,
        webView: mbWebView,
        hWnd: HWND,
        message: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        result: *mut LRESULT,
    ) -> BOOL {
        (self
            .mbFireWindowsMessage
            .as_ref()
            .expect("Expected function, got error."))(
            webView, hWnd, message, wParam, lParam, result,
        )
    }
    pub unsafe fn mbSetFocus(&self, webView: mbWebView) {
        (self
            .mbSetFocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbKillFocus(&self, webView: mbWebView) {
        (self
            .mbKillFocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbShowWindow(&self, webview: mbWebView, show: ::std::os::raw::c_int) {
        (self
            .mbShowWindow
            .as_ref()
            .expect("Expected function, got error."))(webview, show)
    }
    pub unsafe fn mbLoadURL(&self, webView: mbWebView, url: *const utf8) {
        (self
            .mbLoadURL
            .as_ref()
            .expect("Expected function, got error."))(webView, url)
    }
    pub unsafe fn mbLoadHtmlWithBaseUrl(
        &self,
        webView: mbWebView,
        html: *const utf8,
        baseUrl: *const utf8,
    ) {
        (self
            .mbLoadHtmlWithBaseUrl
            .as_ref()
            .expect("Expected function, got error."))(webView, html, baseUrl)
    }
    pub unsafe fn mbPostURL(
        &self,
        webView: mbWebView,
        url: *const utf8,
        postData: *const ::std::os::raw::c_char,
        postLen: ::std::os::raw::c_int,
    ) {
        (self
            .mbPostURL
            .as_ref()
            .expect("Expected function, got error."))(webView, url, postData, postLen)
    }
    pub unsafe fn mbGetLockedViewDC(&self, webView: mbWebView) -> HDC {
        (self
            .mbGetLockedViewDC
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbUnlockViewDC(&self, webView: mbWebView) {
        (self
            .mbUnlockViewDC
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbWake(&self, webView: mbWebView) {
        (self.mbWake.as_ref().expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbJsToDouble(&self, es: mbJsExecState, v: mbJsValue) -> f64 {
        (self
            .mbJsToDouble
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbJsToBoolean(&self, es: mbJsExecState, v: mbJsValue) -> BOOL {
        (self
            .mbJsToBoolean
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbJsToString(&self, es: mbJsExecState, v: mbJsValue) -> *const utf8 {
        (self
            .mbJsToString
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbJsToWebFrameHandle(&self, es: mbJsExecState, v: mbJsValue) -> mbWebFrameHandle {
        (self
            .mbJsToWebFrameHandle
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbGetParentWebFrameHandle(
        &self,
        webView: mbWebView,
        frame: mbWebFrameHandle,
    ) -> mbWebFrameHandle {
        (self
            .mbGetParentWebFrameHandle
            .as_ref()
            .expect("Expected function, got error."))(webView, frame)
    }
    pub unsafe fn mbGetJsValueType(&self, es: mbJsExecState, v: mbJsValue) -> mbJsType {
        (self
            .mbGetJsValueType
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbJsValueAddRef(&self, es: mbJsExecState, v: mbJsValue) {
        (self
            .mbJsValueAddRef
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbJsValueDeref(&self, es: mbJsExecState, v: mbJsValue) {
        (self
            .mbJsValueDeref
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbOnJsQuery(
        &self,
        webView: mbWebView,
        callback: mbJsQueryCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnJsQuery
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbOnJsQueryEx(
        &self,
        webView: mbWebView,
        callback: mbJsQueryExCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnJsQueryEx
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbResponseQuery(
        &self,
        webView: mbWebView,
        queryId: i64,
        customMsg: ::std::os::raw::c_int,
        response: *const utf8,
    ) {
        (self
            .mbResponseQuery
            .as_ref()
            .expect("Expected function, got error."))(webView, queryId, customMsg, response)
    }
    pub unsafe fn mbRunJs(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        script: *const utf8,
        isInClosure: BOOL,
        callback: mbRunJsCallback,
        param: *mut ::std::os::raw::c_void,
        unuse: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbRunJs
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            frameId,
            script,
            isInClosure,
            callback,
            param,
            unuse,
        )
    }
    pub unsafe fn mbRunJsSync(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        script: *const utf8,
        isInClosure: BOOL,
    ) -> mbJsValue {
        (self
            .mbRunJsSync
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, script, isInClosure)
    }
    pub unsafe fn mbWebFrameGetMainFrame(&self, webView: mbWebView) -> mbWebFrameHandle {
        (self
            .mbWebFrameGetMainFrame
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbIsMainFrame(&self, webView: mbWebView, frameId: mbWebFrameHandle) -> BOOL {
        (self
            .mbIsMainFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn mbSetNodeJsEnable(&self, webView: mbWebView, b: BOOL) {
        (self
            .mbSetNodeJsEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn mbSetDeviceParameter(
        &self,
        webView: mbWebView,
        device: *const ::std::os::raw::c_char,
        paramStr: *const ::std::os::raw::c_char,
        paramInt: ::std::os::raw::c_int,
        paramFloat: f32,
    ) {
        (self
            .mbSetDeviceParameter
            .as_ref()
            .expect("Expected function, got error."))(
            webView, device, paramStr, paramInt, paramFloat,
        )
    }
    pub unsafe fn mbGetContentAsMarkup(
        &self,
        webView: mbWebView,
        calback: mbGetContentAsMarkupCallback,
        param: *mut ::std::os::raw::c_void,
        frameId: mbWebFrameHandle,
    ) {
        (self
            .mbGetContentAsMarkup
            .as_ref()
            .expect("Expected function, got error."))(webView, calback, param, frameId)
    }
    pub unsafe fn mbGetSource(
        &self,
        webView: mbWebView,
        calback: mbGetSourceCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbGetSource
            .as_ref()
            .expect("Expected function, got error."))(webView, calback, param)
    }
    pub unsafe fn mbGetWindowScreenshotSync(
        &self,
        webView: mbWebView,
        format: mbImageFormat,
    ) -> *mut mbMemBuf {
        (self
            .mbGetWindowScreenshotSync
            .as_ref()
            .expect("Expected function, got error."))(webView, format)
    }
    pub unsafe fn mbGetSourceSync(&self, webView: mbWebView) -> mbStringPtr {
        (self
            .mbGetSourceSync
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbUtilSerializeToMHTML(
        &self,
        webView: mbWebView,
        calback: mbGetSourceCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbUtilSerializeToMHTML
            .as_ref()
            .expect("Expected function, got error."))(webView, calback, param)
    }
    pub unsafe fn mbUtilCreateRequestCode(
        &self,
        registerInfo: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mbUtilCreateRequestCode
            .as_ref()
            .expect("Expected function, got error."))(registerInfo)
    }
    pub unsafe fn mbUtilIsRegistered(&self, defaultPath: *const WCHAR) -> BOOL {
        (self
            .mbUtilIsRegistered
            .as_ref()
            .expect("Expected function, got error."))(defaultPath)
    }
    pub unsafe fn mbUtilPrint(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        printParams: *const mbPrintSettings,
    ) -> BOOL {
        (self
            .mbUtilPrint
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, printParams)
    }
    pub unsafe fn mbUtilBase64Encode(&self, str_: *const utf8) -> *const utf8 {
        (self
            .mbUtilBase64Encode
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbUtilBase64EncodeBuffer(
        &self,
        str_: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> *mut mbMemBuf {
        (self
            .mbUtilBase64EncodeBuffer
            .as_ref()
            .expect("Expected function, got error."))(str_, len)
    }
    pub unsafe fn mbUtilBase64Decode(&self, str_: *const utf8) -> *const utf8 {
        (self
            .mbUtilBase64Decode
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbUtilDecodeURLEscape(&self, url: *const utf8) -> *const utf8 {
        (self
            .mbUtilDecodeURLEscape
            .as_ref()
            .expect("Expected function, got error."))(url)
    }
    pub unsafe fn mbUtilEncodeURLEscape(&self, url: *const utf8) -> *const utf8 {
        (self
            .mbUtilEncodeURLEscape
            .as_ref()
            .expect("Expected function, got error."))(url)
    }
    pub unsafe fn mbUtilCreateV8Snapshot(&self, str_: *const utf8) -> *const mbMemBuf {
        (self
            .mbUtilCreateV8Snapshot
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn mbUtilPrintToPdf(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        settings: *const mbPrintSettings,
        callback: mbPrintPdfDataCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbUtilPrintToPdf
            .as_ref()
            .expect("Expected function, got error."))(
            webView, frameId, settings, callback, param
        )
    }
    pub unsafe fn mbUtilPrintToBitmap(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        settings: *const mbScreenshotSettings,
        callback: mbPrintBitmapCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbUtilPrintToBitmap
            .as_ref()
            .expect("Expected function, got error."))(
            webView, frameId, settings, callback, param
        )
    }
    pub unsafe fn mbUtilScreenshot(
        &self,
        webView: mbWebView,
        settings: *const mbScreenshotSettings,
        callback: mbOnScreenshot,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbUtilScreenshot
            .as_ref()
            .expect("Expected function, got error."))(webView, settings, callback, param)
    }
    pub unsafe fn mbUtilsSilentPrint(
        &self,
        webView: mbWebView,
        settings: *const ::std::os::raw::c_char,
    ) -> BOOL {
        (self
            .mbUtilsSilentPrint
            .as_ref()
            .expect("Expected function, got error."))(webView, settings)
    }
    pub unsafe fn mbPopupDownloadMgr(
        &self,
        webView: mbWebView,
        url: *const ::std::os::raw::c_char,
        downloadJob: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .mbPopupDownloadMgr
            .as_ref()
            .expect("Expected function, got error."))(webView, url, downloadJob)
    }
    pub unsafe fn mbPopupDialogAndDownload(
        &self,
        webView: mbWebView,
        dialogOpt: *const mbDialogOptions,
        contentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: mbNetJob,
        dataBind: *mut mbNetJobDataBind,
        callbackBind: *mut mbDownloadBind,
    ) -> mbDownloadOpt {
        (self
            .mbPopupDialogAndDownload
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            dialogOpt,
            contentLength,
            url,
            mime,
            disposition,
            job,
            dataBind,
            callbackBind,
        )
    }
    pub unsafe fn mbDownloadByPath(
        &self,
        webView: mbWebView,
        downloadOptions: *const mbDownloadOptions,
        path: *const WCHAR,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: mbNetJob,
        dataBind: *mut mbNetJobDataBind,
        callbackBind: *mut mbDownloadBind,
    ) -> mbDownloadOpt {
        (self
            .mbDownloadByPath
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            downloadOptions,
            path,
            expectedContentLength,
            url,
            mime,
            disposition,
            job,
            dataBind,
            callbackBind,
        )
    }
    pub unsafe fn mbDownloadByUtf8Path(
        &self,
        webView: mbWebView,
        downloadOptions: *const mbDownloadOptions,
        path: *const ::std::os::raw::c_char,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: mbNetJob,
        dataBind: *mut mbNetJobDataBind,
        callbackBind: *mut mbDownloadBind,
    ) -> mbDownloadOpt {
        (self
            .mbDownloadByUtf8Path
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            downloadOptions,
            path,
            expectedContentLength,
            url,
            mime,
            disposition,
            job,
            dataBind,
            callbackBind,
        )
    }
    pub unsafe fn mbGetPdfPageData(
        &self,
        webView: mbWebView,
        callback: mbOnGetPdfPageDataCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbGetPdfPageData
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbCreateMemBuf(
        &self,
        webView: mbWebView,
        buf: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> *mut mbMemBuf {
        (self
            .mbCreateMemBuf
            .as_ref()
            .expect("Expected function, got error."))(webView, buf, length)
    }
    pub unsafe fn mbFreeMemBuf(&self, buf: *mut mbMemBuf) {
        (self
            .mbFreeMemBuf
            .as_ref()
            .expect("Expected function, got error."))(buf)
    }
    pub unsafe fn mbPluginListBuilderAddPlugin(
        &self,
        builder: *mut ::std::os::raw::c_void,
        name: *const utf8,
        description: *const utf8,
        fileName: *const utf8,
    ) {
        (self
            .mbPluginListBuilderAddPlugin
            .as_ref()
            .expect("Expected function, got error."))(builder, name, description, fileName)
    }
    pub unsafe fn mbPluginListBuilderAddMediaTypeToLastPlugin(
        &self,
        builder: *mut ::std::os::raw::c_void,
        name: *const utf8,
        description: *const utf8,
    ) {
        (self
            .mbPluginListBuilderAddMediaTypeToLastPlugin
            .as_ref()
            .expect("Expected function, got error."))(builder, name, description)
    }
    pub unsafe fn mbPluginListBuilderAddFileExtensionToLastMediaType(
        &self,
        builder: *mut ::std::os::raw::c_void,
        fileExtension: *const utf8,
    ) {
        (self
            .mbPluginListBuilderAddFileExtensionToLastMediaType
            .as_ref()
            .expect("Expected function, got error."))(builder, fileExtension)
    }
    pub unsafe fn mbEnableHighDPISupport(&self) {
        (self
            .mbEnableHighDPISupport
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbRunMessageLoop(&self) {
        (self
            .mbRunMessageLoop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbExitMessageLoop(&self) {
        (self
            .mbExitMessageLoop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbOnLoadUrlFinish(
        &self,
        webView: mbWebView,
        callback: mbLoadUrlFinishCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadUrlFinish
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnLoadUrlHeadersReceived(
        &self,
        webView: mbWebView,
        callback: mbLoadUrlHeadersReceivedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnLoadUrlHeadersReceived
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn mbOnDocumentReadyInBlinkThread(
        &self,
        webView: mbWebView,
        callback: mbDocumentReadyCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnDocumentReadyInBlinkThread
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn mbUtilSetDefaultPrinterSettings(
        &self,
        webView: mbWebView,
        setting: *const mbDefaultPrinterSettings,
    ) {
        (self
            .mbUtilSetDefaultPrinterSettings
            .as_ref()
            .expect("Expected function, got error."))(webView, setting)
    }
    pub unsafe fn mbGetContentWidth(&self, webView: mbWebView) -> ::std::os::raw::c_int {
        (self
            .mbGetContentWidth
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGetContentHeight(&self, webView: mbWebView) -> ::std::os::raw::c_int {
        (self
            .mbGetContentHeight
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGetWebViewForCurrentContext(&self) -> mbWebView {
        (self
            .mbGetWebViewForCurrentContext
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbRegisterEmbedderCustomElement(
        &self,
        webviewHandle: mbWebView,
        frameId: mbWebFrameHandle,
        name: *const ::std::os::raw::c_char,
        options: *mut ::std::os::raw::c_void,
        outResult: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .mbRegisterEmbedderCustomElement
            .as_ref()
            .expect("Expected function, got error."))(
            webviewHandle,
            frameId,
            name,
            options,
            outResult,
        )
    }
    pub unsafe fn mbOnNodeCreateProcess(
        &self,
        webviewHandle: mbWebView,
        callback: mbNodeOnCreateProcessCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnNodeCreateProcess
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, callback, param)
    }
    pub unsafe fn mbGetGlobalExecByFrame(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
    ) -> mbJsExecState {
        (self
            .mbGetGlobalExecByFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn mbJsToV8Value(
        &self,
        es: mbJsExecState,
        v: mbJsValue,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mbJsToV8Value
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn mbOnThreadIdle(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnThreadIdle
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbOnBlinkThreadInit(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbOnBlinkThreadInit
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbCallBlinkThreadAsync(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCallBlinkThreadAsync
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbCallBlinkThreadSync(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCallBlinkThreadSync
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbCallUiThreadSync(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCallUiThreadSync
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbCallUiThreadAsync(
        &self,
        callback: mbThreadCallback,
        param1: *mut ::std::os::raw::c_void,
        param2: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbCallUiThreadAsync
            .as_ref()
            .expect("Expected function, got error."))(callback, param1, param2)
    }
    pub unsafe fn mbSetUserKeyValue(
        &self,
        webView: mbWebView,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbSetUserKeyValue
            .as_ref()
            .expect("Expected function, got error."))(webView, key, value)
    }
    pub unsafe fn mbGetUserKeyValue(
        &self,
        webView: mbWebView,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mbGetUserKeyValue
            .as_ref()
            .expect("Expected function, got error."))(webView, key)
    }
    pub unsafe fn mbGoToOffset(&self, webView: mbWebView, offset: ::std::os::raw::c_int) {
        (self
            .mbGoToOffset
            .as_ref()
            .expect("Expected function, got error."))(webView, offset)
    }
    pub unsafe fn mbGoToIndex(&self, webView: mbWebView, index: ::std::os::raw::c_int) {
        (self
            .mbGoToIndex
            .as_ref()
            .expect("Expected function, got error."))(webView, index)
    }
    pub unsafe fn mbEditorRedo(&self, webView: mbWebView) {
        (self
            .mbEditorRedo
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbEditorUnSelect(&self, webView: mbWebView) {
        (self
            .mbEditorUnSelect
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn mbGetBlinkMainThreadIsolate(&self) -> v8Isolate {
        (self
            .mbGetBlinkMainThreadIsolate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mbInsertCSSByFrame(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        cssText: *const utf8,
    ) {
        (self
            .mbInsertCSSByFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, cssText)
    }
    pub unsafe fn mbWebFrameGetMainWorldScriptContext(
        &self,
        webView: mbWebView,
        frameId: mbWebFrameHandle,
        contextOut: v8ContextPtr,
    ) {
        (self
            .mbWebFrameGetMainWorldScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, contextOut)
    }
    pub unsafe fn mbNetGetReferrer(&self, jobPtr: mbNetJob) -> *const ::std::os::raw::c_char {
        (self
            .mbNetGetReferrer
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn mbPostToUiThread(
        &self,
        callback: mbOnCallUiThread,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mbPostToUiThread
            .as_ref()
            .expect("Expected function, got error."))(callback, param)
    }
    pub unsafe fn mbPostToUiThreadDelay(
        &self,
        callback: mbOnCallUiThread,
        param: *mut ::std::os::raw::c_void,
        millisecond: usize,
    ) {
        (self
            .mbPostToUiThreadDelay
            .as_ref()
            .expect("Expected function, got error."))(callback, param, millisecond)
    }
    pub unsafe fn mbSetEditable(&self, webView: mbWebView, editable: bool) {
        (self
            .mbSetEditable
            .as_ref()
            .expect("Expected function, got error."))(webView, editable)
    }
    pub unsafe fn mbSetLanguage(
        &self,
        webView: mbWebView,
        language: *const ::std::os::raw::c_char,
    ) {
        (self
            .mbSetLanguage
            .as_ref()
            .expect("Expected function, got error."))(webView, language)
    }
    pub unsafe fn mbQueryState(
        &self,
        webviewHandle: mbWebView,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .mbQueryState
            .as_ref()
            .expect("Expected function, got error."))(webviewHandle, type_)
    }
    pub unsafe fn mbGetProcAddr(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mbGetProcAddr
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
}
