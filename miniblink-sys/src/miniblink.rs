/* automatically generated by rust-bindgen 0.69.4 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type LPBYTE = *mut BYTE;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type LPWSTR = *mut WCHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HDC = *mut HDC__;
pub type COLORREF = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
pub type RECT = tagRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
pub type POINT = tagPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOW {
    pub cb: DWORD,
    pub lpReserved: LPWSTR,
    pub lpDesktop: LPWSTR,
    pub lpTitle: LPWSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
pub type STARTUPINFOW = _STARTUPINFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeRect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
pub type wkeRect = _wkeRect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkePoint {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
pub type wkePoint = _wkePoint;
pub type utf8 = ::std::os::raw::c_char;
pub type jsExecState = *mut ::std::os::raw::c_void;
pub type jsValue = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tagWkeWebView {
    _unused: [u8; 0],
}
pub type wkeWebView = *mut _tagWkeWebView;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tagWkeString {
    _unused: [u8; 0],
}
pub type wkeString = *mut _tagWkeString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tagWkeMediaPlayer {
    _unused: [u8; 0],
}
pub type wkeMediaPlayer = *mut _tagWkeMediaPlayer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tagWkeMediaPlayerClient {
    _unused: [u8; 0],
}
pub type wkeMediaPlayerClient = *mut _tagWkeMediaPlayerClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tabblinkWebURLRequestPtr {
    _unused: [u8; 0],
}
pub type blinkWebURLRequestPtr = *mut _tabblinkWebURLRequestPtr;
impl _wkeProxyType {
    pub const WKE_PROXY_NONE: _wkeProxyType = _wkeProxyType(0);
}
impl _wkeProxyType {
    pub const WKE_PROXY_HTTP: _wkeProxyType = _wkeProxyType(1);
}
impl _wkeProxyType {
    pub const WKE_PROXY_SOCKS4: _wkeProxyType = _wkeProxyType(2);
}
impl _wkeProxyType {
    pub const WKE_PROXY_SOCKS4A: _wkeProxyType = _wkeProxyType(3);
}
impl _wkeProxyType {
    pub const WKE_PROXY_SOCKS5: _wkeProxyType = _wkeProxyType(4);
}
impl _wkeProxyType {
    pub const WKE_PROXY_SOCKS5HOSTNAME: _wkeProxyType = _wkeProxyType(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeProxyType(pub ::std::os::raw::c_int);
pub use self::_wkeProxyType as wkeProxyType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeProxy {
    pub type_: wkeProxyType,
    pub hostname: [::std::os::raw::c_char; 100usize],
    pub port: ::std::os::raw::c_ushort,
    pub username: [::std::os::raw::c_char; 50usize],
    pub password: [::std::os::raw::c_char; 50usize],
}
pub type wkeProxy = _wkeProxy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeSettings {
    pub proxy: wkeProxy,
    pub mask: ::std::os::raw::c_uint,
    pub extension: *const ::std::os::raw::c_char,
}
pub type wkeSettings = _wkeSettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeViewSettings {
    pub size: ::std::os::raw::c_int,
    pub bgColor: ::std::os::raw::c_uint,
}
pub type wkeViewSettings = _wkeViewSettings;
pub type wkeWebFrameHandle = *mut ::std::os::raw::c_void;
impl _wkeMenuItemId {
    pub const kWkeMenuSelectedAllId: _wkeMenuItemId = _wkeMenuItemId(2);
}
impl _wkeMenuItemId {
    pub const kWkeMenuSelectedTextId: _wkeMenuItemId = _wkeMenuItemId(4);
}
impl _wkeMenuItemId {
    pub const kWkeMenuUndoId: _wkeMenuItemId = _wkeMenuItemId(8);
}
impl _wkeMenuItemId {
    pub const kWkeMenuCopyImageId: _wkeMenuItemId = _wkeMenuItemId(16);
}
impl _wkeMenuItemId {
    pub const kWkeMenuInspectElementAtId: _wkeMenuItemId = _wkeMenuItemId(32);
}
impl _wkeMenuItemId {
    pub const kWkeMenuCutId: _wkeMenuItemId = _wkeMenuItemId(64);
}
impl _wkeMenuItemId {
    pub const kWkeMenuPasteId: _wkeMenuItemId = _wkeMenuItemId(128);
}
impl _wkeMenuItemId {
    pub const kWkeMenuPrintId: _wkeMenuItemId = _wkeMenuItemId(256);
}
impl _wkeMenuItemId {
    pub const kWkeMenuGoForwardId: _wkeMenuItemId = _wkeMenuItemId(512);
}
impl _wkeMenuItemId {
    pub const kWkeMenuGoBackId: _wkeMenuItemId = _wkeMenuItemId(1024);
}
impl _wkeMenuItemId {
    pub const kWkeMenuReloadId: _wkeMenuItemId = _wkeMenuItemId(2048);
}
impl _wkeMenuItemId {
    pub const kWkeMenuSaveImageId: _wkeMenuItemId = _wkeMenuItemId(4096);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeMenuItemId(pub ::std::os::raw::c_int);
pub use self::_wkeMenuItemId as wkeMenuItemId;
pub type FILE_OPEN_ = ::std::option::Option<
    unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
>;
pub type FILE_CLOSE_ =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>;
pub type FILE_SIZE =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void) -> usize>;
pub type FILE_READ = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type FILE_SEEK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_int,
        origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type WKE_FILE_OPEN = FILE_OPEN_;
pub type WKE_FILE_CLOSE = FILE_CLOSE_;
pub type WKE_FILE_SIZE = FILE_SIZE;
pub type WKE_FILE_READ = FILE_READ;
pub type WKE_FILE_SEEK = FILE_SEEK;
pub type ON_TITLE_CHANGED = ::std::option::Option<
    unsafe extern "C" fn(clientHandler: *const _wkeClientHandler, title: wkeString),
>;
pub type ON_URL_CHANGED = ::std::option::Option<
    unsafe extern "C" fn(clientHandler: *const _wkeClientHandler, url: wkeString),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeClientHandler {
    pub onTitleChanged: ON_TITLE_CHANGED,
    pub onURLChanged: ON_URL_CHANGED,
}
pub type wkeClientHandler = _wkeClientHandler;
pub type wkeCookieVisitor = ::std::option::Option<
    unsafe extern "C" fn(
        params: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        secure: ::std::os::raw::c_int,
        httpOnly: ::std::os::raw::c_int,
        expires: *mut ::std::os::raw::c_int,
    ) -> bool,
>;
impl _wkeCookieCommand {
    pub const wkeCookieCommandClearAllCookies: _wkeCookieCommand = _wkeCookieCommand(0);
}
impl _wkeCookieCommand {
    pub const wkeCookieCommandClearSessionCookies: _wkeCookieCommand = _wkeCookieCommand(1);
}
impl _wkeCookieCommand {
    pub const wkeCookieCommandFlushCookiesToFile: _wkeCookieCommand = _wkeCookieCommand(2);
}
impl _wkeCookieCommand {
    pub const wkeCookieCommandReloadCookiesFromFile: _wkeCookieCommand = _wkeCookieCommand(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeCookieCommand(pub ::std::os::raw::c_int);
pub use self::_wkeCookieCommand as wkeCookieCommand;
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_LINKCLICK: _wkeNavigationType = _wkeNavigationType(0);
}
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_FORMSUBMITTE: _wkeNavigationType = _wkeNavigationType(1);
}
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_BACKFORWARD: _wkeNavigationType = _wkeNavigationType(2);
}
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_RELOAD: _wkeNavigationType = _wkeNavigationType(3);
}
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_FORMRESUBMITT: _wkeNavigationType = _wkeNavigationType(4);
}
impl _wkeNavigationType {
    pub const WKE_NAVIGATION_TYPE_OTHER: _wkeNavigationType = _wkeNavigationType(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeNavigationType(pub ::std::os::raw::c_int);
pub use self::_wkeNavigationType as wkeNavigationType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeWindowFeatures {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub menuBarVisible: bool,
    pub statusBarVisible: bool,
    pub toolBarVisible: bool,
    pub locationBarVisible: bool,
    pub scrollbarsVisible: bool,
    pub resizable: bool,
    pub fullscreen: bool,
}
pub type wkeWindowFeatures = _wkeWindowFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeMemBuf {
    pub unuse: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub length: usize,
}
pub type wkeMemBuf = _wkeMemBuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeWebDragData {
    pub __bindgen_padding_0: [u64; 10usize],
    pub m_itemList: *mut _wkeWebDragData_Item,
    pub m_itemListLength: ::std::os::raw::c_int,
    pub m_modifierKeyState: ::std::os::raw::c_int,
    pub m_filesystemId: *mut wkeMemBuf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeWebDragData_Item {
    pub storageType: _wkeWebDragData_Item_wkeStorageType,
    pub stringType: *mut wkeMemBuf,
    pub stringData: *mut wkeMemBuf,
    pub filenameData: *mut wkeMemBuf,
    pub displayNameData: *mut wkeMemBuf,
    pub binaryData: *mut wkeMemBuf,
    pub title: *mut wkeMemBuf,
    pub fileSystemURL: *mut wkeMemBuf,
    pub fileSystemFileSize: ::std::os::raw::c_longlong,
    pub baseURL: *mut wkeMemBuf,
}
impl _wkeWebDragData_Item_wkeStorageType {
    pub const StorageTypeString: _wkeWebDragData_Item_wkeStorageType =
        _wkeWebDragData_Item_wkeStorageType(0);
}
impl _wkeWebDragData_Item_wkeStorageType {
    pub const StorageTypeFilename: _wkeWebDragData_Item_wkeStorageType =
        _wkeWebDragData_Item_wkeStorageType(1);
}
impl _wkeWebDragData_Item_wkeStorageType {
    pub const StorageTypeBinaryData: _wkeWebDragData_Item_wkeStorageType =
        _wkeWebDragData_Item_wkeStorageType(2);
}
impl _wkeWebDragData_Item_wkeStorageType {
    pub const StorageTypeFileSystemFile: _wkeWebDragData_Item_wkeStorageType =
        _wkeWebDragData_Item_wkeStorageType(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeWebDragData_Item_wkeStorageType(pub ::std::os::raw::c_int);
pub type wkeWebDragData = _wkeWebDragData;
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationNone: _wkeWebDragOperation = _wkeWebDragOperation(0);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationCopy: _wkeWebDragOperation = _wkeWebDragOperation(1);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationLink: _wkeWebDragOperation = _wkeWebDragOperation(2);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationGeneric: _wkeWebDragOperation = _wkeWebDragOperation(4);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationPrivate: _wkeWebDragOperation = _wkeWebDragOperation(8);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationMove: _wkeWebDragOperation = _wkeWebDragOperation(16);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationDelete: _wkeWebDragOperation = _wkeWebDragOperation(32);
}
impl _wkeWebDragOperation {
    pub const wkeWebDragOperationEvery: _wkeWebDragOperation = _wkeWebDragOperation(-1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeWebDragOperation(pub ::std::os::raw::c_int);
pub use self::_wkeWebDragOperation as wkeWebDragOperation;
pub use self::wkeWebDragOperation as wkeWebDragOperationsMask;
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_MAIN_FRAME: _wkeResourceType = _wkeResourceType(0);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_SUB_FRAME: _wkeResourceType = _wkeResourceType(1);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_STYLESHEET: _wkeResourceType = _wkeResourceType(2);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_SCRIPT: _wkeResourceType = _wkeResourceType(3);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_IMAGE: _wkeResourceType = _wkeResourceType(4);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_FONT_RESOURCE: _wkeResourceType = _wkeResourceType(5);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_SUB_RESOURCE: _wkeResourceType = _wkeResourceType(6);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_OBJECT: _wkeResourceType = _wkeResourceType(7);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_MEDIA: _wkeResourceType = _wkeResourceType(8);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_WORKER: _wkeResourceType = _wkeResourceType(9);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_SHARED_WORKER: _wkeResourceType = _wkeResourceType(10);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_PREFETCH: _wkeResourceType = _wkeResourceType(11);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_FAVICON: _wkeResourceType = _wkeResourceType(12);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_XHR: _wkeResourceType = _wkeResourceType(13);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_PING: _wkeResourceType = _wkeResourceType(14);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_SERVICE_WORKER: _wkeResourceType = _wkeResourceType(15);
}
impl _wkeResourceType {
    pub const WKE_RESOURCE_TYPE_LAST_TYPE: _wkeResourceType = _wkeResourceType(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeResourceType(pub ::std::os::raw::c_int);
pub use self::_wkeResourceType as wkeResourceType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeWillSendRequestInfo {
    pub url: wkeString,
    pub newUrl: wkeString,
    pub resourceType: wkeResourceType,
    pub httpResponseCode: ::std::os::raw::c_int,
    pub method: wkeString,
    pub referrer: wkeString,
    pub headers: *mut ::std::os::raw::c_void,
}
pub type wkeWillSendRequestInfo = _wkeWillSendRequestInfo;
impl _wkeHttBodyElementType {
    pub const wkeHttBodyElementTypeData: _wkeHttBodyElementType = _wkeHttBodyElementType(0);
}
impl _wkeHttBodyElementType {
    pub const wkeHttBodyElementTypeFile: _wkeHttBodyElementType = _wkeHttBodyElementType(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeHttBodyElementType(pub ::std::os::raw::c_int);
pub use self::_wkeHttBodyElementType as wkeHttBodyElementType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkePostBodyElement {
    pub size: ::std::os::raw::c_int,
    pub type_: wkeHttBodyElementType,
    pub data: *mut wkeMemBuf,
    pub filePath: wkeString,
    pub fileStart: ::std::os::raw::c_longlong,
    pub fileLength: ::std::os::raw::c_longlong,
}
pub type wkePostBodyElement = _wkePostBodyElement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkePostBodyElements {
    pub size: ::std::os::raw::c_int,
    pub element: *mut *mut wkePostBodyElement,
    pub elementSize: usize,
    pub isDirty: bool,
}
pub type wkePostBodyElements = _wkePostBodyElements;
pub type wkeNetJob = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeSlist {
    pub data: *mut ::std::os::raw::c_char,
    pub next: *mut _wkeSlist,
}
pub type wkeSlist = _wkeSlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeTempCallbackInfo {
    pub size: ::std::os::raw::c_int,
    pub frame: wkeWebFrameHandle,
    pub willSendRequestInfo: *mut wkeWillSendRequestInfo,
    pub url: *const ::std::os::raw::c_char,
    pub postBody: *mut wkePostBodyElements,
    pub job: wkeNetJob,
}
pub type wkeTempCallbackInfo = _wkeTempCallbackInfo;
impl _wkeRequestType {
    pub const kWkeRequestTypeInvalidation: _wkeRequestType = _wkeRequestType(0);
}
impl _wkeRequestType {
    pub const kWkeRequestTypeGet: _wkeRequestType = _wkeRequestType(1);
}
impl _wkeRequestType {
    pub const kWkeRequestTypePost: _wkeRequestType = _wkeRequestType(2);
}
impl _wkeRequestType {
    pub const kWkeRequestTypePut: _wkeRequestType = _wkeRequestType(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeRequestType(pub ::std::os::raw::c_int);
pub use self::_wkeRequestType as wkeRequestType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkePdfDatas {
    pub count: ::std::os::raw::c_int,
    pub sizes: *mut usize,
    pub datas: *mut *const ::std::os::raw::c_void,
}
pub type wkePdfDatas = _wkePdfDatas;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkePrintSettings {
    pub structSize: ::std::os::raw::c_int,
    pub dpi: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub marginTop: ::std::os::raw::c_int,
    pub marginBottom: ::std::os::raw::c_int,
    pub marginLeft: ::std::os::raw::c_int,
    pub marginRight: ::std::os::raw::c_int,
    pub isPrintPageHeadAndFooter: BOOL,
    pub isPrintBackgroud: BOOL,
    pub isLandscape: BOOL,
    pub isPrintToMultiPage: BOOL,
}
pub type wkePrintSettings = _wkePrintSettings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeScreenshotSettings {
    pub structSize: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type wkeScreenshotSettings = _wkeScreenshotSettings;
pub type wkeCaretChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        r: *const wkeRect,
    ),
>;
pub type wkeTitleChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, param: *mut ::std::os::raw::c_void, title: wkeString),
>;
pub type wkeURLChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, param: *mut ::std::os::raw::c_void, url: wkeString),
>;
pub type wkeURLChangedCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: wkeWebFrameHandle,
        url: wkeString,
    ),
>;
pub type wkePaintUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ),
>;
pub type wkePaintBitUpdatedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        r: *const wkeRect,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type wkeAlertBoxCallback = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, param: *mut ::std::os::raw::c_void, msg: wkeString),
>;
pub type wkeConfirmBoxCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        msg: wkeString,
    ) -> bool,
>;
pub type wkePromptBoxCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        msg: wkeString,
        defaultResult: wkeString,
        result: wkeString,
    ) -> bool,
>;
pub type wkeNavigationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        navigationType: wkeNavigationType,
        url: wkeString,
    ) -> bool,
>;
pub type wkeCreateViewCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        navigationType: wkeNavigationType,
        url: wkeString,
        windowFeatures: *const wkeWindowFeatures,
    ) -> wkeWebView,
>;
pub type wkeDocumentReadyCallback = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, param: *mut ::std::os::raw::c_void),
>;
pub type wkeDocumentReady2Callback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: wkeWebFrameHandle,
    ),
>;
pub type wkeOnShowDevtoolsCallback = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, param: *mut ::std::os::raw::c_void),
>;
pub type wkeNodeOnCreateProcessCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        applicationPath: *const WCHAR,
        arguments: *const WCHAR,
        startup: *mut STARTUPINFOW,
    ),
>;
pub type wkeOnPluginFindCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        mime: *const utf8,
        initializeFunc: *mut ::std::os::raw::c_void,
        getEntryPointsFunc: *mut ::std::os::raw::c_void,
        shutdownFunc: *mut ::std::os::raw::c_void,
    ),
>;
pub type wkeOnPrintCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: wkeWebFrameHandle,
        printParams: *mut ::std::os::raw::c_void,
    ),
>;
pub type wkeOnScreenshot = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_char,
        size: usize,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeMediaLoadInfo {
    pub size: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub duration: f64,
}
pub type wkeMediaLoadInfo = _wkeMediaLoadInfo;
pub type wkeWillMediaLoadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
        info: *mut wkeMediaLoadInfo,
    ),
>;
pub type wkeStartDraggingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frame: wkeWebFrameHandle,
        data: *const wkeWebDragData,
        mask: wkeWebDragOperationsMask,
        image: *const ::std::os::raw::c_void,
        dragImageOffset: *const wkePoint,
    ),
>;
pub type wkeUiThreadRunCallback =
    ::std::option::Option<unsafe extern "C" fn(hWnd: HWND, param: *mut ::std::os::raw::c_void)>;
pub type wkeUiThreadPostTaskCallback = ::std::option::Option<
    unsafe extern "C" fn(
        hWnd: HWND,
        callback: wkeUiThreadRunCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
impl _wkeOtherLoadType {
    pub const WKE_DID_START_LOADING: _wkeOtherLoadType = _wkeOtherLoadType(0);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_STOP_LOADING: _wkeOtherLoadType = _wkeOtherLoadType(1);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_NAVIGATE: _wkeOtherLoadType = _wkeOtherLoadType(2);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_NAVIGATE_IN_PAGE: _wkeOtherLoadType = _wkeOtherLoadType(3);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_GET_RESPONSE_DETAILS: _wkeOtherLoadType = _wkeOtherLoadType(4);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_GET_REDIRECT_REQUEST: _wkeOtherLoadType = _wkeOtherLoadType(5);
}
impl _wkeOtherLoadType {
    pub const WKE_DID_POST_REQUEST: _wkeOtherLoadType = _wkeOtherLoadType(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeOtherLoadType(pub ::std::os::raw::c_int);
pub use self::_wkeOtherLoadType as wkeOtherLoadType;
pub type wkeOnOtherLoadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        type_: wkeOtherLoadType,
        info: *mut wkeTempCallbackInfo,
    ),
>;
impl _wkeOnContextMenuItemClickType {
    pub const kWkeContextMenuItemClickTypePrint: _wkeOnContextMenuItemClickType =
        _wkeOnContextMenuItemClickType(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeOnContextMenuItemClickType(pub ::std::os::raw::c_int);
pub use self::_wkeOnContextMenuItemClickType as wkeOnContextMenuItemClickType;
impl _wkeOnContextMenuItemClickStep {
    pub const kWkeContextMenuItemClickStepShow: _wkeOnContextMenuItemClickStep =
        _wkeOnContextMenuItemClickStep(1);
}
impl _wkeOnContextMenuItemClickStep {
    pub const kWkeContextMenuItemClickStepClick: _wkeOnContextMenuItemClickStep =
        _wkeOnContextMenuItemClickStep(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeOnContextMenuItemClickStep(pub ::std::os::raw::c_int);
pub use self::_wkeOnContextMenuItemClickStep as wkeOnContextMenuItemClickStep;
pub type wkeOnContextMenuItemClickCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        type_: wkeOnContextMenuItemClickType,
        step: wkeOnContextMenuItemClickStep,
        frameId: wkeWebFrameHandle,
        info: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
impl _wkeLoadingResult {
    pub const WKE_LOADING_SUCCEEDED: _wkeLoadingResult = _wkeLoadingResult(0);
}
impl _wkeLoadingResult {
    pub const WKE_LOADING_FAILED: _wkeLoadingResult = _wkeLoadingResult(1);
}
impl _wkeLoadingResult {
    pub const WKE_LOADING_CANCELED: _wkeLoadingResult = _wkeLoadingResult(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeLoadingResult(pub ::std::os::raw::c_int);
pub use self::_wkeLoadingResult as wkeLoadingResult;
impl _wkeDownloadOpt {
    pub const kWkeDownloadOptCancel: _wkeDownloadOpt = _wkeDownloadOpt(0);
}
impl _wkeDownloadOpt {
    pub const kWkeDownloadOptCacheData: _wkeDownloadOpt = _wkeDownloadOpt(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeDownloadOpt(pub ::std::os::raw::c_int);
pub use self::_wkeDownloadOpt as wkeDownloadOpt;
pub type wkeNetJobDataRecvCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        job: wkeNetJob,
        data: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ),
>;
pub type wkeNetJobDataFinishCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        job: wkeNetJob,
        result: wkeLoadingResult,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeNetJobDataBind {
    pub param: *mut ::std::os::raw::c_void,
    pub recvCallback: wkeNetJobDataRecvCallback,
    pub finishCallback: wkeNetJobDataFinishCallback,
}
pub type wkeNetJobDataBind = _wkeNetJobDataBind;
pub type wkePopupDialogSaveNameCallback = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, filePath: *const wchar_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeDownloadBind {
    pub param: *mut ::std::os::raw::c_void,
    pub recvCallback: wkeNetJobDataRecvCallback,
    pub finishCallback: wkeNetJobDataFinishCallback,
    pub saveNameCallback: wkePopupDialogSaveNameCallback,
}
pub type wkeDownloadBind = _wkeDownloadBind;
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesOpenFile: wkeDialogProperties = wkeDialogProperties(2);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesOpenDirectory: wkeDialogProperties = wkeDialogProperties(4);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesMultiSelections: wkeDialogProperties = wkeDialogProperties(8);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesShowHiddenFiles: wkeDialogProperties = wkeDialogProperties(16);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesCreateDirectory: wkeDialogProperties = wkeDialogProperties(32);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesPromptToCreate: wkeDialogProperties = wkeDialogProperties(64);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesNoResolveAliases: wkeDialogProperties = wkeDialogProperties(128);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesTreatPackageAsDirectory: wkeDialogProperties =
        wkeDialogProperties(256);
}
impl wkeDialogProperties {
    pub const kWkeDialogPropertiesDontAddToRecent: wkeDialogProperties = wkeDialogProperties(512);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct wkeDialogProperties(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeFileFilter {
    pub name: *const utf8,
    pub extensions: *const utf8,
}
pub type wkeFileFilter = _wkeFileFilter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeDialogOptions {
    pub magic: ::std::os::raw::c_int,
    pub title: *mut utf8,
    pub defaultPath: *mut utf8,
    pub buttonLabel: *mut utf8,
    pub filters: *mut wkeFileFilter,
    pub filtersCount: ::std::os::raw::c_int,
    pub prop: wkeDialogProperties,
    pub message: *mut utf8,
    pub securityScopedBookmarks: BOOL,
}
pub type wkeDialogOptions = _wkeDialogOptions;
pub type wkeLoadingFinishCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: wkeString,
        result: wkeLoadingResult,
        failedReason: wkeString,
    ),
>;
pub type wkeDownloadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const ::std::os::raw::c_char,
    ) -> bool,
>;
pub type wkeDownload2Callback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: wkeNetJob,
        dataBind: *mut wkeNetJobDataBind,
    ) -> wkeDownloadOpt,
>;
impl _wkeConsoleLevel {
    pub const wkeLevelDebug: _wkeConsoleLevel = _wkeConsoleLevel(4);
}
impl _wkeConsoleLevel {
    pub const wkeLevelLog: _wkeConsoleLevel = _wkeConsoleLevel(1);
}
impl _wkeConsoleLevel {
    pub const wkeLevelInfo: _wkeConsoleLevel = _wkeConsoleLevel(5);
}
impl _wkeConsoleLevel {
    pub const wkeLevelWarning: _wkeConsoleLevel = _wkeConsoleLevel(2);
}
impl _wkeConsoleLevel {
    pub const wkeLevelError: _wkeConsoleLevel = _wkeConsoleLevel(3);
}
impl _wkeConsoleLevel {
    pub const wkeLevelRevokedError: _wkeConsoleLevel = _wkeConsoleLevel(6);
}
impl _wkeConsoleLevel {
    pub const wkeLevelLast: _wkeConsoleLevel = _wkeConsoleLevel(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeConsoleLevel(pub ::std::os::raw::c_int);
pub use self::_wkeConsoleLevel as wkeConsoleLevel;
pub type wkeConsoleCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        level: wkeConsoleLevel,
        message: wkeString,
        sourceName: wkeString,
        sourceLine: ::std::os::raw::c_uint,
        stackTrace: wkeString,
    ),
>;
pub type wkeOnCallUiThread = ::std::option::Option<
    unsafe extern "C" fn(webView: wkeWebView, paramOnInThread: *mut ::std::os::raw::c_void),
>;
pub type wkeCallUiThread = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        func: wkeOnCallUiThread,
        param: *mut ::std::os::raw::c_void,
    ),
>;
pub type wkeMediaPlayerFactory = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        client: wkeMediaPlayerClient,
        npBrowserFuncs: *mut ::std::os::raw::c_void,
        npPluginFuncs: *mut ::std::os::raw::c_void,
    ) -> wkeMediaPlayer,
>;
pub type wkeOnIsMediaPlayerSupportsMIMEType =
    ::std::option::Option<unsafe extern "C" fn(mime: *const utf8) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wkeWebUrlRequest {
    _unused: [u8; 0],
}
pub type wkeWebUrlRequestPtr = *mut wkeWebUrlRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wkeWebUrlResponse {
    _unused: [u8; 0],
}
pub type wkeWebUrlResponsePtr = *mut wkeWebUrlResponse;
pub type wkeOnUrlRequestWillRedirectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        oldRequest: wkeWebUrlRequestPtr,
        request: wkeWebUrlRequestPtr,
        redirectResponse: wkeWebUrlResponsePtr,
    ),
>;
pub type wkeOnUrlRequestDidReceiveResponseCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        request: wkeWebUrlRequestPtr,
        response: wkeWebUrlResponsePtr,
    ),
>;
pub type wkeOnUrlRequestDidReceiveDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        request: wkeWebUrlRequestPtr,
        data: *const ::std::os::raw::c_char,
        dataLength: ::std::os::raw::c_int,
    ),
>;
pub type wkeOnUrlRequestDidFailCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        request: wkeWebUrlRequestPtr,
        error: *const utf8,
    ),
>;
pub type wkeOnUrlRequestDidFinishLoadingCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        request: wkeWebUrlRequestPtr,
        finishTime: f64,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeUrlRequestCallbacks {
    pub willRedirectCallback: wkeOnUrlRequestWillRedirectCallback,
    pub didReceiveResponseCallback: wkeOnUrlRequestDidReceiveResponseCallback,
    pub didReceiveDataCallback: wkeOnUrlRequestDidReceiveDataCallback,
    pub didFailCallback: wkeOnUrlRequestDidFailCallback,
    pub didFinishLoadingCallback: wkeOnUrlRequestDidFinishLoadingCallback,
}
pub type wkeUrlRequestCallbacks = _wkeUrlRequestCallbacks;
pub type wkeLoadUrlBeginCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
    ) -> bool,
>;
pub type wkeLoadUrlEndCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ),
>;
pub type wkeLoadUrlFailCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
    ),
>;
pub type wkeLoadUrlHeadersReceivedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
    ),
>;
pub type wkeLoadUrlFinishCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
        len: ::std::os::raw::c_int,
    ),
>;
pub type wkeDidCreateScriptContextCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: wkeWebFrameHandle,
        context: *mut ::std::os::raw::c_void,
        extensionGroup: ::std::os::raw::c_int,
        worldId: ::std::os::raw::c_int,
    ),
>;
pub type wkeWillReleaseScriptContextCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        frameId: wkeWebFrameHandle,
        context: *mut ::std::os::raw::c_void,
        worldId: ::std::os::raw::c_int,
    ),
>;
pub type wkeNetResponseCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        job: wkeNetJob,
    ) -> bool,
>;
pub type wkeOnNetGetFaviconCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        url: *const utf8,
        buf: *mut wkeMemBuf,
    ),
>;
pub type v8ContextPtr = *mut ::std::os::raw::c_void;
pub type v8Isolate = *mut ::std::os::raw::c_void;
impl _wkeWindowType {
    pub const WKE_WINDOW_TYPE_POPUP: _wkeWindowType = _wkeWindowType(0);
}
impl _wkeWindowType {
    pub const WKE_WINDOW_TYPE_TRANSPARENT: _wkeWindowType = _wkeWindowType(1);
}
impl _wkeWindowType {
    pub const WKE_WINDOW_TYPE_CONTROL: _wkeWindowType = _wkeWindowType(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _wkeWindowType(pub ::std::os::raw::c_int);
pub use self::_wkeWindowType as wkeWindowType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wkeWindowCreateInfo {
    pub size: ::std::os::raw::c_int,
    pub parent: HWND,
    pub style: DWORD,
    pub styleEx: DWORD,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub color: COLORREF,
}
pub type wkeWindowCreateInfo = _wkeWindowCreateInfo;
pub type wkeWindowClosingCallback = ::std::option::Option<
    unsafe extern "C" fn(webWindow: wkeWebView, param: *mut ::std::os::raw::c_void) -> bool,
>;
pub type wkeWindowDestroyCallback = ::std::option::Option<
    unsafe extern "C" fn(webWindow: wkeWebView, param: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wkeDraggableRegion {
    pub bounds: RECT,
    pub draggable: bool,
}
pub type wkeDraggableRegionsChangedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        webView: wkeWebView,
        param: *mut ::std::os::raw::c_void,
        rects: *const wkeDraggableRegion,
        rectCount: ::std::os::raw::c_int,
    ),
>;
pub type jsNativeFunction = ::std::option::Option<unsafe extern "C" fn(es: jsExecState) -> jsValue>;
pub type wkeJsNativeFunction = ::std::option::Option<
    unsafe extern "C" fn(es: jsExecState, param: *mut ::std::os::raw::c_void) -> jsValue,
>;
impl _jsType {
    pub const JSTYPE_NUMBER: _jsType = _jsType(0);
}
impl _jsType {
    pub const JSTYPE_STRING: _jsType = _jsType(1);
}
impl _jsType {
    pub const JSTYPE_BOOLEAN: _jsType = _jsType(2);
}
impl _jsType {
    pub const JSTYPE_OBJECT: _jsType = _jsType(3);
}
impl _jsType {
    pub const JSTYPE_FUNCTION: _jsType = _jsType(4);
}
impl _jsType {
    pub const JSTYPE_UNDEFINED: _jsType = _jsType(5);
}
impl _jsType {
    pub const JSTYPE_ARRAY: _jsType = _jsType(6);
}
impl _jsType {
    pub const JSTYPE_NULL: _jsType = _jsType(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _jsType(pub ::std::os::raw::c_int);
pub use self::_jsType as jsType;
pub type jsGetPropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        es: jsExecState,
        object: jsValue,
        propertyName: *const ::std::os::raw::c_char,
    ) -> jsValue,
>;
pub type jsSetPropertyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        es: jsExecState,
        object: jsValue,
        propertyName: *const ::std::os::raw::c_char,
        value: jsValue,
    ) -> bool,
>;
pub type jsCallAsFunctionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        es: jsExecState,
        object: jsValue,
        args: *mut jsValue,
        argCount: ::std::os::raw::c_int,
    ) -> jsValue,
>;
pub type jsFinalizeCallback = ::std::option::Option<unsafe extern "C" fn(data: *mut tagjsData)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagjsData {
    pub typeName: [::std::os::raw::c_char; 100usize],
    pub propertyGet: jsGetPropertyCallback,
    pub propertySet: jsSetPropertyCallback,
    pub finalize: jsFinalizeCallback,
    pub callAsFunction: jsCallAsFunctionCallback,
}
pub type jsData = tagjsData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jsExceptionInfo {
    pub message: *const utf8,
    pub sourceLine: *const utf8,
    pub scriptResourceName: *const utf8,
    pub lineNumber: ::std::os::raw::c_int,
    pub startPosition: ::std::os::raw::c_int,
    pub endPosition: ::std::os::raw::c_int,
    pub startColumn: ::std::os::raw::c_int,
    pub endColumn: ::std::os::raw::c_int,
    pub callstackString: *const utf8,
}
pub type jsExceptionInfo = _jsExceptionInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jsKeys {
    pub length: ::std::os::raw::c_uint,
    pub keys: *mut *const ::std::os::raw::c_char,
}
pub type jsKeys = _jsKeys;
extern crate libloading;
pub struct Library {
    __library: ::libloading::Library,
    pub wkeInit: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeInitialize: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeInitializeEx:
        Result<unsafe extern "C" fn(settings: *const wkeSettings), ::libloading::Error>,
    pub wkeShutdown: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeShutdownForDebug: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeVersion: Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub wkeVersionString: Result<unsafe extern "C" fn() -> *const utf8, ::libloading::Error>,
    pub wkeGC: Result<
        unsafe extern "C" fn(webView: wkeWebView, intervalSec: ::std::os::raw::c_long),
        ::libloading::Error,
    >,
    pub wkeSetResourceGc: Result<
        unsafe extern "C" fn(webView: wkeWebView, intervalSec: ::std::os::raw::c_long),
        ::libloading::Error,
    >,
    pub wkeSetFileSystem: Result<
        unsafe extern "C" fn(
            pfnOpen: WKE_FILE_OPEN,
            pfnClose: WKE_FILE_CLOSE,
            pfnSize: WKE_FILE_SIZE,
            pfnRead: WKE_FILE_READ,
            pfnSeek: WKE_FILE_SEEK,
        ),
        ::libloading::Error,
    >,
    pub wkeWebViewName: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeSetWebViewName: Result<
        unsafe extern "C" fn(webView: wkeWebView, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeIsLoaded: Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsLoadFailed:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsLoadComplete:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeGetSource:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeTitle:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeTitleW:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const wchar_t, ::libloading::Error>,
    pub wkeWidth: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeHeight: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeContentsWidth: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeContentsHeight: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeSelectAll: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeCopy: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeCut: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkePaste: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeDelete: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeCookieEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeMediaVolume:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> f32, ::libloading::Error>,
    pub wkeMouseEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            message: ::std::os::raw::c_uint,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeContextMenuEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeMouseWheel: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            delta: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeKeyUp: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeKeyDown: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeKeyPress: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFocus: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeUnfocus: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGetCaret:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> wkeRect, ::libloading::Error>,
    pub wkeAwaken: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeZoomFactor:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> f32, ::libloading::Error>,
    pub wkeSetClientHandler: Result<
        unsafe extern "C" fn(webView: wkeWebView, handler: *const wkeClientHandler),
        ::libloading::Error,
    >,
    pub wkeGetClientHandler: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *const wkeClientHandler,
        ::libloading::Error,
    >,
    pub wkeToString:
        Result<unsafe extern "C" fn(string: wkeString) -> *const utf8, ::libloading::Error>,
    pub wkeToStringW:
        Result<unsafe extern "C" fn(string: wkeString) -> *const wchar_t, ::libloading::Error>,
    pub jsToString: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *const utf8,
        ::libloading::Error,
    >,
    pub jsToStringW: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *const wchar_t,
        ::libloading::Error,
    >,
    pub wkeConfigure:
        Result<unsafe extern "C" fn(settings: *const wkeSettings), ::libloading::Error>,
    pub wkeIsInitialize: Result<unsafe extern "C" fn() -> BOOL, ::libloading::Error>,
    pub wkeSetViewSettings: Result<
        unsafe extern "C" fn(webView: wkeWebView, settings: *const wkeViewSettings),
        ::libloading::Error,
    >,
    pub wkeSetDebugConfig: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            debugString: *const ::std::os::raw::c_char,
            param: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub wkeGetDebugConfig: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            debugString: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub wkeFinalize: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeGetVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub wkeGetVersionString: Result<unsafe extern "C" fn() -> *const utf8, ::libloading::Error>,
    pub wkeCreateWebView: Result<unsafe extern "C" fn() -> wkeWebView, ::libloading::Error>,
    pub wkeDestroyWebView: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeSetMemoryCacheEnable:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetMouseEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetTouchEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetSystemTouchEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetContextMenuEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetNavigationToNewWindowEnable:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetCspCheckEnable:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetNpapiPluginsEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetHeadlessEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetDragEnable:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetDragDropEnable:
        Result<unsafe extern "C" fn(webView: wkeWebView, b: bool), ::libloading::Error>,
    pub wkeSetContextMenuItemShow: Result<
        unsafe extern "C" fn(webView: wkeWebView, item: wkeMenuItemId, isShow: bool),
        ::libloading::Error,
    >,
    pub wkeSetLanguage: Result<
        unsafe extern "C" fn(webView: wkeWebView, language: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeSetViewNetInterface: Result<
        unsafe extern "C" fn(webView: wkeWebView, netInterface: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeSetProxy: Result<unsafe extern "C" fn(proxy: *const wkeProxy), ::libloading::Error>,
    pub wkeSetViewProxy: Result<
        unsafe extern "C" fn(webView: wkeWebView, proxy: *mut wkeProxy),
        ::libloading::Error,
    >,
    pub wkeGetName: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeSetName: Result<
        unsafe extern "C" fn(webView: wkeWebView, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeSetHandle:
        Result<unsafe extern "C" fn(webView: wkeWebView, wnd: HWND), ::libloading::Error>,
    pub wkeSetHandleOffset: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeIsTransparent:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeSetTransparent:
        Result<unsafe extern "C" fn(webView: wkeWebView, transparent: bool), ::libloading::Error>,
    pub wkeSetUserAgent: Result<
        unsafe extern "C" fn(webView: wkeWebView, userAgent: *const utf8),
        ::libloading::Error,
    >,
    pub wkeGetUserAgent: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeSetUserAgentW: Result<
        unsafe extern "C" fn(webView: wkeWebView, userAgent: *const wchar_t),
        ::libloading::Error,
    >,
    pub wkeShowDevtools: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            path: *const wchar_t,
            callback: wkeOnShowDevtoolsCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeLoadW:
        Result<unsafe extern "C" fn(webView: wkeWebView, url: *const wchar_t), ::libloading::Error>,
    pub wkeLoadURL:
        Result<unsafe extern "C" fn(webView: wkeWebView, url: *const utf8), ::libloading::Error>,
    pub wkeLoadURLW:
        Result<unsafe extern "C" fn(webView: wkeWebView, url: *const wchar_t), ::libloading::Error>,
    pub wkePostURL: Result<
        unsafe extern "C" fn(
            wkeView: wkeWebView,
            url: *const utf8,
            postData: *const ::std::os::raw::c_char,
            postLen: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkePostURLW: Result<
        unsafe extern "C" fn(
            wkeView: wkeWebView,
            url: *const wchar_t,
            postData: *const ::std::os::raw::c_char,
            postLen: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeLoadHTML:
        Result<unsafe extern "C" fn(webView: wkeWebView, html: *const utf8), ::libloading::Error>,
    pub wkeLoadHtmlWithBaseUrl: Result<
        unsafe extern "C" fn(webView: wkeWebView, html: *const utf8, baseUrl: *const utf8),
        ::libloading::Error,
    >,
    pub wkeLoadHTMLW: Result<
        unsafe extern "C" fn(webView: wkeWebView, html: *const wchar_t),
        ::libloading::Error,
    >,
    pub wkeLoadFile: Result<
        unsafe extern "C" fn(webView: wkeWebView, filename: *const utf8),
        ::libloading::Error,
    >,
    pub wkeLoadFileW: Result<
        unsafe extern "C" fn(webView: wkeWebView, filename: *const wchar_t),
        ::libloading::Error,
    >,
    pub wkeGetURL:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeGetFrameUrl: Result<
        unsafe extern "C" fn(webView: wkeWebView, frameId: wkeWebFrameHandle) -> *const utf8,
        ::libloading::Error,
    >,
    pub wkeIsLoading:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsLoadingSucceeded:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsLoadingFailed:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsLoadingCompleted:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeIsDocumentReady:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeStopLoading: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeReload: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGoToOffset: Result<
        unsafe extern "C" fn(webView: wkeWebView, offset: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub wkeGoToIndex: Result<
        unsafe extern "C" fn(webView: wkeWebView, index: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub wkeGetWebviewId: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeIsWebviewAlive:
        Result<unsafe extern "C" fn(id: ::std::os::raw::c_int) -> BOOL, ::libloading::Error>,
    pub wkeIsWebviewValid:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeGetDocumentCompleteURL: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frameId: wkeWebFrameHandle,
            partialURL: *const utf8,
        ) -> *const utf8,
        ::libloading::Error,
    >,
    pub wkeCreateMemBuf: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            buf: *mut ::std::os::raw::c_void,
            length: usize,
        ) -> *mut wkeMemBuf,
        ::libloading::Error,
    >,
    pub wkeFreeMemBuf: Result<unsafe extern "C" fn(buf: *mut wkeMemBuf), ::libloading::Error>,
    pub wkeGetTitle:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeGetTitleW:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const wchar_t, ::libloading::Error>,
    pub wkeResize: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeGetWidth: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeGetHeight: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeGetContentWidth: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeGetContentHeight: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeSetDirty:
        Result<unsafe extern "C" fn(webView: wkeWebView, dirty: bool), ::libloading::Error>,
    pub wkeIsDirty: Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeAddDirtyArea: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeLayoutIfNeeded: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkePaint2: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            bits: *mut ::std::os::raw::c_void,
            bufWid: ::std::os::raw::c_int,
            bufHei: ::std::os::raw::c_int,
            xDst: ::std::os::raw::c_int,
            yDst: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            xSrc: ::std::os::raw::c_int,
            ySrc: ::std::os::raw::c_int,
            bCopyAlpha: bool,
        ),
        ::libloading::Error,
    >,
    pub wkePaint: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            bits: *mut ::std::os::raw::c_void,
            pitch: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeRepaintIfNeeded: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGetViewDC: Result<unsafe extern "C" fn(webView: wkeWebView) -> HDC, ::libloading::Error>,
    pub wkeUnlockViewDC: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGetHostHWND:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> HWND, ::libloading::Error>,
    pub wkeCanGoBack:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeGoBack: Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeCanGoForward:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeGoForward:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeNavigateAtIndex: Result<
        unsafe extern "C" fn(webView: wkeWebView, index: ::std::os::raw::c_int) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeGetNavigateIndex: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeEditorSelectAll: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorUnSelect: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorCopy: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorCut: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorPaste: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorDelete: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorUndo: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeEditorRedo: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGetCookieW:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const wchar_t, ::libloading::Error>,
    pub wkeGetCookie:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeSetCookie: Result<
        unsafe extern "C" fn(webView: wkeWebView, url: *const utf8, cookie: *const utf8),
        ::libloading::Error,
    >,
    pub wkeVisitAllCookie: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            params: *mut ::std::os::raw::c_void,
            visitor: wkeCookieVisitor,
        ),
        ::libloading::Error,
    >,
    pub wkePerformCookieCommand: Result<
        unsafe extern "C" fn(webView: wkeWebView, command: wkeCookieCommand),
        ::libloading::Error,
    >,
    pub wkeSetCookieEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView, enable: bool), ::libloading::Error>,
    pub wkeIsCookieEnabled:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeSetCookieJarPath:
        Result<unsafe extern "C" fn(webView: wkeWebView, path: *const WCHAR), ::libloading::Error>,
    pub wkeSetCookieJarFullPath:
        Result<unsafe extern "C" fn(webView: wkeWebView, path: *const WCHAR), ::libloading::Error>,
    pub wkeClearCookie: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeSetLocalStorageFullPath:
        Result<unsafe extern "C" fn(webView: wkeWebView, path: *const WCHAR), ::libloading::Error>,
    pub wkeAddPluginDirectory:
        Result<unsafe extern "C" fn(webView: wkeWebView, path: *const WCHAR), ::libloading::Error>,
    pub wkeSetMediaVolume:
        Result<unsafe extern "C" fn(webView: wkeWebView, volume: f32), ::libloading::Error>,
    pub wkeGetMediaVolume:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> f32, ::libloading::Error>,
    pub wkeFireMouseEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            message: ::std::os::raw::c_uint,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireContextMenuEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireMouseWheelEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            delta: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireKeyUpEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireKeyDownEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            virtualKeyCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireKeyPressEvent: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            charCode: ::std::os::raw::c_uint,
            flags: ::std::os::raw::c_uint,
            systemKey: bool,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeFireWindowsMessage: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            hWnd: HWND,
            message: UINT,
            wParam: WPARAM,
            lParam: LPARAM,
            result: *mut LRESULT,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeSetFocus: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeKillFocus: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeGetCaretRect:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> wkeRect, ::libloading::Error>,
    pub wkeGetCaretRect2:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *mut wkeRect, ::libloading::Error>,
    pub wkeRunJS: Result<
        unsafe extern "C" fn(webView: wkeWebView, script: *const utf8) -> jsValue,
        ::libloading::Error,
    >,
    pub wkeRunJSW: Result<
        unsafe extern "C" fn(webView: wkeWebView, script: *const wchar_t) -> jsValue,
        ::libloading::Error,
    >,
    pub wkeGlobalExec:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> jsExecState, ::libloading::Error>,
    pub wkeGetGlobalExecByFrame: Result<
        unsafe extern "C" fn(webView: wkeWebView, frameId: wkeWebFrameHandle) -> jsExecState,
        ::libloading::Error,
    >,
    pub wkeSleep: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeWake: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeIsAwake: Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeSetZoomFactor:
        Result<unsafe extern "C" fn(webView: wkeWebView, factor: f32), ::libloading::Error>,
    pub wkeGetZoomFactor:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> f32, ::libloading::Error>,
    pub wkeEnableHighDPISupport: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeSetEditable:
        Result<unsafe extern "C" fn(webView: wkeWebView, editable: bool), ::libloading::Error>,
    pub wkeGetString:
        Result<unsafe extern "C" fn(string: wkeString) -> *const utf8, ::libloading::Error>,
    pub wkeGetStringW:
        Result<unsafe extern "C" fn(string: wkeString) -> *const wchar_t, ::libloading::Error>,
    pub wkeSetString: Result<
        unsafe extern "C" fn(string: wkeString, str_: *const utf8, len: usize),
        ::libloading::Error,
    >,
    pub wkeSetStringWithoutNullTermination: Result<
        unsafe extern "C" fn(string: wkeString, str_: *const utf8, len: usize),
        ::libloading::Error,
    >,
    pub wkeSetStringW: Result<
        unsafe extern "C" fn(string: wkeString, str_: *const wchar_t, len: usize),
        ::libloading::Error,
    >,
    pub wkeCreateString: Result<
        unsafe extern "C" fn(str_: *const utf8, len: usize) -> wkeString,
        ::libloading::Error,
    >,
    pub wkeCreateStringW: Result<
        unsafe extern "C" fn(str_: *const wchar_t, len: usize) -> wkeString,
        ::libloading::Error,
    >,
    pub wkeCreateStringWithoutNullTermination: Result<
        unsafe extern "C" fn(str_: *const utf8, len: usize) -> wkeString,
        ::libloading::Error,
    >,
    pub wkeGetStringLen:
        Result<unsafe extern "C" fn(str_: wkeString) -> usize, ::libloading::Error>,
    pub wkeDeleteString: Result<unsafe extern "C" fn(str_: wkeString), ::libloading::Error>,
    pub wkeGetWebViewForCurrentContext:
        Result<unsafe extern "C" fn() -> wkeWebView, ::libloading::Error>,
    pub wkeSetUserKeyValue: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeGetUserKeyValue: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            key: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub wkeGetCursorInfoType: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeSetCursorInfoType: Result<
        unsafe extern "C" fn(webView: wkeWebView, type_: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub wkeSetDragFiles: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            clintPos: *const POINT,
            screenPos: *const POINT,
            files: *mut wkeString,
            filesCount: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeSetDeviceParameter: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            device: *const ::std::os::raw::c_char,
            paramStr: *const ::std::os::raw::c_char,
            paramInt: ::std::os::raw::c_int,
            paramFloat: f32,
        ),
        ::libloading::Error,
    >,
    pub wkeGetTempCallbackInfo: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *mut wkeTempCallbackInfo,
        ::libloading::Error,
    >,
    pub wkeOnCaretChanged: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeCaretChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnMouseOverUrlChanged: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeTitleChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnTitleChanged: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeTitleChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnURLChanged: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeURLChangedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnURLChanged2: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeURLChangedCallback2,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnPaintUpdated: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkePaintUpdatedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnPaintBitUpdated: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkePaintBitUpdatedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnAlertBox: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeAlertBoxCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnConfirmBox: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeConfirmBoxCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnPromptBox: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkePromptBoxCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnNavigation: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeNavigationCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnCreateView: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeCreateViewCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDocumentReady: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDocumentReadyCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDocumentReady2: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDocumentReady2Callback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadingFinish: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadingFinishCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDownload: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDownloadCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDownload2: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDownload2Callback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnConsole: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeConsoleCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeSetUIThreadCallback: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeCallUiThread,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadUrlBegin: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadUrlBeginCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadUrlEnd: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadUrlEndCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadUrlHeadersReceived: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadUrlHeadersReceivedCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadUrlFinish: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadUrlFinishCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnLoadUrlFail: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeLoadUrlFailCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDidCreateScriptContext: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDidCreateScriptContextCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnWillReleaseScriptContext: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeWillReleaseScriptContextCallback,
            callbackParam: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnWindowClosing: Result<
        unsafe extern "C" fn(
            webWindow: wkeWebView,
            callback: wkeWindowClosingCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnWindowDestroy: Result<
        unsafe extern "C" fn(
            webWindow: wkeWebView,
            callback: wkeWindowDestroyCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnDraggableRegionsChanged: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeDraggableRegionsChangedCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnWillMediaLoad: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeWillMediaLoadCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnStartDragging: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeStartDraggingCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnPrint: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeOnPrintCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeScreenshot: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            settings: *const wkeScreenshotSettings,
            callback: wkeOnScreenshot,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnOtherLoad: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeOnOtherLoadCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnContextMenuItemClick: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeOnContextMenuItemClickCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeIsProcessingUserGesture:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> BOOL, ::libloading::Error>,
    pub wkeNetSetMIMEType: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob, type_: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeNetGetMIMEType: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob, mime: wkeString) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeNetGetReferrer: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeNetSetHTTPHeaderField: Result<
        unsafe extern "C" fn(
            jobPtr: wkeNetJob,
            key: *const wchar_t,
            value: *const wchar_t,
            response: bool,
        ),
        ::libloading::Error,
    >,
    pub wkeNetGetHTTPHeaderField: Result<
        unsafe extern "C" fn(
            jobPtr: wkeNetJob,
            key: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeNetGetHTTPHeaderFieldFromResponse: Result<
        unsafe extern "C" fn(
            jobPtr: wkeNetJob,
            key: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeNetSetData: Result<
        unsafe extern "C" fn(
            jobPtr: wkeNetJob,
            buf: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeNetHookRequest: Result<unsafe extern "C" fn(jobPtr: wkeNetJob), ::libloading::Error>,
    pub wkeNetOnResponse: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeNetResponseCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeNetGetRequestMethod:
        Result<unsafe extern "C" fn(jobPtr: wkeNetJob) -> wkeRequestType, ::libloading::Error>,
    pub wkeNetGetFavicon: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeOnNetGetFaviconCallback,
            param: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeNetContinueJob: Result<unsafe extern "C" fn(jobPtr: wkeNetJob), ::libloading::Error>,
    pub wkeNetGetUrlByJob: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub wkeNetGetRawHttpHead:
        Result<unsafe extern "C" fn(jobPtr: wkeNetJob) -> *const wkeSlist, ::libloading::Error>,
    pub wkeNetGetRawResponseHead:
        Result<unsafe extern "C" fn(jobPtr: wkeNetJob) -> *const wkeSlist, ::libloading::Error>,
    pub wkeNetCancelRequest: Result<unsafe extern "C" fn(jobPtr: wkeNetJob), ::libloading::Error>,
    pub wkeNetHoldJobToAsynCommit:
        Result<unsafe extern "C" fn(jobPtr: wkeNetJob) -> BOOL, ::libloading::Error>,
    pub wkeNetChangeRequestUrl: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob, url: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub wkeNetCreateWebUrlRequest: Result<
        unsafe extern "C" fn(
            url: *const utf8,
            method: *const utf8,
            mime: *const utf8,
        ) -> wkeWebUrlRequestPtr,
        ::libloading::Error,
    >,
    pub wkeNetCreateWebUrlRequest2: Result<
        unsafe extern "C" fn(request: blinkWebURLRequestPtr) -> wkeWebUrlRequestPtr,
        ::libloading::Error,
    >,
    pub wkeNetCopyWebUrlRequest: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob, needExtraData: bool) -> blinkWebURLRequestPtr,
        ::libloading::Error,
    >,
    pub wkeNetDeleteBlinkWebURLRequestPtr:
        Result<unsafe extern "C" fn(request: blinkWebURLRequestPtr), ::libloading::Error>,
    pub wkeNetAddHTTPHeaderFieldToUrlRequest: Result<
        unsafe extern "C" fn(request: wkeWebUrlRequestPtr, name: *const utf8, value: *const utf8),
        ::libloading::Error,
    >,
    pub wkeNetStartUrlRequest: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            request: wkeWebUrlRequestPtr,
            param: *mut ::std::os::raw::c_void,
            callbacks: *const wkeUrlRequestCallbacks,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeNetGetHttpStatusCode: Result<
        unsafe extern "C" fn(response: wkeWebUrlResponsePtr) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wkeNetGetExpectedContentLength: Result<
        unsafe extern "C" fn(response: wkeWebUrlResponsePtr) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub wkeNetGetResponseUrl: Result<
        unsafe extern "C" fn(response: wkeWebUrlResponsePtr) -> *const utf8,
        ::libloading::Error,
    >,
    pub wkeNetCancelWebUrlRequest:
        Result<unsafe extern "C" fn(requestId: ::std::os::raw::c_int), ::libloading::Error>,
    pub wkeNetGetPostBody: Result<
        unsafe extern "C" fn(jobPtr: wkeNetJob) -> *mut wkePostBodyElements,
        ::libloading::Error,
    >,
    pub wkeNetCreatePostBodyElements: Result<
        unsafe extern "C" fn(webView: wkeWebView, length: usize) -> *mut wkePostBodyElements,
        ::libloading::Error,
    >,
    pub wkeNetFreePostBodyElements:
        Result<unsafe extern "C" fn(elements: *mut wkePostBodyElements), ::libloading::Error>,
    pub wkeNetCreatePostBodyElement: Result<
        unsafe extern "C" fn(webView: wkeWebView) -> *mut wkePostBodyElement,
        ::libloading::Error,
    >,
    pub wkeNetFreePostBodyElement:
        Result<unsafe extern "C" fn(element: *mut wkePostBodyElement), ::libloading::Error>,
    pub wkePopupDialogAndDownload: Result<
        unsafe extern "C" fn(
            webviewHandle: wkeWebView,
            dialogOpt: *const wkeDialogOptions,
            expectedContentLength: usize,
            url: *const ::std::os::raw::c_char,
            mime: *const ::std::os::raw::c_char,
            disposition: *const ::std::os::raw::c_char,
            job: wkeNetJob,
            dataBind: *mut wkeNetJobDataBind,
            callbackBind: *mut wkeDownloadBind,
        ) -> wkeDownloadOpt,
        ::libloading::Error,
    >,
    pub wkeDownloadByPath: Result<
        unsafe extern "C" fn(
            webviewHandle: wkeWebView,
            dialogOpt: *const wkeDialogOptions,
            path: *const WCHAR,
            expectedContentLength: usize,
            url: *const ::std::os::raw::c_char,
            mime: *const ::std::os::raw::c_char,
            disposition: *const ::std::os::raw::c_char,
            job: wkeNetJob,
            dataBind: *mut wkeNetJobDataBind,
            callbackBind: *mut wkeDownloadBind,
        ) -> wkeDownloadOpt,
        ::libloading::Error,
    >,
    pub wkeIsMainFrame: Result<
        unsafe extern "C" fn(webView: wkeWebView, frameId: wkeWebFrameHandle) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeIsWebRemoteFrame: Result<
        unsafe extern "C" fn(webView: wkeWebView, frameId: wkeWebFrameHandle) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeWebFrameGetMainFrame:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> wkeWebFrameHandle, ::libloading::Error>,
    pub wkeRunJsByFrame: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frameId: wkeWebFrameHandle,
            script: *const utf8,
            isInClosure: bool,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub wkeInsertCSSByFrame: Result<
        unsafe extern "C" fn(webView: wkeWebView, frameId: wkeWebFrameHandle, cssText: *const utf8),
        ::libloading::Error,
    >,
    pub wkeWebFrameGetMainWorldScriptContext: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            webFrameId: wkeWebFrameHandle,
            contextOut: v8ContextPtr,
        ),
        ::libloading::Error,
    >,
    pub wkeGetBlinkMainThreadIsolate:
        Result<unsafe extern "C" fn() -> v8Isolate, ::libloading::Error>,
    pub wkeCreateWebWindow: Result<
        unsafe extern "C" fn(
            type_: wkeWindowType,
            parent: HWND,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> wkeWebView,
        ::libloading::Error,
    >,
    pub wkeCreateWebCustomWindow: Result<
        unsafe extern "C" fn(info: *const wkeWindowCreateInfo) -> wkeWebView,
        ::libloading::Error,
    >,
    pub wkeDestroyWebWindow:
        Result<unsafe extern "C" fn(webWindow: wkeWebView), ::libloading::Error>,
    pub wkeGetWindowHandle:
        Result<unsafe extern "C" fn(webWindow: wkeWebView) -> HWND, ::libloading::Error>,
    pub wkeShowWindow:
        Result<unsafe extern "C" fn(webWindow: wkeWebView, show: bool), ::libloading::Error>,
    pub wkeEnableWindow:
        Result<unsafe extern "C" fn(webWindow: wkeWebView, enable: bool), ::libloading::Error>,
    pub wkeMoveWindow: Result<
        unsafe extern "C" fn(
            webWindow: wkeWebView,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeMoveToCenter: Result<unsafe extern "C" fn(webWindow: wkeWebView), ::libloading::Error>,
    pub wkeResizeWindow: Result<
        unsafe extern "C" fn(
            webWindow: wkeWebView,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeDragTargetDragEnter: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            webDragData: *const wkeWebDragData,
            clientPoint: *const POINT,
            screenPoint: *const POINT,
            operationsAllowed: wkeWebDragOperationsMask,
            modifiers: ::std::os::raw::c_int,
        ) -> wkeWebDragOperation,
        ::libloading::Error,
    >,
    pub wkeDragTargetDragOver: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            clientPoint: *const POINT,
            screenPoint: *const POINT,
            operationsAllowed: wkeWebDragOperationsMask,
            modifiers: ::std::os::raw::c_int,
        ) -> wkeWebDragOperation,
        ::libloading::Error,
    >,
    pub wkeDragTargetDragLeave:
        Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub wkeDragTargetDrop: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            clientPoint: *const POINT,
            screenPoint: *const POINT,
            modifiers: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub wkeDragTargetEnd: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            clientPoint: *const POINT,
            screenPoint: *const POINT,
            operation: wkeWebDragOperation,
        ),
        ::libloading::Error,
    >,
    pub wkeUtilSetUiCallback:
        Result<unsafe extern "C" fn(callback: wkeUiThreadPostTaskCallback), ::libloading::Error>,
    pub wkeUtilSerializeToMHTML:
        Result<unsafe extern "C" fn(webView: wkeWebView) -> *const utf8, ::libloading::Error>,
    pub wkeUtilPrintToPdf: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frameId: wkeWebFrameHandle,
            settings: *const wkePrintSettings,
        ) -> *const wkePdfDatas,
        ::libloading::Error,
    >,
    pub wkePrintToBitmap: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frameId: wkeWebFrameHandle,
            settings: *const wkeScreenshotSettings,
        ) -> *const wkeMemBuf,
        ::libloading::Error,
    >,
    pub wkeUtilRelasePrintPdfDatas:
        Result<unsafe extern "C" fn(datas: *const wkePdfDatas), ::libloading::Error>,
    pub wkeSetWindowTitle: Result<
        unsafe extern "C" fn(webWindow: wkeWebView, title: *const utf8),
        ::libloading::Error,
    >,
    pub wkeSetWindowTitleW: Result<
        unsafe extern "C" fn(webWindow: wkeWebView, title: *const wchar_t),
        ::libloading::Error,
    >,
    pub wkeNodeOnCreateProcess: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            callback: wkeNodeOnCreateProcessCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeOnPluginFind: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            mime: *const ::std::os::raw::c_char,
            callback: wkeOnPluginFindCallback,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeAddNpapiPlugin: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            initializeFunc: *mut ::std::os::raw::c_void,
            getEntryPointsFunc: *mut ::std::os::raw::c_void,
            shutdownFunc: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkePluginListBuilderAddPlugin: Result<
        unsafe extern "C" fn(
            builder: *mut ::std::os::raw::c_void,
            name: *const utf8,
            description: *const utf8,
            fileName: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub wkePluginListBuilderAddMediaTypeToLastPlugin: Result<
        unsafe extern "C" fn(
            builder: *mut ::std::os::raw::c_void,
            name: *const utf8,
            description: *const utf8,
        ),
        ::libloading::Error,
    >,
    pub wkePluginListBuilderAddFileExtensionToLastMediaType: Result<
        unsafe extern "C" fn(builder: *mut ::std::os::raw::c_void, fileExtension: *const utf8),
        ::libloading::Error,
    >,
    pub wkeGetWebViewByNData: Result<
        unsafe extern "C" fn(ndata: *mut ::std::os::raw::c_void) -> wkeWebView,
        ::libloading::Error,
    >,
    pub wkeRegisterEmbedderCustomElement: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frameId: wkeWebFrameHandle,
            name: *const ::std::os::raw::c_char,
            options: *mut ::std::os::raw::c_void,
            outResult: *mut ::std::os::raw::c_void,
        ) -> BOOL,
        ::libloading::Error,
    >,
    pub wkeSetMediaPlayerFactory: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            factory: wkeMediaPlayerFactory,
            callback: wkeOnIsMediaPlayerSupportsMIMEType,
        ),
        ::libloading::Error,
    >,
    pub wkeGetContentAsMarkup: Result<
        unsafe extern "C" fn(
            webView: wkeWebView,
            frame: wkeWebFrameHandle,
            size: *mut usize,
        ) -> *const utf8,
        ::libloading::Error,
    >,
    pub wkeUtilDecodeURLEscape:
        Result<unsafe extern "C" fn(url: *const utf8) -> *const utf8, ::libloading::Error>,
    pub wkeUtilEncodeURLEscape:
        Result<unsafe extern "C" fn(url: *const utf8) -> *const utf8, ::libloading::Error>,
    pub wkeUtilBase64Encode:
        Result<unsafe extern "C" fn(str_: *const utf8) -> *const utf8, ::libloading::Error>,
    pub wkeUtilBase64Decode:
        Result<unsafe extern "C" fn(str_: *const utf8) -> *const utf8, ::libloading::Error>,
    pub wkeUtilCreateV8Snapshot:
        Result<unsafe extern "C" fn(str_: *const utf8) -> *const wkeMemBuf, ::libloading::Error>,
    pub wkeRunMessageLoop: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub wkeSaveMemoryCache: Result<unsafe extern "C" fn(webView: wkeWebView), ::libloading::Error>,
    pub jsBindFunction: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fn_: jsNativeFunction,
            argCount: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub jsBindGetter: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, fn_: jsNativeFunction),
        ::libloading::Error,
    >,
    pub jsBindSetter: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, fn_: jsNativeFunction),
        ::libloading::Error,
    >,
    pub wkeJsBindFunction: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fn_: wkeJsNativeFunction,
            param: *mut ::std::os::raw::c_void,
            argCount: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub wkeJsBindGetter: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fn_: wkeJsNativeFunction,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub wkeJsBindSetter: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            fn_: wkeJsNativeFunction,
            param: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub jsArgCount:
        Result<unsafe extern "C" fn(es: jsExecState) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub jsArgType: Result<
        unsafe extern "C" fn(es: jsExecState, argIdx: ::std::os::raw::c_int) -> jsType,
        ::libloading::Error,
    >,
    pub jsArg: Result<
        unsafe extern "C" fn(es: jsExecState, argIdx: ::std::os::raw::c_int) -> jsValue,
        ::libloading::Error,
    >,
    pub jsTypeOf: Result<unsafe extern "C" fn(v: jsValue) -> jsType, ::libloading::Error>,
    pub jsIsNumber: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsString: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsBoolean: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsObject: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsFunction: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsUndefined: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsNull: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsArray: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsTrue: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsFalse: Result<unsafe extern "C" fn(v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsToInt: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub jsToFloat:
        Result<unsafe extern "C" fn(es: jsExecState, v: jsValue) -> f32, ::libloading::Error>,
    pub jsToDouble:
        Result<unsafe extern "C" fn(es: jsExecState, v: jsValue) -> f64, ::libloading::Error>,
    pub jsToDoubleString: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub jsToBoolean:
        Result<unsafe extern "C" fn(es: jsExecState, v: jsValue) -> BOOL, ::libloading::Error>,
    pub jsArrayBuffer: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            buffer: *const ::std::os::raw::c_char,
            size: usize,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub jsGetArrayBuffer: Result<
        unsafe extern "C" fn(es: jsExecState, value: jsValue) -> *mut wkeMemBuf,
        ::libloading::Error,
    >,
    pub jsToTempString: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *const utf8,
        ::libloading::Error,
    >,
    pub jsToTempStringW: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *const wchar_t,
        ::libloading::Error,
    >,
    pub jsToV8Value: Result<
        unsafe extern "C" fn(es: jsExecState, v: jsValue) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub jsInt:
        Result<unsafe extern "C" fn(n: ::std::os::raw::c_int) -> jsValue, ::libloading::Error>,
    pub jsFloat: Result<unsafe extern "C" fn(f: f32) -> jsValue, ::libloading::Error>,
    pub jsDouble: Result<unsafe extern "C" fn(d: f64) -> jsValue, ::libloading::Error>,
    pub jsDoubleString: Result<
        unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> jsValue,
        ::libloading::Error,
    >,
    pub jsBoolean: Result<unsafe extern "C" fn(b: bool) -> jsValue, ::libloading::Error>,
    pub jsUndefined: Result<unsafe extern "C" fn() -> jsValue, ::libloading::Error>,
    pub jsNull: Result<unsafe extern "C" fn() -> jsValue, ::libloading::Error>,
    pub jsTrue: Result<unsafe extern "C" fn() -> jsValue, ::libloading::Error>,
    pub jsFalse: Result<unsafe extern "C" fn() -> jsValue, ::libloading::Error>,
    pub jsString: Result<
        unsafe extern "C" fn(es: jsExecState, str_: *const utf8) -> jsValue,
        ::libloading::Error,
    >,
    pub jsStringW: Result<
        unsafe extern "C" fn(es: jsExecState, str_: *const wchar_t) -> jsValue,
        ::libloading::Error,
    >,
    pub jsEmptyObject:
        Result<unsafe extern "C" fn(es: jsExecState) -> jsValue, ::libloading::Error>,
    pub jsEmptyArray: Result<unsafe extern "C" fn(es: jsExecState) -> jsValue, ::libloading::Error>,
    pub jsObject: Result<
        unsafe extern "C" fn(es: jsExecState, obj: *mut jsData) -> jsValue,
        ::libloading::Error,
    >,
    pub jsFunction: Result<
        unsafe extern "C" fn(es: jsExecState, obj: *mut jsData) -> jsValue,
        ::libloading::Error,
    >,
    pub jsGetData: Result<
        unsafe extern "C" fn(es: jsExecState, object: jsValue) -> *mut jsData,
        ::libloading::Error,
    >,
    pub jsGet: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            object: jsValue,
            prop: *const ::std::os::raw::c_char,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub jsSet: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            object: jsValue,
            prop: *const ::std::os::raw::c_char,
            v: jsValue,
        ),
        ::libloading::Error,
    >,
    pub jsGetAt: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            object: jsValue,
            index: ::std::os::raw::c_int,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub jsSetAt: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            object: jsValue,
            index: ::std::os::raw::c_int,
            v: jsValue,
        ),
        ::libloading::Error,
    >,
    pub jsGetKeys: Result<
        unsafe extern "C" fn(es: jsExecState, object: jsValue) -> *mut jsKeys,
        ::libloading::Error,
    >,
    pub jsIsJsValueValid:
        Result<unsafe extern "C" fn(es: jsExecState, object: jsValue) -> BOOL, ::libloading::Error>,
    pub jsIsValidExecState:
        Result<unsafe extern "C" fn(es: jsExecState) -> BOOL, ::libloading::Error>,
    pub jsDeleteObjectProp: Result<
        unsafe extern "C" fn(es: jsExecState, object: jsValue, prop: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub jsGetLength: Result<
        unsafe extern "C" fn(es: jsExecState, object: jsValue) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub jsSetLength: Result<
        unsafe extern "C" fn(es: jsExecState, object: jsValue, length: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub jsGlobalObject:
        Result<unsafe extern "C" fn(es: jsExecState) -> jsValue, ::libloading::Error>,
    pub jsGetWebView:
        Result<unsafe extern "C" fn(es: jsExecState) -> wkeWebView, ::libloading::Error>,
    pub jsEval: Result<
        unsafe extern "C" fn(es: jsExecState, str_: *const utf8) -> jsValue,
        ::libloading::Error,
    >,
    pub jsEvalW: Result<
        unsafe extern "C" fn(es: jsExecState, str_: *const wchar_t) -> jsValue,
        ::libloading::Error,
    >,
    pub jsEvalExW: Result<
        unsafe extern "C" fn(es: jsExecState, str_: *const wchar_t, isInClosure: bool) -> jsValue,
        ::libloading::Error,
    >,
    pub jsCall: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            func: jsValue,
            thisObject: jsValue,
            args: *mut jsValue,
            argCount: ::std::os::raw::c_int,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub jsCallGlobal: Result<
        unsafe extern "C" fn(
            es: jsExecState,
            func: jsValue,
            args: *mut jsValue,
            argCount: ::std::os::raw::c_int,
        ) -> jsValue,
        ::libloading::Error,
    >,
    pub jsGetGlobal: Result<
        unsafe extern "C" fn(es: jsExecState, prop: *const ::std::os::raw::c_char) -> jsValue,
        ::libloading::Error,
    >,
    pub jsSetGlobal: Result<
        unsafe extern "C" fn(es: jsExecState, prop: *const ::std::os::raw::c_char, v: jsValue),
        ::libloading::Error,
    >,
    pub jsGC: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub jsAddRef:
        Result<unsafe extern "C" fn(es: jsExecState, val: jsValue) -> BOOL, ::libloading::Error>,
    pub jsReleaseRef:
        Result<unsafe extern "C" fn(es: jsExecState, val: jsValue) -> BOOL, ::libloading::Error>,
    pub jsGetLastErrorIfException:
        Result<unsafe extern "C" fn(es: jsExecState) -> *mut jsExceptionInfo, ::libloading::Error>,
    pub jsThrowException: Result<
        unsafe extern "C" fn(es: jsExecState, exception: *const utf8) -> jsValue,
        ::libloading::Error,
    >,
    pub jsGetCallstack:
        Result<unsafe extern "C" fn(es: jsExecState) -> *const utf8, ::libloading::Error>,
}
impl Library {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let wkeInit = __library.get(b"wkeInit\0").map(|sym| *sym);
        let wkeInitialize = __library.get(b"wkeInitialize\0").map(|sym| *sym);
        let wkeInitializeEx = __library.get(b"wkeInitializeEx\0").map(|sym| *sym);
        let wkeShutdown = __library.get(b"wkeShutdown\0").map(|sym| *sym);
        let wkeShutdownForDebug = __library.get(b"wkeShutdownForDebug\0").map(|sym| *sym);
        let wkeVersion = __library.get(b"wkeVersion\0").map(|sym| *sym);
        let wkeVersionString = __library.get(b"wkeVersionString\0").map(|sym| *sym);
        let wkeGC = __library.get(b"wkeGC\0").map(|sym| *sym);
        let wkeSetResourceGc = __library.get(b"wkeSetResourceGc\0").map(|sym| *sym);
        let wkeSetFileSystem = __library.get(b"wkeSetFileSystem\0").map(|sym| *sym);
        let wkeWebViewName = __library.get(b"wkeWebViewName\0").map(|sym| *sym);
        let wkeSetWebViewName = __library.get(b"wkeSetWebViewName\0").map(|sym| *sym);
        let wkeIsLoaded = __library.get(b"wkeIsLoaded\0").map(|sym| *sym);
        let wkeIsLoadFailed = __library.get(b"wkeIsLoadFailed\0").map(|sym| *sym);
        let wkeIsLoadComplete = __library.get(b"wkeIsLoadComplete\0").map(|sym| *sym);
        let wkeGetSource = __library.get(b"wkeGetSource\0").map(|sym| *sym);
        let wkeTitle = __library.get(b"wkeTitle\0").map(|sym| *sym);
        let wkeTitleW = __library.get(b"wkeTitleW\0").map(|sym| *sym);
        let wkeWidth = __library.get(b"wkeWidth\0").map(|sym| *sym);
        let wkeHeight = __library.get(b"wkeHeight\0").map(|sym| *sym);
        let wkeContentsWidth = __library.get(b"wkeContentsWidth\0").map(|sym| *sym);
        let wkeContentsHeight = __library.get(b"wkeContentsHeight\0").map(|sym| *sym);
        let wkeSelectAll = __library.get(b"wkeSelectAll\0").map(|sym| *sym);
        let wkeCopy = __library.get(b"wkeCopy\0").map(|sym| *sym);
        let wkeCut = __library.get(b"wkeCut\0").map(|sym| *sym);
        let wkePaste = __library.get(b"wkePaste\0").map(|sym| *sym);
        let wkeDelete = __library.get(b"wkeDelete\0").map(|sym| *sym);
        let wkeCookieEnabled = __library.get(b"wkeCookieEnabled\0").map(|sym| *sym);
        let wkeMediaVolume = __library.get(b"wkeMediaVolume\0").map(|sym| *sym);
        let wkeMouseEvent = __library.get(b"wkeMouseEvent\0").map(|sym| *sym);
        let wkeContextMenuEvent = __library.get(b"wkeContextMenuEvent\0").map(|sym| *sym);
        let wkeMouseWheel = __library.get(b"wkeMouseWheel\0").map(|sym| *sym);
        let wkeKeyUp = __library.get(b"wkeKeyUp\0").map(|sym| *sym);
        let wkeKeyDown = __library.get(b"wkeKeyDown\0").map(|sym| *sym);
        let wkeKeyPress = __library.get(b"wkeKeyPress\0").map(|sym| *sym);
        let wkeFocus = __library.get(b"wkeFocus\0").map(|sym| *sym);
        let wkeUnfocus = __library.get(b"wkeUnfocus\0").map(|sym| *sym);
        let wkeGetCaret = __library.get(b"wkeGetCaret\0").map(|sym| *sym);
        let wkeAwaken = __library.get(b"wkeAwaken\0").map(|sym| *sym);
        let wkeZoomFactor = __library.get(b"wkeZoomFactor\0").map(|sym| *sym);
        let wkeSetClientHandler = __library.get(b"wkeSetClientHandler\0").map(|sym| *sym);
        let wkeGetClientHandler = __library.get(b"wkeGetClientHandler\0").map(|sym| *sym);
        let wkeToString = __library.get(b"wkeToString\0").map(|sym| *sym);
        let wkeToStringW = __library.get(b"wkeToStringW\0").map(|sym| *sym);
        let jsToString = __library.get(b"jsToString\0").map(|sym| *sym);
        let jsToStringW = __library.get(b"jsToStringW\0").map(|sym| *sym);
        let wkeConfigure = __library.get(b"wkeConfigure\0").map(|sym| *sym);
        let wkeIsInitialize = __library.get(b"wkeIsInitialize\0").map(|sym| *sym);
        let wkeSetViewSettings = __library.get(b"wkeSetViewSettings\0").map(|sym| *sym);
        let wkeSetDebugConfig = __library.get(b"wkeSetDebugConfig\0").map(|sym| *sym);
        let wkeGetDebugConfig = __library.get(b"wkeGetDebugConfig\0").map(|sym| *sym);
        let wkeFinalize = __library.get(b"wkeFinalize\0").map(|sym| *sym);
        let wkeUpdate = __library.get(b"wkeUpdate\0").map(|sym| *sym);
        let wkeGetVersion = __library.get(b"wkeGetVersion\0").map(|sym| *sym);
        let wkeGetVersionString = __library.get(b"wkeGetVersionString\0").map(|sym| *sym);
        let wkeCreateWebView = __library.get(b"wkeCreateWebView\0").map(|sym| *sym);
        let wkeDestroyWebView = __library.get(b"wkeDestroyWebView\0").map(|sym| *sym);
        let wkeSetMemoryCacheEnable = __library.get(b"wkeSetMemoryCacheEnable\0").map(|sym| *sym);
        let wkeSetMouseEnabled = __library.get(b"wkeSetMouseEnabled\0").map(|sym| *sym);
        let wkeSetTouchEnabled = __library.get(b"wkeSetTouchEnabled\0").map(|sym| *sym);
        let wkeSetSystemTouchEnabled = __library.get(b"wkeSetSystemTouchEnabled\0").map(|sym| *sym);
        let wkeSetContextMenuEnabled = __library.get(b"wkeSetContextMenuEnabled\0").map(|sym| *sym);
        let wkeSetNavigationToNewWindowEnable = __library
            .get(b"wkeSetNavigationToNewWindowEnable\0")
            .map(|sym| *sym);
        let wkeSetCspCheckEnable = __library.get(b"wkeSetCspCheckEnable\0").map(|sym| *sym);
        let wkeSetNpapiPluginsEnabled = __library
            .get(b"wkeSetNpapiPluginsEnabled\0")
            .map(|sym| *sym);
        let wkeSetHeadlessEnabled = __library.get(b"wkeSetHeadlessEnabled\0").map(|sym| *sym);
        let wkeSetDragEnable = __library.get(b"wkeSetDragEnable\0").map(|sym| *sym);
        let wkeSetDragDropEnable = __library.get(b"wkeSetDragDropEnable\0").map(|sym| *sym);
        let wkeSetContextMenuItemShow = __library
            .get(b"wkeSetContextMenuItemShow\0")
            .map(|sym| *sym);
        let wkeSetLanguage = __library.get(b"wkeSetLanguage\0").map(|sym| *sym);
        let wkeSetViewNetInterface = __library.get(b"wkeSetViewNetInterface\0").map(|sym| *sym);
        let wkeSetProxy = __library.get(b"wkeSetProxy\0").map(|sym| *sym);
        let wkeSetViewProxy = __library.get(b"wkeSetViewProxy\0").map(|sym| *sym);
        let wkeGetName = __library.get(b"wkeGetName\0").map(|sym| *sym);
        let wkeSetName = __library.get(b"wkeSetName\0").map(|sym| *sym);
        let wkeSetHandle = __library.get(b"wkeSetHandle\0").map(|sym| *sym);
        let wkeSetHandleOffset = __library.get(b"wkeSetHandleOffset\0").map(|sym| *sym);
        let wkeIsTransparent = __library.get(b"wkeIsTransparent\0").map(|sym| *sym);
        let wkeSetTransparent = __library.get(b"wkeSetTransparent\0").map(|sym| *sym);
        let wkeSetUserAgent = __library.get(b"wkeSetUserAgent\0").map(|sym| *sym);
        let wkeGetUserAgent = __library.get(b"wkeGetUserAgent\0").map(|sym| *sym);
        let wkeSetUserAgentW = __library.get(b"wkeSetUserAgentW\0").map(|sym| *sym);
        let wkeShowDevtools = __library.get(b"wkeShowDevtools\0").map(|sym| *sym);
        let wkeLoadW = __library.get(b"wkeLoadW\0").map(|sym| *sym);
        let wkeLoadURL = __library.get(b"wkeLoadURL\0").map(|sym| *sym);
        let wkeLoadURLW = __library.get(b"wkeLoadURLW\0").map(|sym| *sym);
        let wkePostURL = __library.get(b"wkePostURL\0").map(|sym| *sym);
        let wkePostURLW = __library.get(b"wkePostURLW\0").map(|sym| *sym);
        let wkeLoadHTML = __library.get(b"wkeLoadHTML\0").map(|sym| *sym);
        let wkeLoadHtmlWithBaseUrl = __library.get(b"wkeLoadHtmlWithBaseUrl\0").map(|sym| *sym);
        let wkeLoadHTMLW = __library.get(b"wkeLoadHTMLW\0").map(|sym| *sym);
        let wkeLoadFile = __library.get(b"wkeLoadFile\0").map(|sym| *sym);
        let wkeLoadFileW = __library.get(b"wkeLoadFileW\0").map(|sym| *sym);
        let wkeGetURL = __library.get(b"wkeGetURL\0").map(|sym| *sym);
        let wkeGetFrameUrl = __library.get(b"wkeGetFrameUrl\0").map(|sym| *sym);
        let wkeIsLoading = __library.get(b"wkeIsLoading\0").map(|sym| *sym);
        let wkeIsLoadingSucceeded = __library.get(b"wkeIsLoadingSucceeded\0").map(|sym| *sym);
        let wkeIsLoadingFailed = __library.get(b"wkeIsLoadingFailed\0").map(|sym| *sym);
        let wkeIsLoadingCompleted = __library.get(b"wkeIsLoadingCompleted\0").map(|sym| *sym);
        let wkeIsDocumentReady = __library.get(b"wkeIsDocumentReady\0").map(|sym| *sym);
        let wkeStopLoading = __library.get(b"wkeStopLoading\0").map(|sym| *sym);
        let wkeReload = __library.get(b"wkeReload\0").map(|sym| *sym);
        let wkeGoToOffset = __library.get(b"wkeGoToOffset\0").map(|sym| *sym);
        let wkeGoToIndex = __library.get(b"wkeGoToIndex\0").map(|sym| *sym);
        let wkeGetWebviewId = __library.get(b"wkeGetWebviewId\0").map(|sym| *sym);
        let wkeIsWebviewAlive = __library.get(b"wkeIsWebviewAlive\0").map(|sym| *sym);
        let wkeIsWebviewValid = __library.get(b"wkeIsWebviewValid\0").map(|sym| *sym);
        let wkeGetDocumentCompleteURL = __library
            .get(b"wkeGetDocumentCompleteURL\0")
            .map(|sym| *sym);
        let wkeCreateMemBuf = __library.get(b"wkeCreateMemBuf\0").map(|sym| *sym);
        let wkeFreeMemBuf = __library.get(b"wkeFreeMemBuf\0").map(|sym| *sym);
        let wkeGetTitle = __library.get(b"wkeGetTitle\0").map(|sym| *sym);
        let wkeGetTitleW = __library.get(b"wkeGetTitleW\0").map(|sym| *sym);
        let wkeResize = __library.get(b"wkeResize\0").map(|sym| *sym);
        let wkeGetWidth = __library.get(b"wkeGetWidth\0").map(|sym| *sym);
        let wkeGetHeight = __library.get(b"wkeGetHeight\0").map(|sym| *sym);
        let wkeGetContentWidth = __library.get(b"wkeGetContentWidth\0").map(|sym| *sym);
        let wkeGetContentHeight = __library.get(b"wkeGetContentHeight\0").map(|sym| *sym);
        let wkeSetDirty = __library.get(b"wkeSetDirty\0").map(|sym| *sym);
        let wkeIsDirty = __library.get(b"wkeIsDirty\0").map(|sym| *sym);
        let wkeAddDirtyArea = __library.get(b"wkeAddDirtyArea\0").map(|sym| *sym);
        let wkeLayoutIfNeeded = __library.get(b"wkeLayoutIfNeeded\0").map(|sym| *sym);
        let wkePaint2 = __library.get(b"wkePaint2\0").map(|sym| *sym);
        let wkePaint = __library.get(b"wkePaint\0").map(|sym| *sym);
        let wkeRepaintIfNeeded = __library.get(b"wkeRepaintIfNeeded\0").map(|sym| *sym);
        let wkeGetViewDC = __library.get(b"wkeGetViewDC\0").map(|sym| *sym);
        let wkeUnlockViewDC = __library.get(b"wkeUnlockViewDC\0").map(|sym| *sym);
        let wkeGetHostHWND = __library.get(b"wkeGetHostHWND\0").map(|sym| *sym);
        let wkeCanGoBack = __library.get(b"wkeCanGoBack\0").map(|sym| *sym);
        let wkeGoBack = __library.get(b"wkeGoBack\0").map(|sym| *sym);
        let wkeCanGoForward = __library.get(b"wkeCanGoForward\0").map(|sym| *sym);
        let wkeGoForward = __library.get(b"wkeGoForward\0").map(|sym| *sym);
        let wkeNavigateAtIndex = __library.get(b"wkeNavigateAtIndex\0").map(|sym| *sym);
        let wkeGetNavigateIndex = __library.get(b"wkeGetNavigateIndex\0").map(|sym| *sym);
        let wkeEditorSelectAll = __library.get(b"wkeEditorSelectAll\0").map(|sym| *sym);
        let wkeEditorUnSelect = __library.get(b"wkeEditorUnSelect\0").map(|sym| *sym);
        let wkeEditorCopy = __library.get(b"wkeEditorCopy\0").map(|sym| *sym);
        let wkeEditorCut = __library.get(b"wkeEditorCut\0").map(|sym| *sym);
        let wkeEditorPaste = __library.get(b"wkeEditorPaste\0").map(|sym| *sym);
        let wkeEditorDelete = __library.get(b"wkeEditorDelete\0").map(|sym| *sym);
        let wkeEditorUndo = __library.get(b"wkeEditorUndo\0").map(|sym| *sym);
        let wkeEditorRedo = __library.get(b"wkeEditorRedo\0").map(|sym| *sym);
        let wkeGetCookieW = __library.get(b"wkeGetCookieW\0").map(|sym| *sym);
        let wkeGetCookie = __library.get(b"wkeGetCookie\0").map(|sym| *sym);
        let wkeSetCookie = __library.get(b"wkeSetCookie\0").map(|sym| *sym);
        let wkeVisitAllCookie = __library.get(b"wkeVisitAllCookie\0").map(|sym| *sym);
        let wkePerformCookieCommand = __library.get(b"wkePerformCookieCommand\0").map(|sym| *sym);
        let wkeSetCookieEnabled = __library.get(b"wkeSetCookieEnabled\0").map(|sym| *sym);
        let wkeIsCookieEnabled = __library.get(b"wkeIsCookieEnabled\0").map(|sym| *sym);
        let wkeSetCookieJarPath = __library.get(b"wkeSetCookieJarPath\0").map(|sym| *sym);
        let wkeSetCookieJarFullPath = __library.get(b"wkeSetCookieJarFullPath\0").map(|sym| *sym);
        let wkeClearCookie = __library.get(b"wkeClearCookie\0").map(|sym| *sym);
        let wkeSetLocalStorageFullPath = __library
            .get(b"wkeSetLocalStorageFullPath\0")
            .map(|sym| *sym);
        let wkeAddPluginDirectory = __library.get(b"wkeAddPluginDirectory\0").map(|sym| *sym);
        let wkeSetMediaVolume = __library.get(b"wkeSetMediaVolume\0").map(|sym| *sym);
        let wkeGetMediaVolume = __library.get(b"wkeGetMediaVolume\0").map(|sym| *sym);
        let wkeFireMouseEvent = __library.get(b"wkeFireMouseEvent\0").map(|sym| *sym);
        let wkeFireContextMenuEvent = __library.get(b"wkeFireContextMenuEvent\0").map(|sym| *sym);
        let wkeFireMouseWheelEvent = __library.get(b"wkeFireMouseWheelEvent\0").map(|sym| *sym);
        let wkeFireKeyUpEvent = __library.get(b"wkeFireKeyUpEvent\0").map(|sym| *sym);
        let wkeFireKeyDownEvent = __library.get(b"wkeFireKeyDownEvent\0").map(|sym| *sym);
        let wkeFireKeyPressEvent = __library.get(b"wkeFireKeyPressEvent\0").map(|sym| *sym);
        let wkeFireWindowsMessage = __library.get(b"wkeFireWindowsMessage\0").map(|sym| *sym);
        let wkeSetFocus = __library.get(b"wkeSetFocus\0").map(|sym| *sym);
        let wkeKillFocus = __library.get(b"wkeKillFocus\0").map(|sym| *sym);
        let wkeGetCaretRect = __library.get(b"wkeGetCaretRect\0").map(|sym| *sym);
        let wkeGetCaretRect2 = __library.get(b"wkeGetCaretRect2\0").map(|sym| *sym);
        let wkeRunJS = __library.get(b"wkeRunJS\0").map(|sym| *sym);
        let wkeRunJSW = __library.get(b"wkeRunJSW\0").map(|sym| *sym);
        let wkeGlobalExec = __library.get(b"wkeGlobalExec\0").map(|sym| *sym);
        let wkeGetGlobalExecByFrame = __library.get(b"wkeGetGlobalExecByFrame\0").map(|sym| *sym);
        let wkeSleep = __library.get(b"wkeSleep\0").map(|sym| *sym);
        let wkeWake = __library.get(b"wkeWake\0").map(|sym| *sym);
        let wkeIsAwake = __library.get(b"wkeIsAwake\0").map(|sym| *sym);
        let wkeSetZoomFactor = __library.get(b"wkeSetZoomFactor\0").map(|sym| *sym);
        let wkeGetZoomFactor = __library.get(b"wkeGetZoomFactor\0").map(|sym| *sym);
        let wkeEnableHighDPISupport = __library.get(b"wkeEnableHighDPISupport\0").map(|sym| *sym);
        let wkeSetEditable = __library.get(b"wkeSetEditable\0").map(|sym| *sym);
        let wkeGetString = __library.get(b"wkeGetString\0").map(|sym| *sym);
        let wkeGetStringW = __library.get(b"wkeGetStringW\0").map(|sym| *sym);
        let wkeSetString = __library.get(b"wkeSetString\0").map(|sym| *sym);
        let wkeSetStringWithoutNullTermination = __library
            .get(b"wkeSetStringWithoutNullTermination\0")
            .map(|sym| *sym);
        let wkeSetStringW = __library.get(b"wkeSetStringW\0").map(|sym| *sym);
        let wkeCreateString = __library.get(b"wkeCreateString\0").map(|sym| *sym);
        let wkeCreateStringW = __library.get(b"wkeCreateStringW\0").map(|sym| *sym);
        let wkeCreateStringWithoutNullTermination = __library
            .get(b"wkeCreateStringWithoutNullTermination\0")
            .map(|sym| *sym);
        let wkeGetStringLen = __library.get(b"wkeGetStringLen\0").map(|sym| *sym);
        let wkeDeleteString = __library.get(b"wkeDeleteString\0").map(|sym| *sym);
        let wkeGetWebViewForCurrentContext = __library
            .get(b"wkeGetWebViewForCurrentContext\0")
            .map(|sym| *sym);
        let wkeSetUserKeyValue = __library.get(b"wkeSetUserKeyValue\0").map(|sym| *sym);
        let wkeGetUserKeyValue = __library.get(b"wkeGetUserKeyValue\0").map(|sym| *sym);
        let wkeGetCursorInfoType = __library.get(b"wkeGetCursorInfoType\0").map(|sym| *sym);
        let wkeSetCursorInfoType = __library.get(b"wkeSetCursorInfoType\0").map(|sym| *sym);
        let wkeSetDragFiles = __library.get(b"wkeSetDragFiles\0").map(|sym| *sym);
        let wkeSetDeviceParameter = __library.get(b"wkeSetDeviceParameter\0").map(|sym| *sym);
        let wkeGetTempCallbackInfo = __library.get(b"wkeGetTempCallbackInfo\0").map(|sym| *sym);
        let wkeOnCaretChanged = __library.get(b"wkeOnCaretChanged\0").map(|sym| *sym);
        let wkeOnMouseOverUrlChanged = __library.get(b"wkeOnMouseOverUrlChanged\0").map(|sym| *sym);
        let wkeOnTitleChanged = __library.get(b"wkeOnTitleChanged\0").map(|sym| *sym);
        let wkeOnURLChanged = __library.get(b"wkeOnURLChanged\0").map(|sym| *sym);
        let wkeOnURLChanged2 = __library.get(b"wkeOnURLChanged2\0").map(|sym| *sym);
        let wkeOnPaintUpdated = __library.get(b"wkeOnPaintUpdated\0").map(|sym| *sym);
        let wkeOnPaintBitUpdated = __library.get(b"wkeOnPaintBitUpdated\0").map(|sym| *sym);
        let wkeOnAlertBox = __library.get(b"wkeOnAlertBox\0").map(|sym| *sym);
        let wkeOnConfirmBox = __library.get(b"wkeOnConfirmBox\0").map(|sym| *sym);
        let wkeOnPromptBox = __library.get(b"wkeOnPromptBox\0").map(|sym| *sym);
        let wkeOnNavigation = __library.get(b"wkeOnNavigation\0").map(|sym| *sym);
        let wkeOnCreateView = __library.get(b"wkeOnCreateView\0").map(|sym| *sym);
        let wkeOnDocumentReady = __library.get(b"wkeOnDocumentReady\0").map(|sym| *sym);
        let wkeOnDocumentReady2 = __library.get(b"wkeOnDocumentReady2\0").map(|sym| *sym);
        let wkeOnLoadingFinish = __library.get(b"wkeOnLoadingFinish\0").map(|sym| *sym);
        let wkeOnDownload = __library.get(b"wkeOnDownload\0").map(|sym| *sym);
        let wkeOnDownload2 = __library.get(b"wkeOnDownload2\0").map(|sym| *sym);
        let wkeOnConsole = __library.get(b"wkeOnConsole\0").map(|sym| *sym);
        let wkeSetUIThreadCallback = __library.get(b"wkeSetUIThreadCallback\0").map(|sym| *sym);
        let wkeOnLoadUrlBegin = __library.get(b"wkeOnLoadUrlBegin\0").map(|sym| *sym);
        let wkeOnLoadUrlEnd = __library.get(b"wkeOnLoadUrlEnd\0").map(|sym| *sym);
        let wkeOnLoadUrlHeadersReceived = __library
            .get(b"wkeOnLoadUrlHeadersReceived\0")
            .map(|sym| *sym);
        let wkeOnLoadUrlFinish = __library.get(b"wkeOnLoadUrlFinish\0").map(|sym| *sym);
        let wkeOnLoadUrlFail = __library.get(b"wkeOnLoadUrlFail\0").map(|sym| *sym);
        let wkeOnDidCreateScriptContext = __library
            .get(b"wkeOnDidCreateScriptContext\0")
            .map(|sym| *sym);
        let wkeOnWillReleaseScriptContext = __library
            .get(b"wkeOnWillReleaseScriptContext\0")
            .map(|sym| *sym);
        let wkeOnWindowClosing = __library.get(b"wkeOnWindowClosing\0").map(|sym| *sym);
        let wkeOnWindowDestroy = __library.get(b"wkeOnWindowDestroy\0").map(|sym| *sym);
        let wkeOnDraggableRegionsChanged = __library
            .get(b"wkeOnDraggableRegionsChanged\0")
            .map(|sym| *sym);
        let wkeOnWillMediaLoad = __library.get(b"wkeOnWillMediaLoad\0").map(|sym| *sym);
        let wkeOnStartDragging = __library.get(b"wkeOnStartDragging\0").map(|sym| *sym);
        let wkeOnPrint = __library.get(b"wkeOnPrint\0").map(|sym| *sym);
        let wkeScreenshot = __library.get(b"wkeScreenshot\0").map(|sym| *sym);
        let wkeOnOtherLoad = __library.get(b"wkeOnOtherLoad\0").map(|sym| *sym);
        let wkeOnContextMenuItemClick = __library
            .get(b"wkeOnContextMenuItemClick\0")
            .map(|sym| *sym);
        let wkeIsProcessingUserGesture = __library
            .get(b"wkeIsProcessingUserGesture\0")
            .map(|sym| *sym);
        let wkeNetSetMIMEType = __library.get(b"wkeNetSetMIMEType\0").map(|sym| *sym);
        let wkeNetGetMIMEType = __library.get(b"wkeNetGetMIMEType\0").map(|sym| *sym);
        let wkeNetGetReferrer = __library.get(b"wkeNetGetReferrer\0").map(|sym| *sym);
        let wkeNetSetHTTPHeaderField = __library.get(b"wkeNetSetHTTPHeaderField\0").map(|sym| *sym);
        let wkeNetGetHTTPHeaderField = __library.get(b"wkeNetGetHTTPHeaderField\0").map(|sym| *sym);
        let wkeNetGetHTTPHeaderFieldFromResponse = __library
            .get(b"wkeNetGetHTTPHeaderFieldFromResponse\0")
            .map(|sym| *sym);
        let wkeNetSetData = __library.get(b"wkeNetSetData\0").map(|sym| *sym);
        let wkeNetHookRequest = __library.get(b"wkeNetHookRequest\0").map(|sym| *sym);
        let wkeNetOnResponse = __library.get(b"wkeNetOnResponse\0").map(|sym| *sym);
        let wkeNetGetRequestMethod = __library.get(b"wkeNetGetRequestMethod\0").map(|sym| *sym);
        let wkeNetGetFavicon = __library.get(b"wkeNetGetFavicon\0").map(|sym| *sym);
        let wkeNetContinueJob = __library.get(b"wkeNetContinueJob\0").map(|sym| *sym);
        let wkeNetGetUrlByJob = __library.get(b"wkeNetGetUrlByJob\0").map(|sym| *sym);
        let wkeNetGetRawHttpHead = __library.get(b"wkeNetGetRawHttpHead\0").map(|sym| *sym);
        let wkeNetGetRawResponseHead = __library.get(b"wkeNetGetRawResponseHead\0").map(|sym| *sym);
        let wkeNetCancelRequest = __library.get(b"wkeNetCancelRequest\0").map(|sym| *sym);
        let wkeNetHoldJobToAsynCommit = __library
            .get(b"wkeNetHoldJobToAsynCommit\0")
            .map(|sym| *sym);
        let wkeNetChangeRequestUrl = __library.get(b"wkeNetChangeRequestUrl\0").map(|sym| *sym);
        let wkeNetCreateWebUrlRequest = __library
            .get(b"wkeNetCreateWebUrlRequest\0")
            .map(|sym| *sym);
        let wkeNetCreateWebUrlRequest2 = __library
            .get(b"wkeNetCreateWebUrlRequest2\0")
            .map(|sym| *sym);
        let wkeNetCopyWebUrlRequest = __library.get(b"wkeNetCopyWebUrlRequest\0").map(|sym| *sym);
        let wkeNetDeleteBlinkWebURLRequestPtr = __library
            .get(b"wkeNetDeleteBlinkWebURLRequestPtr\0")
            .map(|sym| *sym);
        let wkeNetAddHTTPHeaderFieldToUrlRequest = __library
            .get(b"wkeNetAddHTTPHeaderFieldToUrlRequest\0")
            .map(|sym| *sym);
        let wkeNetStartUrlRequest = __library.get(b"wkeNetStartUrlRequest\0").map(|sym| *sym);
        let wkeNetGetHttpStatusCode = __library.get(b"wkeNetGetHttpStatusCode\0").map(|sym| *sym);
        let wkeNetGetExpectedContentLength = __library
            .get(b"wkeNetGetExpectedContentLength\0")
            .map(|sym| *sym);
        let wkeNetGetResponseUrl = __library.get(b"wkeNetGetResponseUrl\0").map(|sym| *sym);
        let wkeNetCancelWebUrlRequest = __library
            .get(b"wkeNetCancelWebUrlRequest\0")
            .map(|sym| *sym);
        let wkeNetGetPostBody = __library.get(b"wkeNetGetPostBody\0").map(|sym| *sym);
        let wkeNetCreatePostBodyElements = __library
            .get(b"wkeNetCreatePostBodyElements\0")
            .map(|sym| *sym);
        let wkeNetFreePostBodyElements = __library
            .get(b"wkeNetFreePostBodyElements\0")
            .map(|sym| *sym);
        let wkeNetCreatePostBodyElement = __library
            .get(b"wkeNetCreatePostBodyElement\0")
            .map(|sym| *sym);
        let wkeNetFreePostBodyElement = __library
            .get(b"wkeNetFreePostBodyElement\0")
            .map(|sym| *sym);
        let wkePopupDialogAndDownload = __library
            .get(b"wkePopupDialogAndDownload\0")
            .map(|sym| *sym);
        let wkeDownloadByPath = __library.get(b"wkeDownloadByPath\0").map(|sym| *sym);
        let wkeIsMainFrame = __library.get(b"wkeIsMainFrame\0").map(|sym| *sym);
        let wkeIsWebRemoteFrame = __library.get(b"wkeIsWebRemoteFrame\0").map(|sym| *sym);
        let wkeWebFrameGetMainFrame = __library.get(b"wkeWebFrameGetMainFrame\0").map(|sym| *sym);
        let wkeRunJsByFrame = __library.get(b"wkeRunJsByFrame\0").map(|sym| *sym);
        let wkeInsertCSSByFrame = __library.get(b"wkeInsertCSSByFrame\0").map(|sym| *sym);
        let wkeWebFrameGetMainWorldScriptContext = __library
            .get(b"wkeWebFrameGetMainWorldScriptContext\0")
            .map(|sym| *sym);
        let wkeGetBlinkMainThreadIsolate = __library
            .get(b"wkeGetBlinkMainThreadIsolate\0")
            .map(|sym| *sym);
        let wkeCreateWebWindow = __library.get(b"wkeCreateWebWindow\0").map(|sym| *sym);
        let wkeCreateWebCustomWindow = __library.get(b"wkeCreateWebCustomWindow\0").map(|sym| *sym);
        let wkeDestroyWebWindow = __library.get(b"wkeDestroyWebWindow\0").map(|sym| *sym);
        let wkeGetWindowHandle = __library.get(b"wkeGetWindowHandle\0").map(|sym| *sym);
        let wkeShowWindow = __library.get(b"wkeShowWindow\0").map(|sym| *sym);
        let wkeEnableWindow = __library.get(b"wkeEnableWindow\0").map(|sym| *sym);
        let wkeMoveWindow = __library.get(b"wkeMoveWindow\0").map(|sym| *sym);
        let wkeMoveToCenter = __library.get(b"wkeMoveToCenter\0").map(|sym| *sym);
        let wkeResizeWindow = __library.get(b"wkeResizeWindow\0").map(|sym| *sym);
        let wkeDragTargetDragEnter = __library.get(b"wkeDragTargetDragEnter\0").map(|sym| *sym);
        let wkeDragTargetDragOver = __library.get(b"wkeDragTargetDragOver\0").map(|sym| *sym);
        let wkeDragTargetDragLeave = __library.get(b"wkeDragTargetDragLeave\0").map(|sym| *sym);
        let wkeDragTargetDrop = __library.get(b"wkeDragTargetDrop\0").map(|sym| *sym);
        let wkeDragTargetEnd = __library.get(b"wkeDragTargetEnd\0").map(|sym| *sym);
        let wkeUtilSetUiCallback = __library.get(b"wkeUtilSetUiCallback\0").map(|sym| *sym);
        let wkeUtilSerializeToMHTML = __library.get(b"wkeUtilSerializeToMHTML\0").map(|sym| *sym);
        let wkeUtilPrintToPdf = __library.get(b"wkeUtilPrintToPdf\0").map(|sym| *sym);
        let wkePrintToBitmap = __library.get(b"wkePrintToBitmap\0").map(|sym| *sym);
        let wkeUtilRelasePrintPdfDatas = __library
            .get(b"wkeUtilRelasePrintPdfDatas\0")
            .map(|sym| *sym);
        let wkeSetWindowTitle = __library.get(b"wkeSetWindowTitle\0").map(|sym| *sym);
        let wkeSetWindowTitleW = __library.get(b"wkeSetWindowTitleW\0").map(|sym| *sym);
        let wkeNodeOnCreateProcess = __library.get(b"wkeNodeOnCreateProcess\0").map(|sym| *sym);
        let wkeOnPluginFind = __library.get(b"wkeOnPluginFind\0").map(|sym| *sym);
        let wkeAddNpapiPlugin = __library.get(b"wkeAddNpapiPlugin\0").map(|sym| *sym);
        let wkePluginListBuilderAddPlugin = __library
            .get(b"wkePluginListBuilderAddPlugin\0")
            .map(|sym| *sym);
        let wkePluginListBuilderAddMediaTypeToLastPlugin = __library
            .get(b"wkePluginListBuilderAddMediaTypeToLastPlugin\0")
            .map(|sym| *sym);
        let wkePluginListBuilderAddFileExtensionToLastMediaType = __library
            .get(b"wkePluginListBuilderAddFileExtensionToLastMediaType\0")
            .map(|sym| *sym);
        let wkeGetWebViewByNData = __library.get(b"wkeGetWebViewByNData\0").map(|sym| *sym);
        let wkeRegisterEmbedderCustomElement = __library
            .get(b"wkeRegisterEmbedderCustomElement\0")
            .map(|sym| *sym);
        let wkeSetMediaPlayerFactory = __library.get(b"wkeSetMediaPlayerFactory\0").map(|sym| *sym);
        let wkeGetContentAsMarkup = __library.get(b"wkeGetContentAsMarkup\0").map(|sym| *sym);
        let wkeUtilDecodeURLEscape = __library.get(b"wkeUtilDecodeURLEscape\0").map(|sym| *sym);
        let wkeUtilEncodeURLEscape = __library.get(b"wkeUtilEncodeURLEscape\0").map(|sym| *sym);
        let wkeUtilBase64Encode = __library.get(b"wkeUtilBase64Encode\0").map(|sym| *sym);
        let wkeUtilBase64Decode = __library.get(b"wkeUtilBase64Decode\0").map(|sym| *sym);
        let wkeUtilCreateV8Snapshot = __library.get(b"wkeUtilCreateV8Snapshot\0").map(|sym| *sym);
        let wkeRunMessageLoop = __library.get(b"wkeRunMessageLoop\0").map(|sym| *sym);
        let wkeSaveMemoryCache = __library.get(b"wkeSaveMemoryCache\0").map(|sym| *sym);
        let jsBindFunction = __library.get(b"jsBindFunction\0").map(|sym| *sym);
        let jsBindGetter = __library.get(b"jsBindGetter\0").map(|sym| *sym);
        let jsBindSetter = __library.get(b"jsBindSetter\0").map(|sym| *sym);
        let wkeJsBindFunction = __library.get(b"wkeJsBindFunction\0").map(|sym| *sym);
        let wkeJsBindGetter = __library.get(b"wkeJsBindGetter\0").map(|sym| *sym);
        let wkeJsBindSetter = __library.get(b"wkeJsBindSetter\0").map(|sym| *sym);
        let jsArgCount = __library.get(b"jsArgCount\0").map(|sym| *sym);
        let jsArgType = __library.get(b"jsArgType\0").map(|sym| *sym);
        let jsArg = __library.get(b"jsArg\0").map(|sym| *sym);
        let jsTypeOf = __library.get(b"jsTypeOf\0").map(|sym| *sym);
        let jsIsNumber = __library.get(b"jsIsNumber\0").map(|sym| *sym);
        let jsIsString = __library.get(b"jsIsString\0").map(|sym| *sym);
        let jsIsBoolean = __library.get(b"jsIsBoolean\0").map(|sym| *sym);
        let jsIsObject = __library.get(b"jsIsObject\0").map(|sym| *sym);
        let jsIsFunction = __library.get(b"jsIsFunction\0").map(|sym| *sym);
        let jsIsUndefined = __library.get(b"jsIsUndefined\0").map(|sym| *sym);
        let jsIsNull = __library.get(b"jsIsNull\0").map(|sym| *sym);
        let jsIsArray = __library.get(b"jsIsArray\0").map(|sym| *sym);
        let jsIsTrue = __library.get(b"jsIsTrue\0").map(|sym| *sym);
        let jsIsFalse = __library.get(b"jsIsFalse\0").map(|sym| *sym);
        let jsToInt = __library.get(b"jsToInt\0").map(|sym| *sym);
        let jsToFloat = __library.get(b"jsToFloat\0").map(|sym| *sym);
        let jsToDouble = __library.get(b"jsToDouble\0").map(|sym| *sym);
        let jsToDoubleString = __library.get(b"jsToDoubleString\0").map(|sym| *sym);
        let jsToBoolean = __library.get(b"jsToBoolean\0").map(|sym| *sym);
        let jsArrayBuffer = __library.get(b"jsArrayBuffer\0").map(|sym| *sym);
        let jsGetArrayBuffer = __library.get(b"jsGetArrayBuffer\0").map(|sym| *sym);
        let jsToTempString = __library.get(b"jsToTempString\0").map(|sym| *sym);
        let jsToTempStringW = __library.get(b"jsToTempStringW\0").map(|sym| *sym);
        let jsToV8Value = __library.get(b"jsToV8Value\0").map(|sym| *sym);
        let jsInt = __library.get(b"jsInt\0").map(|sym| *sym);
        let jsFloat = __library.get(b"jsFloat\0").map(|sym| *sym);
        let jsDouble = __library.get(b"jsDouble\0").map(|sym| *sym);
        let jsDoubleString = __library.get(b"jsDoubleString\0").map(|sym| *sym);
        let jsBoolean = __library.get(b"jsBoolean\0").map(|sym| *sym);
        let jsUndefined = __library.get(b"jsUndefined\0").map(|sym| *sym);
        let jsNull = __library.get(b"jsNull\0").map(|sym| *sym);
        let jsTrue = __library.get(b"jsTrue\0").map(|sym| *sym);
        let jsFalse = __library.get(b"jsFalse\0").map(|sym| *sym);
        let jsString = __library.get(b"jsString\0").map(|sym| *sym);
        let jsStringW = __library.get(b"jsStringW\0").map(|sym| *sym);
        let jsEmptyObject = __library.get(b"jsEmptyObject\0").map(|sym| *sym);
        let jsEmptyArray = __library.get(b"jsEmptyArray\0").map(|sym| *sym);
        let jsObject = __library.get(b"jsObject\0").map(|sym| *sym);
        let jsFunction = __library.get(b"jsFunction\0").map(|sym| *sym);
        let jsGetData = __library.get(b"jsGetData\0").map(|sym| *sym);
        let jsGet = __library.get(b"jsGet\0").map(|sym| *sym);
        let jsSet = __library.get(b"jsSet\0").map(|sym| *sym);
        let jsGetAt = __library.get(b"jsGetAt\0").map(|sym| *sym);
        let jsSetAt = __library.get(b"jsSetAt\0").map(|sym| *sym);
        let jsGetKeys = __library.get(b"jsGetKeys\0").map(|sym| *sym);
        let jsIsJsValueValid = __library.get(b"jsIsJsValueValid\0").map(|sym| *sym);
        let jsIsValidExecState = __library.get(b"jsIsValidExecState\0").map(|sym| *sym);
        let jsDeleteObjectProp = __library.get(b"jsDeleteObjectProp\0").map(|sym| *sym);
        let jsGetLength = __library.get(b"jsGetLength\0").map(|sym| *sym);
        let jsSetLength = __library.get(b"jsSetLength\0").map(|sym| *sym);
        let jsGlobalObject = __library.get(b"jsGlobalObject\0").map(|sym| *sym);
        let jsGetWebView = __library.get(b"jsGetWebView\0").map(|sym| *sym);
        let jsEval = __library.get(b"jsEval\0").map(|sym| *sym);
        let jsEvalW = __library.get(b"jsEvalW\0").map(|sym| *sym);
        let jsEvalExW = __library.get(b"jsEvalExW\0").map(|sym| *sym);
        let jsCall = __library.get(b"jsCall\0").map(|sym| *sym);
        let jsCallGlobal = __library.get(b"jsCallGlobal\0").map(|sym| *sym);
        let jsGetGlobal = __library.get(b"jsGetGlobal\0").map(|sym| *sym);
        let jsSetGlobal = __library.get(b"jsSetGlobal\0").map(|sym| *sym);
        let jsGC = __library.get(b"jsGC\0").map(|sym| *sym);
        let jsAddRef = __library.get(b"jsAddRef\0").map(|sym| *sym);
        let jsReleaseRef = __library.get(b"jsReleaseRef\0").map(|sym| *sym);
        let jsGetLastErrorIfException = __library
            .get(b"jsGetLastErrorIfException\0")
            .map(|sym| *sym);
        let jsThrowException = __library.get(b"jsThrowException\0").map(|sym| *sym);
        let jsGetCallstack = __library.get(b"jsGetCallstack\0").map(|sym| *sym);
        Ok(Library {
            __library,
            wkeInit,
            wkeInitialize,
            wkeInitializeEx,
            wkeShutdown,
            wkeShutdownForDebug,
            wkeVersion,
            wkeVersionString,
            wkeGC,
            wkeSetResourceGc,
            wkeSetFileSystem,
            wkeWebViewName,
            wkeSetWebViewName,
            wkeIsLoaded,
            wkeIsLoadFailed,
            wkeIsLoadComplete,
            wkeGetSource,
            wkeTitle,
            wkeTitleW,
            wkeWidth,
            wkeHeight,
            wkeContentsWidth,
            wkeContentsHeight,
            wkeSelectAll,
            wkeCopy,
            wkeCut,
            wkePaste,
            wkeDelete,
            wkeCookieEnabled,
            wkeMediaVolume,
            wkeMouseEvent,
            wkeContextMenuEvent,
            wkeMouseWheel,
            wkeKeyUp,
            wkeKeyDown,
            wkeKeyPress,
            wkeFocus,
            wkeUnfocus,
            wkeGetCaret,
            wkeAwaken,
            wkeZoomFactor,
            wkeSetClientHandler,
            wkeGetClientHandler,
            wkeToString,
            wkeToStringW,
            jsToString,
            jsToStringW,
            wkeConfigure,
            wkeIsInitialize,
            wkeSetViewSettings,
            wkeSetDebugConfig,
            wkeGetDebugConfig,
            wkeFinalize,
            wkeUpdate,
            wkeGetVersion,
            wkeGetVersionString,
            wkeCreateWebView,
            wkeDestroyWebView,
            wkeSetMemoryCacheEnable,
            wkeSetMouseEnabled,
            wkeSetTouchEnabled,
            wkeSetSystemTouchEnabled,
            wkeSetContextMenuEnabled,
            wkeSetNavigationToNewWindowEnable,
            wkeSetCspCheckEnable,
            wkeSetNpapiPluginsEnabled,
            wkeSetHeadlessEnabled,
            wkeSetDragEnable,
            wkeSetDragDropEnable,
            wkeSetContextMenuItemShow,
            wkeSetLanguage,
            wkeSetViewNetInterface,
            wkeSetProxy,
            wkeSetViewProxy,
            wkeGetName,
            wkeSetName,
            wkeSetHandle,
            wkeSetHandleOffset,
            wkeIsTransparent,
            wkeSetTransparent,
            wkeSetUserAgent,
            wkeGetUserAgent,
            wkeSetUserAgentW,
            wkeShowDevtools,
            wkeLoadW,
            wkeLoadURL,
            wkeLoadURLW,
            wkePostURL,
            wkePostURLW,
            wkeLoadHTML,
            wkeLoadHtmlWithBaseUrl,
            wkeLoadHTMLW,
            wkeLoadFile,
            wkeLoadFileW,
            wkeGetURL,
            wkeGetFrameUrl,
            wkeIsLoading,
            wkeIsLoadingSucceeded,
            wkeIsLoadingFailed,
            wkeIsLoadingCompleted,
            wkeIsDocumentReady,
            wkeStopLoading,
            wkeReload,
            wkeGoToOffset,
            wkeGoToIndex,
            wkeGetWebviewId,
            wkeIsWebviewAlive,
            wkeIsWebviewValid,
            wkeGetDocumentCompleteURL,
            wkeCreateMemBuf,
            wkeFreeMemBuf,
            wkeGetTitle,
            wkeGetTitleW,
            wkeResize,
            wkeGetWidth,
            wkeGetHeight,
            wkeGetContentWidth,
            wkeGetContentHeight,
            wkeSetDirty,
            wkeIsDirty,
            wkeAddDirtyArea,
            wkeLayoutIfNeeded,
            wkePaint2,
            wkePaint,
            wkeRepaintIfNeeded,
            wkeGetViewDC,
            wkeUnlockViewDC,
            wkeGetHostHWND,
            wkeCanGoBack,
            wkeGoBack,
            wkeCanGoForward,
            wkeGoForward,
            wkeNavigateAtIndex,
            wkeGetNavigateIndex,
            wkeEditorSelectAll,
            wkeEditorUnSelect,
            wkeEditorCopy,
            wkeEditorCut,
            wkeEditorPaste,
            wkeEditorDelete,
            wkeEditorUndo,
            wkeEditorRedo,
            wkeGetCookieW,
            wkeGetCookie,
            wkeSetCookie,
            wkeVisitAllCookie,
            wkePerformCookieCommand,
            wkeSetCookieEnabled,
            wkeIsCookieEnabled,
            wkeSetCookieJarPath,
            wkeSetCookieJarFullPath,
            wkeClearCookie,
            wkeSetLocalStorageFullPath,
            wkeAddPluginDirectory,
            wkeSetMediaVolume,
            wkeGetMediaVolume,
            wkeFireMouseEvent,
            wkeFireContextMenuEvent,
            wkeFireMouseWheelEvent,
            wkeFireKeyUpEvent,
            wkeFireKeyDownEvent,
            wkeFireKeyPressEvent,
            wkeFireWindowsMessage,
            wkeSetFocus,
            wkeKillFocus,
            wkeGetCaretRect,
            wkeGetCaretRect2,
            wkeRunJS,
            wkeRunJSW,
            wkeGlobalExec,
            wkeGetGlobalExecByFrame,
            wkeSleep,
            wkeWake,
            wkeIsAwake,
            wkeSetZoomFactor,
            wkeGetZoomFactor,
            wkeEnableHighDPISupport,
            wkeSetEditable,
            wkeGetString,
            wkeGetStringW,
            wkeSetString,
            wkeSetStringWithoutNullTermination,
            wkeSetStringW,
            wkeCreateString,
            wkeCreateStringW,
            wkeCreateStringWithoutNullTermination,
            wkeGetStringLen,
            wkeDeleteString,
            wkeGetWebViewForCurrentContext,
            wkeSetUserKeyValue,
            wkeGetUserKeyValue,
            wkeGetCursorInfoType,
            wkeSetCursorInfoType,
            wkeSetDragFiles,
            wkeSetDeviceParameter,
            wkeGetTempCallbackInfo,
            wkeOnCaretChanged,
            wkeOnMouseOverUrlChanged,
            wkeOnTitleChanged,
            wkeOnURLChanged,
            wkeOnURLChanged2,
            wkeOnPaintUpdated,
            wkeOnPaintBitUpdated,
            wkeOnAlertBox,
            wkeOnConfirmBox,
            wkeOnPromptBox,
            wkeOnNavigation,
            wkeOnCreateView,
            wkeOnDocumentReady,
            wkeOnDocumentReady2,
            wkeOnLoadingFinish,
            wkeOnDownload,
            wkeOnDownload2,
            wkeOnConsole,
            wkeSetUIThreadCallback,
            wkeOnLoadUrlBegin,
            wkeOnLoadUrlEnd,
            wkeOnLoadUrlHeadersReceived,
            wkeOnLoadUrlFinish,
            wkeOnLoadUrlFail,
            wkeOnDidCreateScriptContext,
            wkeOnWillReleaseScriptContext,
            wkeOnWindowClosing,
            wkeOnWindowDestroy,
            wkeOnDraggableRegionsChanged,
            wkeOnWillMediaLoad,
            wkeOnStartDragging,
            wkeOnPrint,
            wkeScreenshot,
            wkeOnOtherLoad,
            wkeOnContextMenuItemClick,
            wkeIsProcessingUserGesture,
            wkeNetSetMIMEType,
            wkeNetGetMIMEType,
            wkeNetGetReferrer,
            wkeNetSetHTTPHeaderField,
            wkeNetGetHTTPHeaderField,
            wkeNetGetHTTPHeaderFieldFromResponse,
            wkeNetSetData,
            wkeNetHookRequest,
            wkeNetOnResponse,
            wkeNetGetRequestMethod,
            wkeNetGetFavicon,
            wkeNetContinueJob,
            wkeNetGetUrlByJob,
            wkeNetGetRawHttpHead,
            wkeNetGetRawResponseHead,
            wkeNetCancelRequest,
            wkeNetHoldJobToAsynCommit,
            wkeNetChangeRequestUrl,
            wkeNetCreateWebUrlRequest,
            wkeNetCreateWebUrlRequest2,
            wkeNetCopyWebUrlRequest,
            wkeNetDeleteBlinkWebURLRequestPtr,
            wkeNetAddHTTPHeaderFieldToUrlRequest,
            wkeNetStartUrlRequest,
            wkeNetGetHttpStatusCode,
            wkeNetGetExpectedContentLength,
            wkeNetGetResponseUrl,
            wkeNetCancelWebUrlRequest,
            wkeNetGetPostBody,
            wkeNetCreatePostBodyElements,
            wkeNetFreePostBodyElements,
            wkeNetCreatePostBodyElement,
            wkeNetFreePostBodyElement,
            wkePopupDialogAndDownload,
            wkeDownloadByPath,
            wkeIsMainFrame,
            wkeIsWebRemoteFrame,
            wkeWebFrameGetMainFrame,
            wkeRunJsByFrame,
            wkeInsertCSSByFrame,
            wkeWebFrameGetMainWorldScriptContext,
            wkeGetBlinkMainThreadIsolate,
            wkeCreateWebWindow,
            wkeCreateWebCustomWindow,
            wkeDestroyWebWindow,
            wkeGetWindowHandle,
            wkeShowWindow,
            wkeEnableWindow,
            wkeMoveWindow,
            wkeMoveToCenter,
            wkeResizeWindow,
            wkeDragTargetDragEnter,
            wkeDragTargetDragOver,
            wkeDragTargetDragLeave,
            wkeDragTargetDrop,
            wkeDragTargetEnd,
            wkeUtilSetUiCallback,
            wkeUtilSerializeToMHTML,
            wkeUtilPrintToPdf,
            wkePrintToBitmap,
            wkeUtilRelasePrintPdfDatas,
            wkeSetWindowTitle,
            wkeSetWindowTitleW,
            wkeNodeOnCreateProcess,
            wkeOnPluginFind,
            wkeAddNpapiPlugin,
            wkePluginListBuilderAddPlugin,
            wkePluginListBuilderAddMediaTypeToLastPlugin,
            wkePluginListBuilderAddFileExtensionToLastMediaType,
            wkeGetWebViewByNData,
            wkeRegisterEmbedderCustomElement,
            wkeSetMediaPlayerFactory,
            wkeGetContentAsMarkup,
            wkeUtilDecodeURLEscape,
            wkeUtilEncodeURLEscape,
            wkeUtilBase64Encode,
            wkeUtilBase64Decode,
            wkeUtilCreateV8Snapshot,
            wkeRunMessageLoop,
            wkeSaveMemoryCache,
            jsBindFunction,
            jsBindGetter,
            jsBindSetter,
            wkeJsBindFunction,
            wkeJsBindGetter,
            wkeJsBindSetter,
            jsArgCount,
            jsArgType,
            jsArg,
            jsTypeOf,
            jsIsNumber,
            jsIsString,
            jsIsBoolean,
            jsIsObject,
            jsIsFunction,
            jsIsUndefined,
            jsIsNull,
            jsIsArray,
            jsIsTrue,
            jsIsFalse,
            jsToInt,
            jsToFloat,
            jsToDouble,
            jsToDoubleString,
            jsToBoolean,
            jsArrayBuffer,
            jsGetArrayBuffer,
            jsToTempString,
            jsToTempStringW,
            jsToV8Value,
            jsInt,
            jsFloat,
            jsDouble,
            jsDoubleString,
            jsBoolean,
            jsUndefined,
            jsNull,
            jsTrue,
            jsFalse,
            jsString,
            jsStringW,
            jsEmptyObject,
            jsEmptyArray,
            jsObject,
            jsFunction,
            jsGetData,
            jsGet,
            jsSet,
            jsGetAt,
            jsSetAt,
            jsGetKeys,
            jsIsJsValueValid,
            jsIsValidExecState,
            jsDeleteObjectProp,
            jsGetLength,
            jsSetLength,
            jsGlobalObject,
            jsGetWebView,
            jsEval,
            jsEvalW,
            jsEvalExW,
            jsCall,
            jsCallGlobal,
            jsGetGlobal,
            jsSetGlobal,
            jsGC,
            jsAddRef,
            jsReleaseRef,
            jsGetLastErrorIfException,
            jsThrowException,
            jsGetCallstack,
        })
    }
    pub unsafe fn wkeInit(&self) {
        (self
            .wkeInit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeInitialize(&self) {
        (self
            .wkeInitialize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeInitializeEx(&self, settings: *const wkeSettings) {
        (self
            .wkeInitializeEx
            .as_ref()
            .expect("Expected function, got error."))(settings)
    }
    pub unsafe fn wkeShutdown(&self) {
        (self
            .wkeShutdown
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeShutdownForDebug(&self) {
        (self
            .wkeShutdownForDebug
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeVersion(&self) -> ::std::os::raw::c_uint {
        (self
            .wkeVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeVersionString(&self) -> *const utf8 {
        (self
            .wkeVersionString
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeGC(&self, webView: wkeWebView, intervalSec: ::std::os::raw::c_long) {
        (self.wkeGC.as_ref().expect("Expected function, got error."))(webView, intervalSec)
    }
    pub unsafe fn wkeSetResourceGc(
        &self,
        webView: wkeWebView,
        intervalSec: ::std::os::raw::c_long,
    ) {
        (self
            .wkeSetResourceGc
            .as_ref()
            .expect("Expected function, got error."))(webView, intervalSec)
    }
    pub unsafe fn wkeSetFileSystem(
        &self,
        pfnOpen: WKE_FILE_OPEN,
        pfnClose: WKE_FILE_CLOSE,
        pfnSize: WKE_FILE_SIZE,
        pfnRead: WKE_FILE_READ,
        pfnSeek: WKE_FILE_SEEK,
    ) {
        (self
            .wkeSetFileSystem
            .as_ref()
            .expect("Expected function, got error."))(
            pfnOpen, pfnClose, pfnSize, pfnRead, pfnSeek
        )
    }
    pub unsafe fn wkeWebViewName(&self, webView: wkeWebView) -> *const ::std::os::raw::c_char {
        (self
            .wkeWebViewName
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetWebViewName(
        &self,
        webView: wkeWebView,
        name: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeSetWebViewName
            .as_ref()
            .expect("Expected function, got error."))(webView, name)
    }
    pub unsafe fn wkeIsLoaded(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoaded
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsLoadFailed(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoadFailed
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsLoadComplete(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoadComplete
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetSource(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeGetSource
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeTitle(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeTitle
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeTitleW(&self, webView: wkeWebView) -> *const wchar_t {
        (self
            .wkeTitleW
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeWidth(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeWidth
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeHeight(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeHeight
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeContentsWidth(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeContentsWidth
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeContentsHeight(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeContentsHeight
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSelectAll(&self, webView: wkeWebView) {
        (self
            .wkeSelectAll
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeCopy(&self, webView: wkeWebView) {
        (self
            .wkeCopy
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeCut(&self, webView: wkeWebView) {
        (self.wkeCut.as_ref().expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkePaste(&self, webView: wkeWebView) {
        (self
            .wkePaste
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeDelete(&self, webView: wkeWebView) {
        (self
            .wkeDelete
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeCookieEnabled(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeCookieEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeMediaVolume(&self, webView: wkeWebView) -> f32 {
        (self
            .wkeMediaVolume
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeMouseEvent(
        &self,
        webView: wkeWebView,
        message: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeMouseEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, message, x, y, flags)
    }
    pub unsafe fn wkeContextMenuEvent(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeContextMenuEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, flags)
    }
    pub unsafe fn wkeMouseWheel(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeMouseWheel
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, delta, flags)
    }
    pub unsafe fn wkeKeyUp(
        &self,
        webView: wkeWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeKeyUp
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn wkeKeyDown(
        &self,
        webView: wkeWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeKeyDown
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn wkeKeyPress(
        &self,
        webView: wkeWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeKeyPress
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn wkeFocus(&self, webView: wkeWebView) {
        (self
            .wkeFocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeUnfocus(&self, webView: wkeWebView) {
        (self
            .wkeUnfocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetCaret(&self, webView: wkeWebView) -> wkeRect {
        (self
            .wkeGetCaret
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeAwaken(&self, webView: wkeWebView) {
        (self
            .wkeAwaken
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeZoomFactor(&self, webView: wkeWebView) -> f32 {
        (self
            .wkeZoomFactor
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetClientHandler(
        &self,
        webView: wkeWebView,
        handler: *const wkeClientHandler,
    ) {
        (self
            .wkeSetClientHandler
            .as_ref()
            .expect("Expected function, got error."))(webView, handler)
    }
    pub unsafe fn wkeGetClientHandler(&self, webView: wkeWebView) -> *const wkeClientHandler {
        (self
            .wkeGetClientHandler
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeToString(&self, string: wkeString) -> *const utf8 {
        (self
            .wkeToString
            .as_ref()
            .expect("Expected function, got error."))(string)
    }
    pub unsafe fn wkeToStringW(&self, string: wkeString) -> *const wchar_t {
        (self
            .wkeToStringW
            .as_ref()
            .expect("Expected function, got error."))(string)
    }
    pub unsafe fn jsToString(&self, es: jsExecState, v: jsValue) -> *const utf8 {
        (self
            .jsToString
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToStringW(&self, es: jsExecState, v: jsValue) -> *const wchar_t {
        (self
            .jsToStringW
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn wkeConfigure(&self, settings: *const wkeSettings) {
        (self
            .wkeConfigure
            .as_ref()
            .expect("Expected function, got error."))(settings)
    }
    pub unsafe fn wkeIsInitialize(&self) -> BOOL {
        (self
            .wkeIsInitialize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeSetViewSettings(&self, webView: wkeWebView, settings: *const wkeViewSettings) {
        (self
            .wkeSetViewSettings
            .as_ref()
            .expect("Expected function, got error."))(webView, settings)
    }
    pub unsafe fn wkeSetDebugConfig(
        &self,
        webView: wkeWebView,
        debugString: *const ::std::os::raw::c_char,
        param: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeSetDebugConfig
            .as_ref()
            .expect("Expected function, got error."))(webView, debugString, param)
    }
    pub unsafe fn wkeGetDebugConfig(
        &self,
        webView: wkeWebView,
        debugString: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .wkeGetDebugConfig
            .as_ref()
            .expect("Expected function, got error."))(webView, debugString)
    }
    pub unsafe fn wkeFinalize(&self) {
        (self
            .wkeFinalize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeUpdate(&self) {
        (self
            .wkeUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeGetVersion(&self) -> ::std::os::raw::c_uint {
        (self
            .wkeGetVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeGetVersionString(&self) -> *const utf8 {
        (self
            .wkeGetVersionString
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeCreateWebView(&self) -> wkeWebView {
        (self
            .wkeCreateWebView
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeDestroyWebView(&self, webView: wkeWebView) {
        (self
            .wkeDestroyWebView
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetMemoryCacheEnable(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetMemoryCacheEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetMouseEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetMouseEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetTouchEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetTouchEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetSystemTouchEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetSystemTouchEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetContextMenuEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetContextMenuEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetNavigationToNewWindowEnable(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetNavigationToNewWindowEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetCspCheckEnable(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetCspCheckEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetNpapiPluginsEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetNpapiPluginsEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetHeadlessEnabled(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetHeadlessEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetDragEnable(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetDragEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetDragDropEnable(&self, webView: wkeWebView, b: bool) {
        (self
            .wkeSetDragDropEnable
            .as_ref()
            .expect("Expected function, got error."))(webView, b)
    }
    pub unsafe fn wkeSetContextMenuItemShow(
        &self,
        webView: wkeWebView,
        item: wkeMenuItemId,
        isShow: bool,
    ) {
        (self
            .wkeSetContextMenuItemShow
            .as_ref()
            .expect("Expected function, got error."))(webView, item, isShow)
    }
    pub unsafe fn wkeSetLanguage(
        &self,
        webView: wkeWebView,
        language: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeSetLanguage
            .as_ref()
            .expect("Expected function, got error."))(webView, language)
    }
    pub unsafe fn wkeSetViewNetInterface(
        &self,
        webView: wkeWebView,
        netInterface: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeSetViewNetInterface
            .as_ref()
            .expect("Expected function, got error."))(webView, netInterface)
    }
    pub unsafe fn wkeSetProxy(&self, proxy: *const wkeProxy) {
        (self
            .wkeSetProxy
            .as_ref()
            .expect("Expected function, got error."))(proxy)
    }
    pub unsafe fn wkeSetViewProxy(&self, webView: wkeWebView, proxy: *mut wkeProxy) {
        (self
            .wkeSetViewProxy
            .as_ref()
            .expect("Expected function, got error."))(webView, proxy)
    }
    pub unsafe fn wkeGetName(&self, webView: wkeWebView) -> *const ::std::os::raw::c_char {
        (self
            .wkeGetName
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetName(&self, webView: wkeWebView, name: *const ::std::os::raw::c_char) {
        (self
            .wkeSetName
            .as_ref()
            .expect("Expected function, got error."))(webView, name)
    }
    pub unsafe fn wkeSetHandle(&self, webView: wkeWebView, wnd: HWND) {
        (self
            .wkeSetHandle
            .as_ref()
            .expect("Expected function, got error."))(webView, wnd)
    }
    pub unsafe fn wkeSetHandleOffset(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .wkeSetHandleOffset
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y)
    }
    pub unsafe fn wkeIsTransparent(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsTransparent
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetTransparent(&self, webView: wkeWebView, transparent: bool) {
        (self
            .wkeSetTransparent
            .as_ref()
            .expect("Expected function, got error."))(webView, transparent)
    }
    pub unsafe fn wkeSetUserAgent(&self, webView: wkeWebView, userAgent: *const utf8) {
        (self
            .wkeSetUserAgent
            .as_ref()
            .expect("Expected function, got error."))(webView, userAgent)
    }
    pub unsafe fn wkeGetUserAgent(&self, webView: wkeWebView) -> *const ::std::os::raw::c_char {
        (self
            .wkeGetUserAgent
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetUserAgentW(&self, webView: wkeWebView, userAgent: *const wchar_t) {
        (self
            .wkeSetUserAgentW
            .as_ref()
            .expect("Expected function, got error."))(webView, userAgent)
    }
    pub unsafe fn wkeShowDevtools(
        &self,
        webView: wkeWebView,
        path: *const wchar_t,
        callback: wkeOnShowDevtoolsCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeShowDevtools
            .as_ref()
            .expect("Expected function, got error."))(webView, path, callback, param)
    }
    pub unsafe fn wkeLoadW(&self, webView: wkeWebView, url: *const wchar_t) {
        (self
            .wkeLoadW
            .as_ref()
            .expect("Expected function, got error."))(webView, url)
    }
    pub unsafe fn wkeLoadURL(&self, webView: wkeWebView, url: *const utf8) {
        (self
            .wkeLoadURL
            .as_ref()
            .expect("Expected function, got error."))(webView, url)
    }
    pub unsafe fn wkeLoadURLW(&self, webView: wkeWebView, url: *const wchar_t) {
        (self
            .wkeLoadURLW
            .as_ref()
            .expect("Expected function, got error."))(webView, url)
    }
    pub unsafe fn wkePostURL(
        &self,
        wkeView: wkeWebView,
        url: *const utf8,
        postData: *const ::std::os::raw::c_char,
        postLen: ::std::os::raw::c_int,
    ) {
        (self
            .wkePostURL
            .as_ref()
            .expect("Expected function, got error."))(wkeView, url, postData, postLen)
    }
    pub unsafe fn wkePostURLW(
        &self,
        wkeView: wkeWebView,
        url: *const wchar_t,
        postData: *const ::std::os::raw::c_char,
        postLen: ::std::os::raw::c_int,
    ) {
        (self
            .wkePostURLW
            .as_ref()
            .expect("Expected function, got error."))(wkeView, url, postData, postLen)
    }
    pub unsafe fn wkeLoadHTML(&self, webView: wkeWebView, html: *const utf8) {
        (self
            .wkeLoadHTML
            .as_ref()
            .expect("Expected function, got error."))(webView, html)
    }
    pub unsafe fn wkeLoadHtmlWithBaseUrl(
        &self,
        webView: wkeWebView,
        html: *const utf8,
        baseUrl: *const utf8,
    ) {
        (self
            .wkeLoadHtmlWithBaseUrl
            .as_ref()
            .expect("Expected function, got error."))(webView, html, baseUrl)
    }
    pub unsafe fn wkeLoadHTMLW(&self, webView: wkeWebView, html: *const wchar_t) {
        (self
            .wkeLoadHTMLW
            .as_ref()
            .expect("Expected function, got error."))(webView, html)
    }
    pub unsafe fn wkeLoadFile(&self, webView: wkeWebView, filename: *const utf8) {
        (self
            .wkeLoadFile
            .as_ref()
            .expect("Expected function, got error."))(webView, filename)
    }
    pub unsafe fn wkeLoadFileW(&self, webView: wkeWebView, filename: *const wchar_t) {
        (self
            .wkeLoadFileW
            .as_ref()
            .expect("Expected function, got error."))(webView, filename)
    }
    pub unsafe fn wkeGetURL(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeGetURL
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetFrameUrl(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
    ) -> *const utf8 {
        (self
            .wkeGetFrameUrl
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn wkeIsLoading(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoading
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsLoadingSucceeded(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoadingSucceeded
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsLoadingFailed(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoadingFailed
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsLoadingCompleted(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsLoadingCompleted
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsDocumentReady(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsDocumentReady
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeStopLoading(&self, webView: wkeWebView) {
        (self
            .wkeStopLoading
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeReload(&self, webView: wkeWebView) {
        (self
            .wkeReload
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGoToOffset(&self, webView: wkeWebView, offset: ::std::os::raw::c_int) {
        (self
            .wkeGoToOffset
            .as_ref()
            .expect("Expected function, got error."))(webView, offset)
    }
    pub unsafe fn wkeGoToIndex(&self, webView: wkeWebView, index: ::std::os::raw::c_int) {
        (self
            .wkeGoToIndex
            .as_ref()
            .expect("Expected function, got error."))(webView, index)
    }
    pub unsafe fn wkeGetWebviewId(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetWebviewId
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsWebviewAlive(&self, id: ::std::os::raw::c_int) -> BOOL {
        (self
            .wkeIsWebviewAlive
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn wkeIsWebviewValid(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsWebviewValid
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetDocumentCompleteURL(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        partialURL: *const utf8,
    ) -> *const utf8 {
        (self
            .wkeGetDocumentCompleteURL
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, partialURL)
    }
    pub unsafe fn wkeCreateMemBuf(
        &self,
        webView: wkeWebView,
        buf: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> *mut wkeMemBuf {
        (self
            .wkeCreateMemBuf
            .as_ref()
            .expect("Expected function, got error."))(webView, buf, length)
    }
    pub unsafe fn wkeFreeMemBuf(&self, buf: *mut wkeMemBuf) {
        (self
            .wkeFreeMemBuf
            .as_ref()
            .expect("Expected function, got error."))(buf)
    }
    pub unsafe fn wkeGetTitle(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeGetTitle
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetTitleW(&self, webView: wkeWebView) -> *const wchar_t {
        (self
            .wkeGetTitleW
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeResize(
        &self,
        webView: wkeWebView,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .wkeResize
            .as_ref()
            .expect("Expected function, got error."))(webView, w, h)
    }
    pub unsafe fn wkeGetWidth(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetWidth
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetHeight(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetHeight
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetContentWidth(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetContentWidth
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetContentHeight(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetContentHeight
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetDirty(&self, webView: wkeWebView, dirty: bool) {
        (self
            .wkeSetDirty
            .as_ref()
            .expect("Expected function, got error."))(webView, dirty)
    }
    pub unsafe fn wkeIsDirty(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsDirty
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeAddDirtyArea(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .wkeAddDirtyArea
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, w, h)
    }
    pub unsafe fn wkeLayoutIfNeeded(&self, webView: wkeWebView) {
        (self
            .wkeLayoutIfNeeded
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkePaint2(
        &self,
        webView: wkeWebView,
        bits: *mut ::std::os::raw::c_void,
        bufWid: ::std::os::raw::c_int,
        bufHei: ::std::os::raw::c_int,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        bCopyAlpha: bool,
    ) {
        (self
            .wkePaint2
            .as_ref()
            .expect("Expected function, got error."))(
            webView, bits, bufWid, bufHei, xDst, yDst, w, h, xSrc, ySrc, bCopyAlpha,
        )
    }
    pub unsafe fn wkePaint(
        &self,
        webView: wkeWebView,
        bits: *mut ::std::os::raw::c_void,
        pitch: ::std::os::raw::c_int,
    ) {
        (self
            .wkePaint
            .as_ref()
            .expect("Expected function, got error."))(webView, bits, pitch)
    }
    pub unsafe fn wkeRepaintIfNeeded(&self, webView: wkeWebView) {
        (self
            .wkeRepaintIfNeeded
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetViewDC(&self, webView: wkeWebView) -> HDC {
        (self
            .wkeGetViewDC
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeUnlockViewDC(&self, webView: wkeWebView) {
        (self
            .wkeUnlockViewDC
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetHostHWND(&self, webView: wkeWebView) -> HWND {
        (self
            .wkeGetHostHWND
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeCanGoBack(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeCanGoBack
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGoBack(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeGoBack
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeCanGoForward(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeCanGoForward
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGoForward(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeGoForward
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeNavigateAtIndex(
        &self,
        webView: wkeWebView,
        index: ::std::os::raw::c_int,
    ) -> BOOL {
        (self
            .wkeNavigateAtIndex
            .as_ref()
            .expect("Expected function, got error."))(webView, index)
    }
    pub unsafe fn wkeGetNavigateIndex(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetNavigateIndex
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorSelectAll(&self, webView: wkeWebView) {
        (self
            .wkeEditorSelectAll
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorUnSelect(&self, webView: wkeWebView) {
        (self
            .wkeEditorUnSelect
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorCopy(&self, webView: wkeWebView) {
        (self
            .wkeEditorCopy
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorCut(&self, webView: wkeWebView) {
        (self
            .wkeEditorCut
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorPaste(&self, webView: wkeWebView) {
        (self
            .wkeEditorPaste
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorDelete(&self, webView: wkeWebView) {
        (self
            .wkeEditorDelete
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorUndo(&self, webView: wkeWebView) {
        (self
            .wkeEditorUndo
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEditorRedo(&self, webView: wkeWebView) {
        (self
            .wkeEditorRedo
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetCookieW(&self, webView: wkeWebView) -> *const wchar_t {
        (self
            .wkeGetCookieW
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetCookie(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeGetCookie
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetCookie(&self, webView: wkeWebView, url: *const utf8, cookie: *const utf8) {
        (self
            .wkeSetCookie
            .as_ref()
            .expect("Expected function, got error."))(webView, url, cookie)
    }
    pub unsafe fn wkeVisitAllCookie(
        &self,
        webView: wkeWebView,
        params: *mut ::std::os::raw::c_void,
        visitor: wkeCookieVisitor,
    ) {
        (self
            .wkeVisitAllCookie
            .as_ref()
            .expect("Expected function, got error."))(webView, params, visitor)
    }
    pub unsafe fn wkePerformCookieCommand(&self, webView: wkeWebView, command: wkeCookieCommand) {
        (self
            .wkePerformCookieCommand
            .as_ref()
            .expect("Expected function, got error."))(webView, command)
    }
    pub unsafe fn wkeSetCookieEnabled(&self, webView: wkeWebView, enable: bool) {
        (self
            .wkeSetCookieEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView, enable)
    }
    pub unsafe fn wkeIsCookieEnabled(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsCookieEnabled
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetCookieJarPath(&self, webView: wkeWebView, path: *const WCHAR) {
        (self
            .wkeSetCookieJarPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn wkeSetCookieJarFullPath(&self, webView: wkeWebView, path: *const WCHAR) {
        (self
            .wkeSetCookieJarFullPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn wkeClearCookie(&self, webView: wkeWebView) {
        (self
            .wkeClearCookie
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetLocalStorageFullPath(&self, webView: wkeWebView, path: *const WCHAR) {
        (self
            .wkeSetLocalStorageFullPath
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn wkeAddPluginDirectory(&self, webView: wkeWebView, path: *const WCHAR) {
        (self
            .wkeAddPluginDirectory
            .as_ref()
            .expect("Expected function, got error."))(webView, path)
    }
    pub unsafe fn wkeSetMediaVolume(&self, webView: wkeWebView, volume: f32) {
        (self
            .wkeSetMediaVolume
            .as_ref()
            .expect("Expected function, got error."))(webView, volume)
    }
    pub unsafe fn wkeGetMediaVolume(&self, webView: wkeWebView) -> f32 {
        (self
            .wkeGetMediaVolume
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeFireMouseEvent(
        &self,
        webView: wkeWebView,
        message: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeFireMouseEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, message, x, y, flags)
    }
    pub unsafe fn wkeFireContextMenuEvent(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeFireContextMenuEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, flags)
    }
    pub unsafe fn wkeFireMouseWheelEvent(
        &self,
        webView: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        delta: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> BOOL {
        (self
            .wkeFireMouseWheelEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, x, y, delta, flags)
    }
    pub unsafe fn wkeFireKeyUpEvent(
        &self,
        webView: wkeWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeFireKeyUpEvent
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn wkeFireKeyDownEvent(
        &self,
        webView: wkeWebView,
        virtualKeyCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeFireKeyDownEvent
            .as_ref()
            .expect("Expected function, got error."))(
            webView, virtualKeyCode, flags, systemKey
        )
    }
    pub unsafe fn wkeFireKeyPressEvent(
        &self,
        webView: wkeWebView,
        charCode: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        systemKey: bool,
    ) -> BOOL {
        (self
            .wkeFireKeyPressEvent
            .as_ref()
            .expect("Expected function, got error."))(webView, charCode, flags, systemKey)
    }
    pub unsafe fn wkeFireWindowsMessage(
        &self,
        webView: wkeWebView,
        hWnd: HWND,
        message: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        result: *mut LRESULT,
    ) -> BOOL {
        (self
            .wkeFireWindowsMessage
            .as_ref()
            .expect("Expected function, got error."))(
            webView, hWnd, message, wParam, lParam, result,
        )
    }
    pub unsafe fn wkeSetFocus(&self, webView: wkeWebView) {
        (self
            .wkeSetFocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeKillFocus(&self, webView: wkeWebView) {
        (self
            .wkeKillFocus
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetCaretRect(&self, webView: wkeWebView) -> wkeRect {
        (self
            .wkeGetCaretRect
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetCaretRect2(&self, webView: wkeWebView) -> *mut wkeRect {
        (self
            .wkeGetCaretRect2
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeRunJS(&self, webView: wkeWebView, script: *const utf8) -> jsValue {
        (self
            .wkeRunJS
            .as_ref()
            .expect("Expected function, got error."))(webView, script)
    }
    pub unsafe fn wkeRunJSW(&self, webView: wkeWebView, script: *const wchar_t) -> jsValue {
        (self
            .wkeRunJSW
            .as_ref()
            .expect("Expected function, got error."))(webView, script)
    }
    pub unsafe fn wkeGlobalExec(&self, webView: wkeWebView) -> jsExecState {
        (self
            .wkeGlobalExec
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeGetGlobalExecByFrame(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
    ) -> jsExecState {
        (self
            .wkeGetGlobalExecByFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn wkeSleep(&self, webView: wkeWebView) {
        (self
            .wkeSleep
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeWake(&self, webView: wkeWebView) {
        (self
            .wkeWake
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeIsAwake(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsAwake
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetZoomFactor(&self, webView: wkeWebView, factor: f32) {
        (self
            .wkeSetZoomFactor
            .as_ref()
            .expect("Expected function, got error."))(webView, factor)
    }
    pub unsafe fn wkeGetZoomFactor(&self, webView: wkeWebView) -> f32 {
        (self
            .wkeGetZoomFactor
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeEnableHighDPISupport(&self) {
        (self
            .wkeEnableHighDPISupport
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeSetEditable(&self, webView: wkeWebView, editable: bool) {
        (self
            .wkeSetEditable
            .as_ref()
            .expect("Expected function, got error."))(webView, editable)
    }
    pub unsafe fn wkeGetString(&self, string: wkeString) -> *const utf8 {
        (self
            .wkeGetString
            .as_ref()
            .expect("Expected function, got error."))(string)
    }
    pub unsafe fn wkeGetStringW(&self, string: wkeString) -> *const wchar_t {
        (self
            .wkeGetStringW
            .as_ref()
            .expect("Expected function, got error."))(string)
    }
    pub unsafe fn wkeSetString(&self, string: wkeString, str_: *const utf8, len: usize) {
        (self
            .wkeSetString
            .as_ref()
            .expect("Expected function, got error."))(string, str_, len)
    }
    pub unsafe fn wkeSetStringWithoutNullTermination(
        &self,
        string: wkeString,
        str_: *const utf8,
        len: usize,
    ) {
        (self
            .wkeSetStringWithoutNullTermination
            .as_ref()
            .expect("Expected function, got error."))(string, str_, len)
    }
    pub unsafe fn wkeSetStringW(&self, string: wkeString, str_: *const wchar_t, len: usize) {
        (self
            .wkeSetStringW
            .as_ref()
            .expect("Expected function, got error."))(string, str_, len)
    }
    pub unsafe fn wkeCreateString(&self, str_: *const utf8, len: usize) -> wkeString {
        (self
            .wkeCreateString
            .as_ref()
            .expect("Expected function, got error."))(str_, len)
    }
    pub unsafe fn wkeCreateStringW(&self, str_: *const wchar_t, len: usize) -> wkeString {
        (self
            .wkeCreateStringW
            .as_ref()
            .expect("Expected function, got error."))(str_, len)
    }
    pub unsafe fn wkeCreateStringWithoutNullTermination(
        &self,
        str_: *const utf8,
        len: usize,
    ) -> wkeString {
        (self
            .wkeCreateStringWithoutNullTermination
            .as_ref()
            .expect("Expected function, got error."))(str_, len)
    }
    pub unsafe fn wkeGetStringLen(&self, str_: wkeString) -> usize {
        (self
            .wkeGetStringLen
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn wkeDeleteString(&self, str_: wkeString) {
        (self
            .wkeDeleteString
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn wkeGetWebViewForCurrentContext(&self) -> wkeWebView {
        (self
            .wkeGetWebViewForCurrentContext
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeSetUserKeyValue(
        &self,
        webView: wkeWebView,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeSetUserKeyValue
            .as_ref()
            .expect("Expected function, got error."))(webView, key, value)
    }
    pub unsafe fn wkeGetUserKeyValue(
        &self,
        webView: wkeWebView,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .wkeGetUserKeyValue
            .as_ref()
            .expect("Expected function, got error."))(webView, key)
    }
    pub unsafe fn wkeGetCursorInfoType(&self, webView: wkeWebView) -> ::std::os::raw::c_int {
        (self
            .wkeGetCursorInfoType
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeSetCursorInfoType(&self, webView: wkeWebView, type_: ::std::os::raw::c_int) {
        (self
            .wkeSetCursorInfoType
            .as_ref()
            .expect("Expected function, got error."))(webView, type_)
    }
    pub unsafe fn wkeSetDragFiles(
        &self,
        webView: wkeWebView,
        clintPos: *const POINT,
        screenPos: *const POINT,
        files: *mut wkeString,
        filesCount: ::std::os::raw::c_int,
    ) {
        (self
            .wkeSetDragFiles
            .as_ref()
            .expect("Expected function, got error."))(
            webView, clintPos, screenPos, files, filesCount,
        )
    }
    pub unsafe fn wkeSetDeviceParameter(
        &self,
        webView: wkeWebView,
        device: *const ::std::os::raw::c_char,
        paramStr: *const ::std::os::raw::c_char,
        paramInt: ::std::os::raw::c_int,
        paramFloat: f32,
    ) {
        (self
            .wkeSetDeviceParameter
            .as_ref()
            .expect("Expected function, got error."))(
            webView, device, paramStr, paramInt, paramFloat,
        )
    }
    pub unsafe fn wkeGetTempCallbackInfo(&self, webView: wkeWebView) -> *mut wkeTempCallbackInfo {
        (self
            .wkeGetTempCallbackInfo
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeOnCaretChanged(
        &self,
        webView: wkeWebView,
        callback: wkeCaretChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnCaretChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnMouseOverUrlChanged(
        &self,
        webView: wkeWebView,
        callback: wkeTitleChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnMouseOverUrlChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnTitleChanged(
        &self,
        webView: wkeWebView,
        callback: wkeTitleChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnTitleChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnURLChanged(
        &self,
        webView: wkeWebView,
        callback: wkeURLChangedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnURLChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnURLChanged2(
        &self,
        webView: wkeWebView,
        callback: wkeURLChangedCallback2,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnURLChanged2
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnPaintUpdated(
        &self,
        webView: wkeWebView,
        callback: wkePaintUpdatedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnPaintUpdated
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnPaintBitUpdated(
        &self,
        webView: wkeWebView,
        callback: wkePaintBitUpdatedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnPaintBitUpdated
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnAlertBox(
        &self,
        webView: wkeWebView,
        callback: wkeAlertBoxCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnAlertBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnConfirmBox(
        &self,
        webView: wkeWebView,
        callback: wkeConfirmBoxCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnConfirmBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnPromptBox(
        &self,
        webView: wkeWebView,
        callback: wkePromptBoxCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnPromptBox
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnNavigation(
        &self,
        webView: wkeWebView,
        callback: wkeNavigationCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnNavigation
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnCreateView(
        &self,
        webView: wkeWebView,
        callback: wkeCreateViewCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnCreateView
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnDocumentReady(
        &self,
        webView: wkeWebView,
        callback: wkeDocumentReadyCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDocumentReady
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnDocumentReady2(
        &self,
        webView: wkeWebView,
        callback: wkeDocumentReady2Callback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDocumentReady2
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnLoadingFinish(
        &self,
        webView: wkeWebView,
        callback: wkeLoadingFinishCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadingFinish
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnDownload(
        &self,
        webView: wkeWebView,
        callback: wkeDownloadCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDownload
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnDownload2(
        &self,
        webView: wkeWebView,
        callback: wkeDownload2Callback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDownload2
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnConsole(
        &self,
        webView: wkeWebView,
        callback: wkeConsoleCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnConsole
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeSetUIThreadCallback(
        &self,
        webView: wkeWebView,
        callback: wkeCallUiThread,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeSetUIThreadCallback
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnLoadUrlBegin(
        &self,
        webView: wkeWebView,
        callback: wkeLoadUrlBeginCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadUrlBegin
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnLoadUrlEnd(
        &self,
        webView: wkeWebView,
        callback: wkeLoadUrlEndCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadUrlEnd
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnLoadUrlHeadersReceived(
        &self,
        webView: wkeWebView,
        callback: wkeLoadUrlHeadersReceivedCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadUrlHeadersReceived
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnLoadUrlFinish(
        &self,
        webView: wkeWebView,
        callback: wkeLoadUrlFinishCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadUrlFinish
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnLoadUrlFail(
        &self,
        webView: wkeWebView,
        callback: wkeLoadUrlFailCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnLoadUrlFail
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnDidCreateScriptContext(
        &self,
        webView: wkeWebView,
        callback: wkeDidCreateScriptContextCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDidCreateScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnWillReleaseScriptContext(
        &self,
        webView: wkeWebView,
        callback: wkeWillReleaseScriptContextCallback,
        callbackParam: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnWillReleaseScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, callbackParam)
    }
    pub unsafe fn wkeOnWindowClosing(
        &self,
        webWindow: wkeWebView,
        callback: wkeWindowClosingCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnWindowClosing
            .as_ref()
            .expect("Expected function, got error."))(webWindow, callback, param)
    }
    pub unsafe fn wkeOnWindowDestroy(
        &self,
        webWindow: wkeWebView,
        callback: wkeWindowDestroyCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnWindowDestroy
            .as_ref()
            .expect("Expected function, got error."))(webWindow, callback, param)
    }
    pub unsafe fn wkeOnDraggableRegionsChanged(
        &self,
        webView: wkeWebView,
        callback: wkeDraggableRegionsChangedCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnDraggableRegionsChanged
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnWillMediaLoad(
        &self,
        webView: wkeWebView,
        callback: wkeWillMediaLoadCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnWillMediaLoad
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnStartDragging(
        &self,
        webView: wkeWebView,
        callback: wkeStartDraggingCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnStartDragging
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnPrint(
        &self,
        webView: wkeWebView,
        callback: wkeOnPrintCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnPrint
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeScreenshot(
        &self,
        webView: wkeWebView,
        settings: *const wkeScreenshotSettings,
        callback: wkeOnScreenshot,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeScreenshot
            .as_ref()
            .expect("Expected function, got error."))(webView, settings, callback, param)
    }
    pub unsafe fn wkeOnOtherLoad(
        &self,
        webView: wkeWebView,
        callback: wkeOnOtherLoadCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnOtherLoad
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnContextMenuItemClick(
        &self,
        webView: wkeWebView,
        callback: wkeOnContextMenuItemClickCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnContextMenuItemClick
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeIsProcessingUserGesture(&self, webView: wkeWebView) -> BOOL {
        (self
            .wkeIsProcessingUserGesture
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeNetSetMIMEType(
        &self,
        jobPtr: wkeNetJob,
        type_: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeNetSetMIMEType
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, type_)
    }
    pub unsafe fn wkeNetGetMIMEType(
        &self,
        jobPtr: wkeNetJob,
        mime: wkeString,
    ) -> *const ::std::os::raw::c_char {
        (self
            .wkeNetGetMIMEType
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, mime)
    }
    pub unsafe fn wkeNetGetReferrer(&self, jobPtr: wkeNetJob) -> *const ::std::os::raw::c_char {
        (self
            .wkeNetGetReferrer
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetSetHTTPHeaderField(
        &self,
        jobPtr: wkeNetJob,
        key: *const wchar_t,
        value: *const wchar_t,
        response: bool,
    ) {
        (self
            .wkeNetSetHTTPHeaderField
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, key, value, response)
    }
    pub unsafe fn wkeNetGetHTTPHeaderField(
        &self,
        jobPtr: wkeNetJob,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .wkeNetGetHTTPHeaderField
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, key)
    }
    pub unsafe fn wkeNetGetHTTPHeaderFieldFromResponse(
        &self,
        jobPtr: wkeNetJob,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .wkeNetGetHTTPHeaderFieldFromResponse
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, key)
    }
    pub unsafe fn wkeNetSetData(
        &self,
        jobPtr: wkeNetJob,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) {
        (self
            .wkeNetSetData
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, buf, len)
    }
    pub unsafe fn wkeNetHookRequest(&self, jobPtr: wkeNetJob) {
        (self
            .wkeNetHookRequest
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetOnResponse(
        &self,
        webView: wkeWebView,
        callback: wkeNetResponseCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeNetOnResponse
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeNetGetRequestMethod(&self, jobPtr: wkeNetJob) -> wkeRequestType {
        (self
            .wkeNetGetRequestMethod
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetGetFavicon(
        &self,
        webView: wkeWebView,
        callback: wkeOnNetGetFaviconCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .wkeNetGetFavicon
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeNetContinueJob(&self, jobPtr: wkeNetJob) {
        (self
            .wkeNetContinueJob
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetGetUrlByJob(&self, jobPtr: wkeNetJob) -> *const ::std::os::raw::c_char {
        (self
            .wkeNetGetUrlByJob
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetGetRawHttpHead(&self, jobPtr: wkeNetJob) -> *const wkeSlist {
        (self
            .wkeNetGetRawHttpHead
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetGetRawResponseHead(&self, jobPtr: wkeNetJob) -> *const wkeSlist {
        (self
            .wkeNetGetRawResponseHead
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetCancelRequest(&self, jobPtr: wkeNetJob) {
        (self
            .wkeNetCancelRequest
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetHoldJobToAsynCommit(&self, jobPtr: wkeNetJob) -> BOOL {
        (self
            .wkeNetHoldJobToAsynCommit
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetChangeRequestUrl(
        &self,
        jobPtr: wkeNetJob,
        url: *const ::std::os::raw::c_char,
    ) {
        (self
            .wkeNetChangeRequestUrl
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, url)
    }
    pub unsafe fn wkeNetCreateWebUrlRequest(
        &self,
        url: *const utf8,
        method: *const utf8,
        mime: *const utf8,
    ) -> wkeWebUrlRequestPtr {
        (self
            .wkeNetCreateWebUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(url, method, mime)
    }
    pub unsafe fn wkeNetCreateWebUrlRequest2(
        &self,
        request: blinkWebURLRequestPtr,
    ) -> wkeWebUrlRequestPtr {
        (self
            .wkeNetCreateWebUrlRequest2
            .as_ref()
            .expect("Expected function, got error."))(request)
    }
    pub unsafe fn wkeNetCopyWebUrlRequest(
        &self,
        jobPtr: wkeNetJob,
        needExtraData: bool,
    ) -> blinkWebURLRequestPtr {
        (self
            .wkeNetCopyWebUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(jobPtr, needExtraData)
    }
    pub unsafe fn wkeNetDeleteBlinkWebURLRequestPtr(&self, request: blinkWebURLRequestPtr) {
        (self
            .wkeNetDeleteBlinkWebURLRequestPtr
            .as_ref()
            .expect("Expected function, got error."))(request)
    }
    pub unsafe fn wkeNetAddHTTPHeaderFieldToUrlRequest(
        &self,
        request: wkeWebUrlRequestPtr,
        name: *const utf8,
        value: *const utf8,
    ) {
        (self
            .wkeNetAddHTTPHeaderFieldToUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(request, name, value)
    }
    pub unsafe fn wkeNetStartUrlRequest(
        &self,
        webView: wkeWebView,
        request: wkeWebUrlRequestPtr,
        param: *mut ::std::os::raw::c_void,
        callbacks: *const wkeUrlRequestCallbacks,
    ) -> ::std::os::raw::c_int {
        (self
            .wkeNetStartUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(webView, request, param, callbacks)
    }
    pub unsafe fn wkeNetGetHttpStatusCode(
        &self,
        response: wkeWebUrlResponsePtr,
    ) -> ::std::os::raw::c_int {
        (self
            .wkeNetGetHttpStatusCode
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn wkeNetGetExpectedContentLength(
        &self,
        response: wkeWebUrlResponsePtr,
    ) -> ::std::os::raw::c_longlong {
        (self
            .wkeNetGetExpectedContentLength
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn wkeNetGetResponseUrl(&self, response: wkeWebUrlResponsePtr) -> *const utf8 {
        (self
            .wkeNetGetResponseUrl
            .as_ref()
            .expect("Expected function, got error."))(response)
    }
    pub unsafe fn wkeNetCancelWebUrlRequest(&self, requestId: ::std::os::raw::c_int) {
        (self
            .wkeNetCancelWebUrlRequest
            .as_ref()
            .expect("Expected function, got error."))(requestId)
    }
    pub unsafe fn wkeNetGetPostBody(&self, jobPtr: wkeNetJob) -> *mut wkePostBodyElements {
        (self
            .wkeNetGetPostBody
            .as_ref()
            .expect("Expected function, got error."))(jobPtr)
    }
    pub unsafe fn wkeNetCreatePostBodyElements(
        &self,
        webView: wkeWebView,
        length: usize,
    ) -> *mut wkePostBodyElements {
        (self
            .wkeNetCreatePostBodyElements
            .as_ref()
            .expect("Expected function, got error."))(webView, length)
    }
    pub unsafe fn wkeNetFreePostBodyElements(&self, elements: *mut wkePostBodyElements) {
        (self
            .wkeNetFreePostBodyElements
            .as_ref()
            .expect("Expected function, got error."))(elements)
    }
    pub unsafe fn wkeNetCreatePostBodyElement(
        &self,
        webView: wkeWebView,
    ) -> *mut wkePostBodyElement {
        (self
            .wkeNetCreatePostBodyElement
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeNetFreePostBodyElement(&self, element: *mut wkePostBodyElement) {
        (self
            .wkeNetFreePostBodyElement
            .as_ref()
            .expect("Expected function, got error."))(element)
    }
    pub unsafe fn wkePopupDialogAndDownload(
        &self,
        webviewHandle: wkeWebView,
        dialogOpt: *const wkeDialogOptions,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: wkeNetJob,
        dataBind: *mut wkeNetJobDataBind,
        callbackBind: *mut wkeDownloadBind,
    ) -> wkeDownloadOpt {
        (self
            .wkePopupDialogAndDownload
            .as_ref()
            .expect("Expected function, got error."))(
            webviewHandle,
            dialogOpt,
            expectedContentLength,
            url,
            mime,
            disposition,
            job,
            dataBind,
            callbackBind,
        )
    }
    pub unsafe fn wkeDownloadByPath(
        &self,
        webviewHandle: wkeWebView,
        dialogOpt: *const wkeDialogOptions,
        path: *const WCHAR,
        expectedContentLength: usize,
        url: *const ::std::os::raw::c_char,
        mime: *const ::std::os::raw::c_char,
        disposition: *const ::std::os::raw::c_char,
        job: wkeNetJob,
        dataBind: *mut wkeNetJobDataBind,
        callbackBind: *mut wkeDownloadBind,
    ) -> wkeDownloadOpt {
        (self
            .wkeDownloadByPath
            .as_ref()
            .expect("Expected function, got error."))(
            webviewHandle,
            dialogOpt,
            path,
            expectedContentLength,
            url,
            mime,
            disposition,
            job,
            dataBind,
            callbackBind,
        )
    }
    pub unsafe fn wkeIsMainFrame(&self, webView: wkeWebView, frameId: wkeWebFrameHandle) -> BOOL {
        (self
            .wkeIsMainFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn wkeIsWebRemoteFrame(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
    ) -> BOOL {
        (self
            .wkeIsWebRemoteFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId)
    }
    pub unsafe fn wkeWebFrameGetMainFrame(&self, webView: wkeWebView) -> wkeWebFrameHandle {
        (self
            .wkeWebFrameGetMainFrame
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeRunJsByFrame(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        script: *const utf8,
        isInClosure: bool,
    ) -> jsValue {
        (self
            .wkeRunJsByFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, script, isInClosure)
    }
    pub unsafe fn wkeInsertCSSByFrame(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        cssText: *const utf8,
    ) {
        (self
            .wkeInsertCSSByFrame
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, cssText)
    }
    pub unsafe fn wkeWebFrameGetMainWorldScriptContext(
        &self,
        webView: wkeWebView,
        webFrameId: wkeWebFrameHandle,
        contextOut: v8ContextPtr,
    ) {
        (self
            .wkeWebFrameGetMainWorldScriptContext
            .as_ref()
            .expect("Expected function, got error."))(webView, webFrameId, contextOut)
    }
    pub unsafe fn wkeGetBlinkMainThreadIsolate(&self) -> v8Isolate {
        (self
            .wkeGetBlinkMainThreadIsolate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeCreateWebWindow(
        &self,
        type_: wkeWindowType,
        parent: HWND,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> wkeWebView {
        (self
            .wkeCreateWebWindow
            .as_ref()
            .expect("Expected function, got error."))(type_, parent, x, y, width, height)
    }
    pub unsafe fn wkeCreateWebCustomWindow(&self, info: *const wkeWindowCreateInfo) -> wkeWebView {
        (self
            .wkeCreateWebCustomWindow
            .as_ref()
            .expect("Expected function, got error."))(info)
    }
    pub unsafe fn wkeDestroyWebWindow(&self, webWindow: wkeWebView) {
        (self
            .wkeDestroyWebWindow
            .as_ref()
            .expect("Expected function, got error."))(webWindow)
    }
    pub unsafe fn wkeGetWindowHandle(&self, webWindow: wkeWebView) -> HWND {
        (self
            .wkeGetWindowHandle
            .as_ref()
            .expect("Expected function, got error."))(webWindow)
    }
    pub unsafe fn wkeShowWindow(&self, webWindow: wkeWebView, show: bool) {
        (self
            .wkeShowWindow
            .as_ref()
            .expect("Expected function, got error."))(webWindow, show)
    }
    pub unsafe fn wkeEnableWindow(&self, webWindow: wkeWebView, enable: bool) {
        (self
            .wkeEnableWindow
            .as_ref()
            .expect("Expected function, got error."))(webWindow, enable)
    }
    pub unsafe fn wkeMoveWindow(
        &self,
        webWindow: wkeWebView,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        (self
            .wkeMoveWindow
            .as_ref()
            .expect("Expected function, got error."))(webWindow, x, y, width, height)
    }
    pub unsafe fn wkeMoveToCenter(&self, webWindow: wkeWebView) {
        (self
            .wkeMoveToCenter
            .as_ref()
            .expect("Expected function, got error."))(webWindow)
    }
    pub unsafe fn wkeResizeWindow(
        &self,
        webWindow: wkeWebView,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        (self
            .wkeResizeWindow
            .as_ref()
            .expect("Expected function, got error."))(webWindow, width, height)
    }
    pub unsafe fn wkeDragTargetDragEnter(
        &self,
        webView: wkeWebView,
        webDragData: *const wkeWebDragData,
        clientPoint: *const POINT,
        screenPoint: *const POINT,
        operationsAllowed: wkeWebDragOperationsMask,
        modifiers: ::std::os::raw::c_int,
    ) -> wkeWebDragOperation {
        (self
            .wkeDragTargetDragEnter
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            webDragData,
            clientPoint,
            screenPoint,
            operationsAllowed,
            modifiers,
        )
    }
    pub unsafe fn wkeDragTargetDragOver(
        &self,
        webView: wkeWebView,
        clientPoint: *const POINT,
        screenPoint: *const POINT,
        operationsAllowed: wkeWebDragOperationsMask,
        modifiers: ::std::os::raw::c_int,
    ) -> wkeWebDragOperation {
        (self
            .wkeDragTargetDragOver
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            clientPoint,
            screenPoint,
            operationsAllowed,
            modifiers,
        )
    }
    pub unsafe fn wkeDragTargetDragLeave(&self, webView: wkeWebView) {
        (self
            .wkeDragTargetDragLeave
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeDragTargetDrop(
        &self,
        webView: wkeWebView,
        clientPoint: *const POINT,
        screenPoint: *const POINT,
        modifiers: ::std::os::raw::c_int,
    ) {
        (self
            .wkeDragTargetDrop
            .as_ref()
            .expect("Expected function, got error."))(
            webView, clientPoint, screenPoint, modifiers
        )
    }
    pub unsafe fn wkeDragTargetEnd(
        &self,
        webView: wkeWebView,
        clientPoint: *const POINT,
        screenPoint: *const POINT,
        operation: wkeWebDragOperation,
    ) {
        (self
            .wkeDragTargetEnd
            .as_ref()
            .expect("Expected function, got error."))(
            webView, clientPoint, screenPoint, operation
        )
    }
    pub unsafe fn wkeUtilSetUiCallback(&self, callback: wkeUiThreadPostTaskCallback) {
        (self
            .wkeUtilSetUiCallback
            .as_ref()
            .expect("Expected function, got error."))(callback)
    }
    pub unsafe fn wkeUtilSerializeToMHTML(&self, webView: wkeWebView) -> *const utf8 {
        (self
            .wkeUtilSerializeToMHTML
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn wkeUtilPrintToPdf(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        settings: *const wkePrintSettings,
    ) -> *const wkePdfDatas {
        (self
            .wkeUtilPrintToPdf
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, settings)
    }
    pub unsafe fn wkePrintToBitmap(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        settings: *const wkeScreenshotSettings,
    ) -> *const wkeMemBuf {
        (self
            .wkePrintToBitmap
            .as_ref()
            .expect("Expected function, got error."))(webView, frameId, settings)
    }
    pub unsafe fn wkeUtilRelasePrintPdfDatas(&self, datas: *const wkePdfDatas) {
        (self
            .wkeUtilRelasePrintPdfDatas
            .as_ref()
            .expect("Expected function, got error."))(datas)
    }
    pub unsafe fn wkeSetWindowTitle(&self, webWindow: wkeWebView, title: *const utf8) {
        (self
            .wkeSetWindowTitle
            .as_ref()
            .expect("Expected function, got error."))(webWindow, title)
    }
    pub unsafe fn wkeSetWindowTitleW(&self, webWindow: wkeWebView, title: *const wchar_t) {
        (self
            .wkeSetWindowTitleW
            .as_ref()
            .expect("Expected function, got error."))(webWindow, title)
    }
    pub unsafe fn wkeNodeOnCreateProcess(
        &self,
        webView: wkeWebView,
        callback: wkeNodeOnCreateProcessCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeNodeOnCreateProcess
            .as_ref()
            .expect("Expected function, got error."))(webView, callback, param)
    }
    pub unsafe fn wkeOnPluginFind(
        &self,
        webView: wkeWebView,
        mime: *const ::std::os::raw::c_char,
        callback: wkeOnPluginFindCallback,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeOnPluginFind
            .as_ref()
            .expect("Expected function, got error."))(webView, mime, callback, param)
    }
    pub unsafe fn wkeAddNpapiPlugin(
        &self,
        webView: wkeWebView,
        initializeFunc: *mut ::std::os::raw::c_void,
        getEntryPointsFunc: *mut ::std::os::raw::c_void,
        shutdownFunc: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeAddNpapiPlugin
            .as_ref()
            .expect("Expected function, got error."))(
            webView,
            initializeFunc,
            getEntryPointsFunc,
            shutdownFunc,
        )
    }
    pub unsafe fn wkePluginListBuilderAddPlugin(
        &self,
        builder: *mut ::std::os::raw::c_void,
        name: *const utf8,
        description: *const utf8,
        fileName: *const utf8,
    ) {
        (self
            .wkePluginListBuilderAddPlugin
            .as_ref()
            .expect("Expected function, got error."))(builder, name, description, fileName)
    }
    pub unsafe fn wkePluginListBuilderAddMediaTypeToLastPlugin(
        &self,
        builder: *mut ::std::os::raw::c_void,
        name: *const utf8,
        description: *const utf8,
    ) {
        (self
            .wkePluginListBuilderAddMediaTypeToLastPlugin
            .as_ref()
            .expect("Expected function, got error."))(builder, name, description)
    }
    pub unsafe fn wkePluginListBuilderAddFileExtensionToLastMediaType(
        &self,
        builder: *mut ::std::os::raw::c_void,
        fileExtension: *const utf8,
    ) {
        (self
            .wkePluginListBuilderAddFileExtensionToLastMediaType
            .as_ref()
            .expect("Expected function, got error."))(builder, fileExtension)
    }
    pub unsafe fn wkeGetWebViewByNData(&self, ndata: *mut ::std::os::raw::c_void) -> wkeWebView {
        (self
            .wkeGetWebViewByNData
            .as_ref()
            .expect("Expected function, got error."))(ndata)
    }
    pub unsafe fn wkeRegisterEmbedderCustomElement(
        &self,
        webView: wkeWebView,
        frameId: wkeWebFrameHandle,
        name: *const ::std::os::raw::c_char,
        options: *mut ::std::os::raw::c_void,
        outResult: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self
            .wkeRegisterEmbedderCustomElement
            .as_ref()
            .expect("Expected function, got error."))(
            webView, frameId, name, options, outResult
        )
    }
    pub unsafe fn wkeSetMediaPlayerFactory(
        &self,
        webView: wkeWebView,
        factory: wkeMediaPlayerFactory,
        callback: wkeOnIsMediaPlayerSupportsMIMEType,
    ) {
        (self
            .wkeSetMediaPlayerFactory
            .as_ref()
            .expect("Expected function, got error."))(webView, factory, callback)
    }
    pub unsafe fn wkeGetContentAsMarkup(
        &self,
        webView: wkeWebView,
        frame: wkeWebFrameHandle,
        size: *mut usize,
    ) -> *const utf8 {
        (self
            .wkeGetContentAsMarkup
            .as_ref()
            .expect("Expected function, got error."))(webView, frame, size)
    }
    pub unsafe fn wkeUtilDecodeURLEscape(&self, url: *const utf8) -> *const utf8 {
        (self
            .wkeUtilDecodeURLEscape
            .as_ref()
            .expect("Expected function, got error."))(url)
    }
    pub unsafe fn wkeUtilEncodeURLEscape(&self, url: *const utf8) -> *const utf8 {
        (self
            .wkeUtilEncodeURLEscape
            .as_ref()
            .expect("Expected function, got error."))(url)
    }
    pub unsafe fn wkeUtilBase64Encode(&self, str_: *const utf8) -> *const utf8 {
        (self
            .wkeUtilBase64Encode
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn wkeUtilBase64Decode(&self, str_: *const utf8) -> *const utf8 {
        (self
            .wkeUtilBase64Decode
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn wkeUtilCreateV8Snapshot(&self, str_: *const utf8) -> *const wkeMemBuf {
        (self
            .wkeUtilCreateV8Snapshot
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn wkeRunMessageLoop(&self) {
        (self
            .wkeRunMessageLoop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wkeSaveMemoryCache(&self, webView: wkeWebView) {
        (self
            .wkeSaveMemoryCache
            .as_ref()
            .expect("Expected function, got error."))(webView)
    }
    pub unsafe fn jsBindFunction(
        &self,
        name: *const ::std::os::raw::c_char,
        fn_: jsNativeFunction,
        argCount: ::std::os::raw::c_uint,
    ) {
        (self
            .jsBindFunction
            .as_ref()
            .expect("Expected function, got error."))(name, fn_, argCount)
    }
    pub unsafe fn jsBindGetter(&self, name: *const ::std::os::raw::c_char, fn_: jsNativeFunction) {
        (self
            .jsBindGetter
            .as_ref()
            .expect("Expected function, got error."))(name, fn_)
    }
    pub unsafe fn jsBindSetter(&self, name: *const ::std::os::raw::c_char, fn_: jsNativeFunction) {
        (self
            .jsBindSetter
            .as_ref()
            .expect("Expected function, got error."))(name, fn_)
    }
    pub unsafe fn wkeJsBindFunction(
        &self,
        name: *const ::std::os::raw::c_char,
        fn_: wkeJsNativeFunction,
        param: *mut ::std::os::raw::c_void,
        argCount: ::std::os::raw::c_uint,
    ) {
        (self
            .wkeJsBindFunction
            .as_ref()
            .expect("Expected function, got error."))(name, fn_, param, argCount)
    }
    pub unsafe fn wkeJsBindGetter(
        &self,
        name: *const ::std::os::raw::c_char,
        fn_: wkeJsNativeFunction,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeJsBindGetter
            .as_ref()
            .expect("Expected function, got error."))(name, fn_, param)
    }
    pub unsafe fn wkeJsBindSetter(
        &self,
        name: *const ::std::os::raw::c_char,
        fn_: wkeJsNativeFunction,
        param: *mut ::std::os::raw::c_void,
    ) {
        (self
            .wkeJsBindSetter
            .as_ref()
            .expect("Expected function, got error."))(name, fn_, param)
    }
    pub unsafe fn jsArgCount(&self, es: jsExecState) -> ::std::os::raw::c_int {
        (self
            .jsArgCount
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsArgType(&self, es: jsExecState, argIdx: ::std::os::raw::c_int) -> jsType {
        (self
            .jsArgType
            .as_ref()
            .expect("Expected function, got error."))(es, argIdx)
    }
    pub unsafe fn jsArg(&self, es: jsExecState, argIdx: ::std::os::raw::c_int) -> jsValue {
        (self.jsArg.as_ref().expect("Expected function, got error."))(es, argIdx)
    }
    pub unsafe fn jsTypeOf(&self, v: jsValue) -> jsType {
        (self
            .jsTypeOf
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsNumber(&self, v: jsValue) -> BOOL {
        (self
            .jsIsNumber
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsString(&self, v: jsValue) -> BOOL {
        (self
            .jsIsString
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsBoolean(&self, v: jsValue) -> BOOL {
        (self
            .jsIsBoolean
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsObject(&self, v: jsValue) -> BOOL {
        (self
            .jsIsObject
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsFunction(&self, v: jsValue) -> BOOL {
        (self
            .jsIsFunction
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsUndefined(&self, v: jsValue) -> BOOL {
        (self
            .jsIsUndefined
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsNull(&self, v: jsValue) -> BOOL {
        (self
            .jsIsNull
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsArray(&self, v: jsValue) -> BOOL {
        (self
            .jsIsArray
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsTrue(&self, v: jsValue) -> BOOL {
        (self
            .jsIsTrue
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsIsFalse(&self, v: jsValue) -> BOOL {
        (self
            .jsIsFalse
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn jsToInt(&self, es: jsExecState, v: jsValue) -> ::std::os::raw::c_int {
        (self
            .jsToInt
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToFloat(&self, es: jsExecState, v: jsValue) -> f32 {
        (self
            .jsToFloat
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToDouble(&self, es: jsExecState, v: jsValue) -> f64 {
        (self
            .jsToDouble
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToDoubleString(
        &self,
        es: jsExecState,
        v: jsValue,
    ) -> *const ::std::os::raw::c_char {
        (self
            .jsToDoubleString
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToBoolean(&self, es: jsExecState, v: jsValue) -> BOOL {
        (self
            .jsToBoolean
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsArrayBuffer(
        &self,
        es: jsExecState,
        buffer: *const ::std::os::raw::c_char,
        size: usize,
    ) -> jsValue {
        (self
            .jsArrayBuffer
            .as_ref()
            .expect("Expected function, got error."))(es, buffer, size)
    }
    pub unsafe fn jsGetArrayBuffer(&self, es: jsExecState, value: jsValue) -> *mut wkeMemBuf {
        (self
            .jsGetArrayBuffer
            .as_ref()
            .expect("Expected function, got error."))(es, value)
    }
    pub unsafe fn jsToTempString(&self, es: jsExecState, v: jsValue) -> *const utf8 {
        (self
            .jsToTempString
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToTempStringW(&self, es: jsExecState, v: jsValue) -> *const wchar_t {
        (self
            .jsToTempStringW
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsToV8Value(&self, es: jsExecState, v: jsValue) -> *mut ::std::os::raw::c_void {
        (self
            .jsToV8Value
            .as_ref()
            .expect("Expected function, got error."))(es, v)
    }
    pub unsafe fn jsInt(&self, n: ::std::os::raw::c_int) -> jsValue {
        (self.jsInt.as_ref().expect("Expected function, got error."))(n)
    }
    pub unsafe fn jsFloat(&self, f: f32) -> jsValue {
        (self
            .jsFloat
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn jsDouble(&self, d: f64) -> jsValue {
        (self
            .jsDouble
            .as_ref()
            .expect("Expected function, got error."))(d)
    }
    pub unsafe fn jsDoubleString(&self, str_: *const ::std::os::raw::c_char) -> jsValue {
        (self
            .jsDoubleString
            .as_ref()
            .expect("Expected function, got error."))(str_)
    }
    pub unsafe fn jsBoolean(&self, b: bool) -> jsValue {
        (self
            .jsBoolean
            .as_ref()
            .expect("Expected function, got error."))(b)
    }
    pub unsafe fn jsUndefined(&self) -> jsValue {
        (self
            .jsUndefined
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn jsNull(&self) -> jsValue {
        (self.jsNull.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn jsTrue(&self) -> jsValue {
        (self.jsTrue.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn jsFalse(&self) -> jsValue {
        (self
            .jsFalse
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn jsString(&self, es: jsExecState, str_: *const utf8) -> jsValue {
        (self
            .jsString
            .as_ref()
            .expect("Expected function, got error."))(es, str_)
    }
    pub unsafe fn jsStringW(&self, es: jsExecState, str_: *const wchar_t) -> jsValue {
        (self
            .jsStringW
            .as_ref()
            .expect("Expected function, got error."))(es, str_)
    }
    pub unsafe fn jsEmptyObject(&self, es: jsExecState) -> jsValue {
        (self
            .jsEmptyObject
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsEmptyArray(&self, es: jsExecState) -> jsValue {
        (self
            .jsEmptyArray
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsObject(&self, es: jsExecState, obj: *mut jsData) -> jsValue {
        (self
            .jsObject
            .as_ref()
            .expect("Expected function, got error."))(es, obj)
    }
    pub unsafe fn jsFunction(&self, es: jsExecState, obj: *mut jsData) -> jsValue {
        (self
            .jsFunction
            .as_ref()
            .expect("Expected function, got error."))(es, obj)
    }
    pub unsafe fn jsGetData(&self, es: jsExecState, object: jsValue) -> *mut jsData {
        (self
            .jsGetData
            .as_ref()
            .expect("Expected function, got error."))(es, object)
    }
    pub unsafe fn jsGet(
        &self,
        es: jsExecState,
        object: jsValue,
        prop: *const ::std::os::raw::c_char,
    ) -> jsValue {
        (self.jsGet.as_ref().expect("Expected function, got error."))(es, object, prop)
    }
    pub unsafe fn jsSet(
        &self,
        es: jsExecState,
        object: jsValue,
        prop: *const ::std::os::raw::c_char,
        v: jsValue,
    ) {
        (self.jsSet.as_ref().expect("Expected function, got error."))(es, object, prop, v)
    }
    pub unsafe fn jsGetAt(
        &self,
        es: jsExecState,
        object: jsValue,
        index: ::std::os::raw::c_int,
    ) -> jsValue {
        (self
            .jsGetAt
            .as_ref()
            .expect("Expected function, got error."))(es, object, index)
    }
    pub unsafe fn jsSetAt(
        &self,
        es: jsExecState,
        object: jsValue,
        index: ::std::os::raw::c_int,
        v: jsValue,
    ) {
        (self
            .jsSetAt
            .as_ref()
            .expect("Expected function, got error."))(es, object, index, v)
    }
    pub unsafe fn jsGetKeys(&self, es: jsExecState, object: jsValue) -> *mut jsKeys {
        (self
            .jsGetKeys
            .as_ref()
            .expect("Expected function, got error."))(es, object)
    }
    pub unsafe fn jsIsJsValueValid(&self, es: jsExecState, object: jsValue) -> BOOL {
        (self
            .jsIsJsValueValid
            .as_ref()
            .expect("Expected function, got error."))(es, object)
    }
    pub unsafe fn jsIsValidExecState(&self, es: jsExecState) -> BOOL {
        (self
            .jsIsValidExecState
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsDeleteObjectProp(
        &self,
        es: jsExecState,
        object: jsValue,
        prop: *const ::std::os::raw::c_char,
    ) {
        (self
            .jsDeleteObjectProp
            .as_ref()
            .expect("Expected function, got error."))(es, object, prop)
    }
    pub unsafe fn jsGetLength(&self, es: jsExecState, object: jsValue) -> ::std::os::raw::c_int {
        (self
            .jsGetLength
            .as_ref()
            .expect("Expected function, got error."))(es, object)
    }
    pub unsafe fn jsSetLength(
        &self,
        es: jsExecState,
        object: jsValue,
        length: ::std::os::raw::c_int,
    ) {
        (self
            .jsSetLength
            .as_ref()
            .expect("Expected function, got error."))(es, object, length)
    }
    pub unsafe fn jsGlobalObject(&self, es: jsExecState) -> jsValue {
        (self
            .jsGlobalObject
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsGetWebView(&self, es: jsExecState) -> wkeWebView {
        (self
            .jsGetWebView
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsEval(&self, es: jsExecState, str_: *const utf8) -> jsValue {
        (self.jsEval.as_ref().expect("Expected function, got error."))(es, str_)
    }
    pub unsafe fn jsEvalW(&self, es: jsExecState, str_: *const wchar_t) -> jsValue {
        (self
            .jsEvalW
            .as_ref()
            .expect("Expected function, got error."))(es, str_)
    }
    pub unsafe fn jsEvalExW(
        &self,
        es: jsExecState,
        str_: *const wchar_t,
        isInClosure: bool,
    ) -> jsValue {
        (self
            .jsEvalExW
            .as_ref()
            .expect("Expected function, got error."))(es, str_, isInClosure)
    }
    pub unsafe fn jsCall(
        &self,
        es: jsExecState,
        func: jsValue,
        thisObject: jsValue,
        args: *mut jsValue,
        argCount: ::std::os::raw::c_int,
    ) -> jsValue {
        (self.jsCall.as_ref().expect("Expected function, got error."))(
            es, func, thisObject, args, argCount,
        )
    }
    pub unsafe fn jsCallGlobal(
        &self,
        es: jsExecState,
        func: jsValue,
        args: *mut jsValue,
        argCount: ::std::os::raw::c_int,
    ) -> jsValue {
        (self
            .jsCallGlobal
            .as_ref()
            .expect("Expected function, got error."))(es, func, args, argCount)
    }
    pub unsafe fn jsGetGlobal(
        &self,
        es: jsExecState,
        prop: *const ::std::os::raw::c_char,
    ) -> jsValue {
        (self
            .jsGetGlobal
            .as_ref()
            .expect("Expected function, got error."))(es, prop)
    }
    pub unsafe fn jsSetGlobal(
        &self,
        es: jsExecState,
        prop: *const ::std::os::raw::c_char,
        v: jsValue,
    ) {
        (self
            .jsSetGlobal
            .as_ref()
            .expect("Expected function, got error."))(es, prop, v)
    }
    pub unsafe fn jsGC(&self) {
        (self.jsGC.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn jsAddRef(&self, es: jsExecState, val: jsValue) -> BOOL {
        (self
            .jsAddRef
            .as_ref()
            .expect("Expected function, got error."))(es, val)
    }
    pub unsafe fn jsReleaseRef(&self, es: jsExecState, val: jsValue) -> BOOL {
        (self
            .jsReleaseRef
            .as_ref()
            .expect("Expected function, got error."))(es, val)
    }
    pub unsafe fn jsGetLastErrorIfException(&self, es: jsExecState) -> *mut jsExceptionInfo {
        (self
            .jsGetLastErrorIfException
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
    pub unsafe fn jsThrowException(&self, es: jsExecState, exception: *const utf8) -> jsValue {
        (self
            .jsThrowException
            .as_ref()
            .expect("Expected function, got error."))(es, exception)
    }
    pub unsafe fn jsGetCallstack(&self, es: jsExecState) -> *const utf8 {
        (self
            .jsGetCallstack
            .as_ref()
            .expect("Expected function, got error."))(es)
    }
}
